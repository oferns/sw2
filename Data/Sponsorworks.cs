#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sworks")]
	public partial class Sponsorworks : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountLockOutOwnerRole(AccountLockOutOwnerRole instance);
    partial void UpdateAccountLockOutOwnerRole(AccountLockOutOwnerRole instance);
    partial void DeleteAccountLockOutOwnerRole(AccountLockOutOwnerRole instance);
    partial void InsertAccountLockOutOwner(AccountLockOutOwner instance);
    partial void UpdateAccountLockOutOwner(AccountLockOutOwner instance);
    partial void DeleteAccountLockOutOwner(AccountLockOutOwner instance);
    partial void InsertAccountLockOut(AccountLockOut instance);
    partial void UpdateAccountLockOut(AccountLockOut instance);
    partial void DeleteAccountLockOut(AccountLockOut instance);
    partial void InsertAccountOwnerRole(AccountOwnerRole instance);
    partial void UpdateAccountOwnerRole(AccountOwnerRole instance);
    partial void DeleteAccountOwnerRole(AccountOwnerRole instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccountToken(AccountToken instance);
    partial void UpdateAccountToken(AccountToken instance);
    partial void DeleteAccountToken(AccountToken instance);
    partial void InsertAccountTwoFactorOwner(AccountTwoFactorOwner instance);
    partial void UpdateAccountTwoFactorOwner(AccountTwoFactorOwner instance);
    partial void DeleteAccountTwoFactorOwner(AccountTwoFactorOwner instance);
    partial void InsertAllocationStatus(AllocationStatus instance);
    partial void UpdateAllocationStatus(AllocationStatus instance);
    partial void DeleteAllocationStatus(AllocationStatus instance);
    partial void InsertDivisionMemberRole(DivisionMemberRole instance);
    partial void UpdateDivisionMemberRole(DivisionMemberRole instance);
    partial void DeleteDivisionMemberRole(DivisionMemberRole instance);
    partial void InsertDivisionMember(DivisionMember instance);
    partial void UpdateDivisionMember(DivisionMember instance);
    partial void DeleteDivisionMember(DivisionMember instance);
    partial void InsertDivisionOwnerRole(DivisionOwnerRole instance);
    partial void UpdateDivisionOwnerRole(DivisionOwnerRole instance);
    partial void DeleteDivisionOwnerRole(DivisionOwnerRole instance);
    partial void InsertDivision(Division instance);
    partial void UpdateDivision(Division instance);
    partial void DeleteDivision(Division instance);
    partial void InsertDomainImage(DomainImage instance);
    partial void UpdateDomainImage(DomainImage instance);
    partial void DeleteDomainImage(DomainImage instance);
    partial void InsertDomainOwnerRole(DomainOwnerRole instance);
    partial void UpdateDomainOwnerRole(DomainOwnerRole instance);
    partial void DeleteDomainOwnerRole(DomainOwnerRole instance);
    partial void InsertDomainPalette(DomainPalette instance);
    partial void UpdateDomainPalette(DomainPalette instance);
    partial void DeleteDomainPalette(DomainPalette instance);
    partial void InsertDomain(Domain instance);
    partial void UpdateDomain(Domain instance);
    partial void DeleteDomain(Domain instance);
    partial void InsertDomainSecurity(DomainSecurity instance);
    partial void UpdateDomainSecurity(DomainSecurity instance);
    partial void DeleteDomainSecurity(DomainSecurity instance);
    partial void InsertEventAllocationStatus(EventAllocationStatus instance);
    partial void UpdateEventAllocationStatus(EventAllocationStatus instance);
    partial void DeleteEventAllocationStatus(EventAllocationStatus instance);
    partial void InsertEventField(EventField instance);
    partial void UpdateEventField(EventField instance);
    partial void DeleteEventField(EventField instance);
    partial void InsertEventFieldValue(EventFieldValue instance);
    partial void UpdateEventFieldValue(EventFieldValue instance);
    partial void DeleteEventFieldValue(EventFieldValue instance);
    partial void InsertEventOwnerRole(EventOwnerRole instance);
    partial void UpdateEventOwnerRole(EventOwnerRole instance);
    partial void DeleteEventOwnerRole(EventOwnerRole instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventTicket(EventTicket instance);
    partial void UpdateEventTicket(EventTicket instance);
    partial void DeleteEventTicket(EventTicket instance);
    partial void InsertEventVenue(EventVenue instance);
    partial void UpdateEventVenue(EventVenue instance);
    partial void DeleteEventVenue(EventVenue instance);
    partial void InsertExternalAccountOwnerRole(ExternalAccountOwnerRole instance);
    partial void UpdateExternalAccountOwnerRole(ExternalAccountOwnerRole instance);
    partial void DeleteExternalAccountOwnerRole(ExternalAccountOwnerRole instance);
    partial void InsertExternalAccountProviderOwnerRole(ExternalAccountProviderOwnerRole instance);
    partial void UpdateExternalAccountProviderOwnerRole(ExternalAccountProviderOwnerRole instance);
    partial void DeleteExternalAccountProviderOwnerRole(ExternalAccountProviderOwnerRole instance);
    partial void InsertExternalAccountProviderOwner(ExternalAccountProviderOwner instance);
    partial void UpdateExternalAccountProviderOwner(ExternalAccountProviderOwner instance);
    partial void DeleteExternalAccountProviderOwner(ExternalAccountProviderOwner instance);
    partial void InsertExternalAccountProvider(ExternalAccountProvider instance);
    partial void UpdateExternalAccountProvider(ExternalAccountProvider instance);
    partial void DeleteExternalAccountProvider(ExternalAccountProvider instance);
    partial void InsertExternalAccount(ExternalAccount instance);
    partial void UpdateExternalAccount(ExternalAccount instance);
    partial void DeleteExternalAccount(ExternalAccount instance);
    partial void InsertFieldOwnerRole(FieldOwnerRole instance);
    partial void UpdateFieldOwnerRole(FieldOwnerRole instance);
    partial void DeleteFieldOwnerRole(FieldOwnerRole instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertFieldType(FieldType instance);
    partial void UpdateFieldType(FieldType instance);
    partial void DeleteFieldType(FieldType instance);
    partial void InsertImageType(ImageType instance);
    partial void UpdateImageType(ImageType instance);
    partial void DeleteImageType(ImageType instance);
    partial void InsertOwnedRole(OwnedRole instance);
    partial void UpdateOwnedRole(OwnedRole instance);
    partial void DeleteOwnedRole(OwnedRole instance);
    partial void InsertPaletteType(PaletteType instance);
    partial void UpdatePaletteType(PaletteType instance);
    partial void DeletePaletteType(PaletteType instance);
    partial void InsertResourceOverride(ResourceOverride instance);
    partial void UpdateResourceOverride(ResourceOverride instance);
    partial void DeleteResourceOverride(ResourceOverride instance);
    partial void InsertResourceOverridesOwnerRole(ResourceOverridesOwnerRole instance);
    partial void UpdateResourceOverridesOwnerRole(ResourceOverridesOwnerRole instance);
    partial void DeleteResourceOverridesOwnerRole(ResourceOverridesOwnerRole instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertResourceType(ResourceType instance);
    partial void UpdateResourceType(ResourceType instance);
    partial void DeleteResourceType(ResourceType instance);
    partial void InsertRoleMember(RoleMember instance);
    partial void UpdateRoleMember(RoleMember instance);
    partial void DeleteRoleMember(RoleMember instance);
    partial void InsertRoleOwnerAllowedRole(RoleOwnerAllowedRole instance);
    partial void UpdateRoleOwnerAllowedRole(RoleOwnerAllowedRole instance);
    partial void DeleteRoleOwnerAllowedRole(RoleOwnerAllowedRole instance);
    partial void InsertRoleOwnerRole(RoleOwnerRole instance);
    partial void UpdateRoleOwnerRole(RoleOwnerRole instance);
    partial void DeleteRoleOwnerRole(RoleOwnerRole instance);
    partial void InsertRoleRelationship(RoleRelationship instance);
    partial void UpdateRoleRelationship(RoleRelationship instance);
    partial void DeleteRoleRelationship(RoleRelationship instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTicketAllocationRole(TicketAllocationRole instance);
    partial void UpdateTicketAllocationRole(TicketAllocationRole instance);
    partial void DeleteTicketAllocationRole(TicketAllocationRole instance);
    partial void InsertTicketAllocation(TicketAllocation instance);
    partial void UpdateTicketAllocation(TicketAllocation instance);
    partial void DeleteTicketAllocation(TicketAllocation instance);
    partial void InsertTicketAllocationStatus(TicketAllocationStatus instance);
    partial void UpdateTicketAllocationStatus(TicketAllocationStatus instance);
    partial void DeleteTicketAllocationStatus(TicketAllocationStatus instance);
    partial void InsertTicketAllocationStatusHistory(TicketAllocationStatusHistory instance);
    partial void UpdateTicketAllocationStatusHistory(TicketAllocationStatusHistory instance);
    partial void DeleteTicketAllocationStatusHistory(TicketAllocationStatusHistory instance);
    partial void InsertTicketAllocatorRole(TicketAllocatorRole instance);
    partial void UpdateTicketAllocatorRole(TicketAllocatorRole instance);
    partial void DeleteTicketAllocatorRole(TicketAllocatorRole instance);
    partial void InsertTicketOwnerRole(TicketOwnerRole instance);
    partial void UpdateTicketOwnerRole(TicketOwnerRole instance);
    partial void DeleteTicketOwnerRole(TicketOwnerRole instance);
    partial void InsertTicketOwner(TicketOwner instance);
    partial void UpdateTicketOwner(TicketOwner instance);
    partial void DeleteTicketOwner(TicketOwner instance);
    partial void InsertTicketPatronageRole(TicketPatronageRole instance);
    partial void UpdateTicketPatronageRole(TicketPatronageRole instance);
    partial void DeleteTicketPatronageRole(TicketPatronageRole instance);
    partial void InsertTicketRequestorRole(TicketRequestorRole instance);
    partial void UpdateTicketRequestorRole(TicketRequestorRole instance);
    partial void DeleteTicketRequestorRole(TicketRequestorRole instance);
    partial void InsertTicketRequest(TicketRequest instance);
    partial void UpdateTicketRequest(TicketRequest instance);
    partial void DeleteTicketRequest(TicketRequest instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertTicketStatusUpdaterRole(TicketStatusUpdaterRole instance);
    partial void UpdateTicketStatusUpdaterRole(TicketStatusUpdaterRole instance);
    partial void DeleteTicketStatusUpdaterRole(TicketStatusUpdaterRole instance);
    partial void InsertToken(Token instance);
    partial void UpdateToken(Token instance);
    partial void DeleteToken(Token instance);
    partial void InsertTwoFactorAccountOwnerRole(TwoFactorAccountOwnerRole instance);
    partial void UpdateTwoFactorAccountOwnerRole(TwoFactorAccountOwnerRole instance);
    partial void DeleteTwoFactorAccountOwnerRole(TwoFactorAccountOwnerRole instance);
    partial void InsertTwoFactorAccountOwner(TwoFactorAccountOwner instance);
    partial void UpdateTwoFactorAccountOwner(TwoFactorAccountOwner instance);
    partial void DeleteTwoFactorAccountOwner(TwoFactorAccountOwner instance);
    partial void InsertTwoFactorAccount(TwoFactorAccount instance);
    partial void UpdateTwoFactorAccount(TwoFactorAccount instance);
    partial void DeleteTwoFactorAccount(TwoFactorAccount instance);
    partial void InsertUserAllocationStatus(UserAllocationStatus instance);
    partial void UpdateUserAllocationStatus(UserAllocationStatus instance);
    partial void DeleteUserAllocationStatus(UserAllocationStatus instance);
    partial void InsertUserAllocationStatusOwnerRole(UserAllocationStatusOwnerRole instance);
    partial void UpdateUserAllocationStatusOwnerRole(UserAllocationStatusOwnerRole instance);
    partial void DeleteUserAllocationStatusOwnerRole(UserAllocationStatusOwnerRole instance);
    partial void InsertUserEmailAddress(UserEmailAddress instance);
    partial void UpdateUserEmailAddress(UserEmailAddress instance);
    partial void DeleteUserEmailAddress(UserEmailAddress instance);
    partial void InsertUserRelationship(UserRelationship instance);
    partial void UpdateUserRelationship(UserRelationship instance);
    partial void DeleteUserRelationship(UserRelationship instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVenueOwnerRole(VenueOwnerRole instance);
    partial void UpdateVenueOwnerRole(VenueOwnerRole instance);
    partial void DeleteVenueOwnerRole(VenueOwnerRole instance);
    partial void InsertVenueOwner(VenueOwner instance);
    partial void UpdateVenueOwner(VenueOwner instance);
    partial void DeleteVenueOwner(VenueOwner instance);
    partial void InsertVenue(Venue instance);
    partial void UpdateVenue(Venue instance);
    partial void DeleteVenue(Venue instance);
    #endregion
		
		public Sponsorworks(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Sponsorworks(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Sponsorworks(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Sponsorworks(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountLockOutOwnerRole> AccountLockOutOwnerRoles
		{
			get
			{
				return this.GetTable<AccountLockOutOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<AccountLockOutOwner> AccountLockOutOwners
		{
			get
			{
				return this.GetTable<AccountLockOutOwner>();
			}
		}
		
		public System.Data.Linq.Table<AccountLockOut> AccountLockOuts
		{
			get
			{
				return this.GetTable<AccountLockOut>();
			}
		}
		
		public System.Data.Linq.Table<AccountOwnerRole> AccountOwnerRoles
		{
			get
			{
				return this.GetTable<AccountOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AccountToken> AccountTokens
		{
			get
			{
				return this.GetTable<AccountToken>();
			}
		}
		
		public System.Data.Linq.Table<AccountTwoFactorOwner> AccountTwoFactorOwners
		{
			get
			{
				return this.GetTable<AccountTwoFactorOwner>();
			}
		}
		
		public System.Data.Linq.Table<AllocationStatus> AllocationStatus
		{
			get
			{
				return this.GetTable<AllocationStatus>();
			}
		}
		
		public System.Data.Linq.Table<DivisionMemberRole> DivisionMemberRoles
		{
			get
			{
				return this.GetTable<DivisionMemberRole>();
			}
		}
		
		public System.Data.Linq.Table<DivisionMember> DivisionMembers
		{
			get
			{
				return this.GetTable<DivisionMember>();
			}
		}
		
		public System.Data.Linq.Table<DivisionOwnerRole> DivisionOwnerRoles
		{
			get
			{
				return this.GetTable<DivisionOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<Division> Divisions
		{
			get
			{
				return this.GetTable<Division>();
			}
		}
		
		public System.Data.Linq.Table<DomainImage> DomainImages
		{
			get
			{
				return this.GetTable<DomainImage>();
			}
		}
		
		public System.Data.Linq.Table<DomainOwnerRole> DomainOwnerRoles
		{
			get
			{
				return this.GetTable<DomainOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<DomainPalette> DomainPalettes
		{
			get
			{
				return this.GetTable<DomainPalette>();
			}
		}
		
		public System.Data.Linq.Table<Domain> Domains
		{
			get
			{
				return this.GetTable<Domain>();
			}
		}
		
		public System.Data.Linq.Table<DomainSecurity> DomainSecurities
		{
			get
			{
				return this.GetTable<DomainSecurity>();
			}
		}
		
		public System.Data.Linq.Table<EventAllocationStatus> EventAllocationStatus
		{
			get
			{
				return this.GetTable<EventAllocationStatus>();
			}
		}
		
		public System.Data.Linq.Table<EventField> EventFields
		{
			get
			{
				return this.GetTable<EventField>();
			}
		}
		
		public System.Data.Linq.Table<EventFieldValue> EventFieldValues
		{
			get
			{
				return this.GetTable<EventFieldValue>();
			}
		}
		
		public System.Data.Linq.Table<EventOwnerRole> EventOwnerRoles
		{
			get
			{
				return this.GetTable<EventOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventTicket> EventTickets
		{
			get
			{
				return this.GetTable<EventTicket>();
			}
		}
		
		public System.Data.Linq.Table<EventVenue> EventVenues
		{
			get
			{
				return this.GetTable<EventVenue>();
			}
		}
		
		public System.Data.Linq.Table<ExternalAccountOwnerRole> ExternalAccountOwnerRoles
		{
			get
			{
				return this.GetTable<ExternalAccountOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<ExternalAccountProviderOwnerRole> ExternalAccountProviderOwnerRoles
		{
			get
			{
				return this.GetTable<ExternalAccountProviderOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<ExternalAccountProviderOwner> ExternalAccountProviderOwners
		{
			get
			{
				return this.GetTable<ExternalAccountProviderOwner>();
			}
		}
		
		public System.Data.Linq.Table<ExternalAccountProvider> ExternalAccountProviders
		{
			get
			{
				return this.GetTable<ExternalAccountProvider>();
			}
		}
		
		public System.Data.Linq.Table<ExternalAccount> ExternalAccounts
		{
			get
			{
				return this.GetTable<ExternalAccount>();
			}
		}
		
		public System.Data.Linq.Table<FieldOwnerRole> FieldOwnerRoles
		{
			get
			{
				return this.GetTable<FieldOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<Field> Fields
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<FieldType> FieldTypes
		{
			get
			{
				return this.GetTable<FieldType>();
			}
		}
		
		public System.Data.Linq.Table<ImageType> ImageTypes
		{
			get
			{
				return this.GetTable<ImageType>();
			}
		}
		
		public System.Data.Linq.Table<OwnedRole> OwnedRoles
		{
			get
			{
				return this.GetTable<OwnedRole>();
			}
		}
		
		public System.Data.Linq.Table<PaletteType> PaletteTypes
		{
			get
			{
				return this.GetTable<PaletteType>();
			}
		}
		
		public System.Data.Linq.Table<ResourceOverride> ResourceOverrides
		{
			get
			{
				return this.GetTable<ResourceOverride>();
			}
		}
		
		public System.Data.Linq.Table<ResourceOverridesOwnerRole> ResourceOverridesOwnerRoles
		{
			get
			{
				return this.GetTable<ResourceOverridesOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<ResourceType> ResourceTypes
		{
			get
			{
				return this.GetTable<ResourceType>();
			}
		}
		
		public System.Data.Linq.Table<RoleMember> RoleMembers
		{
			get
			{
				return this.GetTable<RoleMember>();
			}
		}
		
		public System.Data.Linq.Table<RoleOwnerAllowedRole> RoleOwnerAllowedRoles
		{
			get
			{
				return this.GetTable<RoleOwnerAllowedRole>();
			}
		}
		
		public System.Data.Linq.Table<RoleOwnerRole> RoleOwnerRoles
		{
			get
			{
				return this.GetTable<RoleOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<RoleRelationship> RoleRelationships
		{
			get
			{
				return this.GetTable<RoleRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Id_Role> Id_Roles
		{
			get
			{
				return this.GetTable<Id_Role>();
			}
		}
		
		public System.Data.Linq.Table<TicketAllocationRole> TicketAllocationRoles
		{
			get
			{
				return this.GetTable<TicketAllocationRole>();
			}
		}
		
		public System.Data.Linq.Table<TicketAllocation> TicketAllocations
		{
			get
			{
				return this.GetTable<TicketAllocation>();
			}
		}
		
		public System.Data.Linq.Table<TicketAllocationStatus> TicketAllocationStatus
		{
			get
			{
				return this.GetTable<TicketAllocationStatus>();
			}
		}
		
		public System.Data.Linq.Table<TicketAllocationStatusHistory> TicketAllocationStatusHistories
		{
			get
			{
				return this.GetTable<TicketAllocationStatusHistory>();
			}
		}
		
		public System.Data.Linq.Table<TicketAllocatorRole> TicketAllocatorRoles
		{
			get
			{
				return this.GetTable<TicketAllocatorRole>();
			}
		}
		
		public System.Data.Linq.Table<TicketOwnerRole> TicketOwnerRoles
		{
			get
			{
				return this.GetTable<TicketOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<TicketOwner> TicketOwners
		{
			get
			{
				return this.GetTable<TicketOwner>();
			}
		}
		
		public System.Data.Linq.Table<TicketPatronageRole> TicketPatronageRoles
		{
			get
			{
				return this.GetTable<TicketPatronageRole>();
			}
		}
		
		public System.Data.Linq.Table<TicketRequestorRole> TicketRequestorRoles
		{
			get
			{
				return this.GetTable<TicketRequestorRole>();
			}
		}
		
		public System.Data.Linq.Table<TicketRequest> TicketRequests
		{
			get
			{
				return this.GetTable<TicketRequest>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<TicketStatusUpdaterRole> TicketStatusUpdaterRoles
		{
			get
			{
				return this.GetTable<TicketStatusUpdaterRole>();
			}
		}
		
		public System.Data.Linq.Table<Token> Tokens
		{
			get
			{
				return this.GetTable<Token>();
			}
		}
		
		public System.Data.Linq.Table<TwoFactorAccountOwnerRole> TwoFactorAccountOwnerRoles
		{
			get
			{
				return this.GetTable<TwoFactorAccountOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<TwoFactorAccountOwner> TwoFactorAccountOwners
		{
			get
			{
				return this.GetTable<TwoFactorAccountOwner>();
			}
		}
		
		public System.Data.Linq.Table<TwoFactorAccount> TwoFactorAccounts
		{
			get
			{
				return this.GetTable<TwoFactorAccount>();
			}
		}
		
		public System.Data.Linq.Table<UserAllocationStatus> UserAllocationStatus
		{
			get
			{
				return this.GetTable<UserAllocationStatus>();
			}
		}
		
		public System.Data.Linq.Table<UserAllocationStatusOwnerRole> UserAllocationStatusOwnerRoles
		{
			get
			{
				return this.GetTable<UserAllocationStatusOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<UserEmailAddress> UserEmailAddresses
		{
			get
			{
				return this.GetTable<UserEmailAddress>();
			}
		}
		
		public System.Data.Linq.Table<UserRelationship> UserRelationships
		{
			get
			{
				return this.GetTable<UserRelationship>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Id_User> Id_Users
		{
			get
			{
				return this.GetTable<Id_User>();
			}
		}
		
		public System.Data.Linq.Table<VenueOwnerRole> VenueOwnerRoles
		{
			get
			{
				return this.GetTable<VenueOwnerRole>();
			}
		}
		
		public System.Data.Linq.Table<VenueOwner> VenueOwners
		{
			get
			{
				return this.GetTable<VenueOwner>();
			}
		}
		
		public System.Data.Linq.Table<Venue> Venues
		{
			get
			{
				return this.GetTable<Venue>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountLockOutOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class AccountLockOutOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _OwnerRoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<AccountLockOutOwner> _AccountLockOutOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    #endregion
		
		public AccountLockOutOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwnerRoles_AccountLockOutOwnerRoles", Storage="_Role", ThisKey="OwnerRoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.AccountLockOutOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.AccountLockOutOwnerRole = this;
						this._OwnerRoleId = value.Id;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwners_AccountLockOutOwnerRoles", Storage="_AccountLockOutOwners", ThisKey="OwnerRoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<AccountLockOutOwner> AccountLockOutOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountLockOutOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountLockOutOwners;
			}
			set
			{
				this._AccountLockOutOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountLockOutOwners(AccountLockOutOwner entity)
		{
			this.SendPropertyChanging();
			entity.AccountLockOutOwnerRole = this;
		}
		
		private void detach_AccountLockOutOwners(AccountLockOutOwner entity)
		{
			this.SendPropertyChanging();
			entity.AccountLockOutOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._AccountLockOutOwners = new EntitySet<AccountLockOutOwner>(new Action<AccountLockOutOwner>(this.attach_AccountLockOutOwners), new Action<AccountLockOutOwner>(this.detach_AccountLockOutOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountLockOutOwners")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class AccountLockOutOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private byte _SubjectRoleId;
		
		private byte _MaxFailedCount;
		
		private System.TimeSpan _LockOutPeriod;
		
		private EntityRef<AccountLockOutOwnerRole> _AccountLockOutOwnerRole;
		
		private EntityRef<AccountOwnerRole> _AccountOwnerRole;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntitySet<AccountLockOut> _AccountLockOuts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnSubjectRoleIdChanging(byte value);
    partial void OnSubjectRoleIdChanged();
    partial void OnMaxFailedCountChanging(byte value);
    partial void OnMaxFailedCountChanged();
    partial void OnLockOutPeriodChanging(System.TimeSpan value);
    partial void OnLockOutPeriodChanged();
    #endregion
		
		public AccountLockOutOwner()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._AccountLockOutOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte SubjectRoleId
		{
			get
			{
				return this._SubjectRoleId;
			}
			set
			{
				if ((this._SubjectRoleId != value))
				{
					if (this._AccountOwnerRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectRoleIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectRoleId = value;
					this.SendPropertyChanged("SubjectRoleId");
					this.OnSubjectRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxFailedCount", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public byte MaxFailedCount
		{
			get
			{
				return this._MaxFailedCount;
			}
			set
			{
				if ((this._MaxFailedCount != value))
				{
					this.OnMaxFailedCountChanging(value);
					this.SendPropertyChanging();
					this._MaxFailedCount = value;
					this.SendPropertyChanged("MaxFailedCount");
					this.OnMaxFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutPeriod", DbType="Time(7) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.TimeSpan LockOutPeriod
		{
			get
			{
				return this._LockOutPeriod;
			}
			set
			{
				if ((this._LockOutPeriod != value))
				{
					this.OnLockOutPeriodChanging(value);
					this.SendPropertyChanging();
					this._LockOutPeriod = value;
					this.SendPropertyChanged("LockOutPeriod");
					this.OnLockOutPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwners_AccountLockOutOwnerRoles", Storage="_AccountLockOutOwnerRole", ThisKey="OwnerRoleId", OtherKey="OwnerRoleId", IsForeignKey=true)]
		public AccountLockOutOwnerRole AccountLockOutOwnerRole
		{
			get
			{
				return this._AccountLockOutOwnerRole.Entity;
			}
			set
			{
				AccountLockOutOwnerRole previousValue = this._AccountLockOutOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._AccountLockOutOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountLockOutOwnerRole.Entity = null;
						previousValue.AccountLockOutOwners.Remove(this);
					}
					this._AccountLockOutOwnerRole.Entity = value;
					if ((value != null))
					{
						value.AccountLockOutOwners.Add(this);
						this._OwnerRoleId = value.OwnerRoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("AccountLockOutOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwners_AccountOwnerRoles", Storage="_AccountOwnerRole", ThisKey="SubjectRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public AccountOwnerRole AccountOwnerRole
		{
			get
			{
				return this._AccountOwnerRole.Entity;
			}
			set
			{
				AccountOwnerRole previousValue = this._AccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._AccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountOwnerRole.Entity = null;
						previousValue.AccountLockOutOwners.Remove(this);
					}
					this._AccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.AccountLockOutOwners.Add(this);
						this._SubjectRoleId = value.RoleId;
					}
					else
					{
						this._SubjectRoleId = default(byte);
					}
					this.SendPropertyChanged("AccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwners_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.AccountLockOutOwners.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.AccountLockOutOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOuts_AccountLockOutOwners", Storage="_AccountLockOuts", ThisKey="OwnerRoleId,OwnerUserId,SubjectRoleId", OtherKey="LockOutOwnerRoleId,LockOutOwnerUserId,OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<AccountLockOut> AccountLockOuts
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountLockOuts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountLockOuts;
			}
			set
			{
				this._AccountLockOuts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountLockOuts(AccountLockOut entity)
		{
			this.SendPropertyChanging();
			entity.AccountLockOutOwner = this;
		}
		
		private void detach_AccountLockOuts(AccountLockOut entity)
		{
			this.SendPropertyChanging();
			entity.AccountLockOutOwner = null;
		}
		
		private void Initialize()
		{
			this._AccountLockOutOwnerRole = default(EntityRef<AccountLockOutOwnerRole>);
			this._AccountOwnerRole = default(EntityRef<AccountOwnerRole>);
			this._RoleMember = default(EntityRef<RoleMember>);
			this._AccountLockOuts = new EntitySet<AccountLockOut>(new Action<AccountLockOut>(this.attach_AccountLockOuts), new Action<AccountLockOut>(this.detach_AccountLockOuts));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountLockOuts")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class AccountLockOut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private byte _LockOutOwnerRoleId;
		
		private System.Guid _LockOutOwnerUserId;
		
		private byte _FailedAccessCount;
		
		private System.Nullable<System.DateTime> _UnlockDate;
		
		private EntityRef<AccountLockOutOwner> _AccountLockOutOwner;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnLockOutOwnerRoleIdChanging(byte value);
    partial void OnLockOutOwnerRoleIdChanged();
    partial void OnLockOutOwnerUserIdChanging(System.Guid value);
    partial void OnLockOutOwnerUserIdChanged();
    partial void OnFailedAccessCountChanging(byte value);
    partial void OnFailedAccessCountChanged();
    partial void OnUnlockDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUnlockDateChanged();
    #endregion
		
		public AccountLockOut()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._AccountLockOutOwner.HasLoadedOrAssignedValue || this._Account.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutOwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte LockOutOwnerRoleId
		{
			get
			{
				return this._LockOutOwnerRoleId;
			}
			set
			{
				if ((this._LockOutOwnerRoleId != value))
				{
					if (this._AccountLockOutOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLockOutOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._LockOutOwnerRoleId = value;
					this.SendPropertyChanged("LockOutOwnerRoleId");
					this.OnLockOutOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutOwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid LockOutOwnerUserId
		{
			get
			{
				return this._LockOutOwnerUserId;
			}
			set
			{
				if ((this._LockOutOwnerUserId != value))
				{
					if (this._AccountLockOutOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLockOutOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._LockOutOwnerUserId = value;
					this.SendPropertyChanged("LockOutOwnerUserId");
					this.OnLockOutOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedAccessCount", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte FailedAccessCount
		{
			get
			{
				return this._FailedAccessCount;
			}
			set
			{
				if ((this._FailedAccessCount != value))
				{
					this.OnFailedAccessCountChanging(value);
					this.SendPropertyChanging();
					this._FailedAccessCount = value;
					this.SendPropertyChanged("FailedAccessCount");
					this.OnFailedAccessCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnlockDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> UnlockDate
		{
			get
			{
				return this._UnlockDate;
			}
			set
			{
				if ((this._UnlockDate != value))
				{
					this.OnUnlockDateChanging(value);
					this.SendPropertyChanging();
					this._UnlockDate = value;
					this.SendPropertyChanged("UnlockDate");
					this.OnUnlockDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOuts_AccountLockOutOwners", Storage="_AccountLockOutOwner", ThisKey="LockOutOwnerRoleId,LockOutOwnerUserId,OwnerRoleId", OtherKey="OwnerRoleId,OwnerUserId,SubjectRoleId", IsForeignKey=true)]
		public AccountLockOutOwner AccountLockOutOwner
		{
			get
			{
				return this._AccountLockOutOwner.Entity;
			}
			set
			{
				AccountLockOutOwner previousValue = this._AccountLockOutOwner.Entity;
				if (((previousValue != value) 
							|| (this._AccountLockOutOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountLockOutOwner.Entity = null;
						previousValue.AccountLockOuts.Remove(this);
					}
					this._AccountLockOutOwner.Entity = value;
					if ((value != null))
					{
						value.AccountLockOuts.Add(this);
						this._LockOutOwnerRoleId = value.OwnerRoleId;
						this._LockOutOwnerUserId = value.OwnerUserId;
						this._OwnerRoleId = value.SubjectRoleId;
					}
					else
					{
						this._LockOutOwnerRoleId = default(byte);
						this._LockOutOwnerUserId = default(System.Guid);
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("AccountLockOutOwner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOuts_Accounts", Storage="_Account", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountLockOuts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountLockOuts.Add(this);
						this._OwnerRoleId = value.OwnerRoleId;
						this._OwnerUserId = value.OwnerUserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._AccountLockOutOwner = default(EntityRef<AccountLockOutOwner>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class AccountOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<AccountLockOutOwner> _AccountLockOutOwners;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<TwoFactorAccountOwner> _TwoFactorAccountOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AccountOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Account_AccountRoles", Storage="_Accounts", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<Account> Accounts
		{
			get
			{
				if ((this.serializing 
							&& (this._Accounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwners_AccountOwnerRoles", Storage="_AccountLockOutOwners", ThisKey="RoleId", OtherKey="SubjectRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<AccountLockOutOwner> AccountLockOutOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountLockOutOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountLockOutOwners;
			}
			set
			{
				this._AccountLockOutOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.AccountOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.AccountOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccountOwners_AccountOwnerRoles", Storage="_TwoFactorAccountOwners", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<TwoFactorAccountOwner> TwoFactorAccountOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._TwoFactorAccountOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TwoFactorAccountOwners;
			}
			set
			{
				this._TwoFactorAccountOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountOwnerRole = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountOwnerRole = null;
		}
		
		private void attach_AccountLockOutOwners(AccountLockOutOwner entity)
		{
			this.SendPropertyChanging();
			entity.AccountOwnerRole = this;
		}
		
		private void detach_AccountLockOutOwners(AccountLockOutOwner entity)
		{
			this.SendPropertyChanging();
			entity.AccountOwnerRole = null;
		}
		
		private void attach_TwoFactorAccountOwners(TwoFactorAccountOwner entity)
		{
			this.SendPropertyChanging();
			entity.AccountOwnerRole = this;
		}
		
		private void detach_TwoFactorAccountOwners(TwoFactorAccountOwner entity)
		{
			this.SendPropertyChanging();
			entity.AccountOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._AccountLockOutOwners = new EntitySet<AccountLockOutOwner>(new Action<AccountLockOutOwner>(this.attach_AccountLockOutOwners), new Action<AccountLockOutOwner>(this.detach_AccountLockOutOwners));
			this._Role = default(EntityRef<Role>);
			this._TwoFactorAccountOwners = new EntitySet<TwoFactorAccountOwner>(new Action<TwoFactorAccountOwner>(this.attach_TwoFactorAccountOwners), new Action<TwoFactorAccountOwner>(this.detach_TwoFactorAccountOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EmailAddress;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private string _PasswordHash;
		
		private bool _EmailVerified;
		
		private string _SecurityStamp;
		
		private bool _Active;
		
		private EntityRef<AccountOwnerRole> _AccountOwnerRole;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntitySet<AccountLockOut> _AccountLockOuts;
		
		private EntitySet<TwoFactorAccount> _TwoFactorAccounts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnEmailVerifiedChanging(bool value);
    partial void OnEmailVerifiedChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Account()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._AccountOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailVerified", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool EmailVerified
		{
			get
			{
				return this._EmailVerified;
			}
			set
			{
				if ((this._EmailVerified != value))
				{
					this.OnEmailVerifiedChanging(value);
					this.SendPropertyChanging();
					this._EmailVerified = value;
					this.SendPropertyChanged("EmailVerified");
					this.OnEmailVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Account_AccountRoles", Storage="_AccountOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public AccountOwnerRole AccountOwnerRole
		{
			get
			{
				return this._AccountOwnerRole.Entity;
			}
			set
			{
				AccountOwnerRole previousValue = this._AccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._AccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountOwnerRole.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("AccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Account_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.Account = null;
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.Account = this;
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOuts_Accounts", Storage="_AccountLockOuts", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<AccountLockOut> AccountLockOuts
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountLockOuts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountLockOuts;
			}
			set
			{
				this._AccountLockOuts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccounts_Accounts", Storage="_TwoFactorAccounts", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<TwoFactorAccount> TwoFactorAccounts
		{
			get
			{
				if ((this.serializing 
							&& (this._TwoFactorAccounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TwoFactorAccounts;
			}
			set
			{
				this._TwoFactorAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountLockOuts(AccountLockOut entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountLockOuts(AccountLockOut entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_TwoFactorAccounts(TwoFactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_TwoFactorAccounts(TwoFactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void Initialize()
		{
			this._AccountOwnerRole = default(EntityRef<AccountOwnerRole>);
			this._RoleMember = default(EntityRef<RoleMember>);
			this._AccountLockOuts = new EntitySet<AccountLockOut>(new Action<AccountLockOut>(this.attach_AccountLockOuts), new Action<AccountLockOut>(this.detach_AccountLockOuts));
			this._TwoFactorAccounts = new EntitySet<TwoFactorAccount>(new Action<TwoFactorAccount>(this.attach_TwoFactorAccounts), new Action<TwoFactorAccount>(this.detach_TwoFactorAccounts));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTokens")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class AccountToken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _AccountOwnerRoleId;
		
		private System.Guid _AccountOwnerUserId;
		
		private byte _TokenId;
		
		private System.Guid _Token;
		
		private System.DateTime _IssueDate;
		
		private EntityRef<Token> _AccountTokens_Token;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountOwnerRoleIdChanging(byte value);
    partial void OnAccountOwnerRoleIdChanged();
    partial void OnAccountOwnerUserIdChanging(System.Guid value);
    partial void OnAccountOwnerUserIdChanged();
    partial void OnTokenIdChanging(byte value);
    partial void OnTokenIdChanged();
    partial void OnTokenChanging(System.Guid value);
    partial void OnTokenChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    #endregion
		
		public AccountToken()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountOwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte AccountOwnerRoleId
		{
			get
			{
				return this._AccountOwnerRoleId;
			}
			set
			{
				if ((this._AccountOwnerRoleId != value))
				{
					this.OnAccountOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._AccountOwnerRoleId = value;
					this.SendPropertyChanged("AccountOwnerRoleId");
					this.OnAccountOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountOwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid AccountOwnerUserId
		{
			get
			{
				return this._AccountOwnerUserId;
			}
			set
			{
				if ((this._AccountOwnerUserId != value))
				{
					this.OnAccountOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._AccountOwnerUserId = value;
					this.SendPropertyChanged("AccountOwnerUserId");
					this.OnAccountOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte TokenId
		{
			get
			{
				return this._TokenId;
			}
			set
			{
				if ((this._TokenId != value))
				{
					if (this._AccountTokens_Token.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTokenIdChanging(value);
					this.SendPropertyChanging();
					this._TokenId = value;
					this.SendPropertyChanged("TokenId");
					this.OnTokenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTokens_Tokens", Storage="_AccountTokens_Token", ThisKey="TokenId", OtherKey="Id", IsForeignKey=true)]
		public Token AccountTokens_Token
		{
			get
			{
				return this._AccountTokens_Token.Entity;
			}
			set
			{
				Token previousValue = this._AccountTokens_Token.Entity;
				if (((previousValue != value) 
							|| (this._AccountTokens_Token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountTokens_Token.Entity = null;
						previousValue.AccountTokens.Remove(this);
					}
					this._AccountTokens_Token.Entity = value;
					if ((value != null))
					{
						value.AccountTokens.Add(this);
						this._TokenId = value.Id;
					}
					else
					{
						this._TokenId = default(byte);
					}
					this.SendPropertyChanged("AccountTokens_Token");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._AccountTokens_Token = default(EntityRef<Token>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTwoFactorOwners")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class AccountTwoFactorOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private byte _TargetRoleId;
		
		private EntityRef<TwoFactorAccountOwnerRole> _TwoFactorAccountOwnerRole;
		
		private EntityRef<RoleMember> _RoleMember;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnTargetRoleIdChanging(byte value);
    partial void OnTargetRoleIdChanged();
    #endregion
		
		public AccountTwoFactorOwner()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._TwoFactorAccountOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte TargetRoleId
		{
			get
			{
				return this._TargetRoleId;
			}
			set
			{
				if ((this._TargetRoleId != value))
				{
					this.OnTargetRoleIdChanging(value);
					this.SendPropertyChanging();
					this._TargetRoleId = value;
					this.SendPropertyChanged("TargetRoleId");
					this.OnTargetRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTwoFactorOwners_AccountTwoFactorOwnerRoles", Storage="_TwoFactorAccountOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TwoFactorAccountOwnerRole TwoFactorAccountOwnerRole
		{
			get
			{
				return this._TwoFactorAccountOwnerRole.Entity;
			}
			set
			{
				TwoFactorAccountOwnerRole previousValue = this._TwoFactorAccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._TwoFactorAccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TwoFactorAccountOwnerRole.Entity = null;
						previousValue.AccountTwoFactorOwners.Remove(this);
					}
					this._TwoFactorAccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.AccountTwoFactorOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("TwoFactorAccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTwoFactorOwners_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.AccountTwoFactorOwners.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.AccountTwoFactorOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._TwoFactorAccountOwnerRole = default(EntityRef<TwoFactorAccountOwnerRole>);
			this._RoleMember = default(EntityRef<RoleMember>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllocationStatus")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class AllocationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AllocationStatus()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DivisionMemberRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DivisionMemberRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public DivisionMemberRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DivisionMemberRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.DivisionMemberRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.DivisionMemberRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DivisionMembers")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DivisionMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DivisionId;
		
		private byte _MemberRoleId;
		
		private System.Guid _MemberUserId;
		
		private byte _DivisionOwnerRoleId;
		
		private System.Guid _DivisionOwnnerUserId;
		
		private EntityRef<UserRelationship> _UserRelationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDivisionIdChanging(int value);
    partial void OnDivisionIdChanged();
    partial void OnMemberRoleIdChanging(byte value);
    partial void OnMemberRoleIdChanged();
    partial void OnMemberUserIdChanging(System.Guid value);
    partial void OnMemberUserIdChanged();
    partial void OnDivisionOwnerRoleIdChanging(byte value);
    partial void OnDivisionOwnerRoleIdChanged();
    partial void OnDivisionOwnnerUserIdChanging(System.Guid value);
    partial void OnDivisionOwnnerUserIdChanged();
    #endregion
		
		public DivisionMember()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int DivisionId
		{
			get
			{
				return this._DivisionId;
			}
			set
			{
				if ((this._DivisionId != value))
				{
					this.OnDivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionId = value;
					this.SendPropertyChanged("DivisionId");
					this.OnDivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte MemberRoleId
		{
			get
			{
				return this._MemberRoleId;
			}
			set
			{
				if ((this._MemberRoleId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberRoleIdChanging(value);
					this.SendPropertyChanging();
					this._MemberRoleId = value;
					this.SendPropertyChanged("MemberRoleId");
					this.OnMemberRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid MemberUserId
		{
			get
			{
				return this._MemberUserId;
			}
			set
			{
				if ((this._MemberUserId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberUserIdChanging(value);
					this.SendPropertyChanging();
					this._MemberUserId = value;
					this.SendPropertyChanged("MemberUserId");
					this.OnMemberUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionOwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte DivisionOwnerRoleId
		{
			get
			{
				return this._DivisionOwnerRoleId;
			}
			set
			{
				if ((this._DivisionOwnerRoleId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionOwnerRoleId = value;
					this.SendPropertyChanged("DivisionOwnerRoleId");
					this.OnDivisionOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionOwnnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Guid DivisionOwnnerUserId
		{
			get
			{
				return this._DivisionOwnnerUserId;
			}
			set
			{
				if ((this._DivisionOwnnerUserId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionOwnnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionOwnnerUserId = value;
					this.SendPropertyChanged("DivisionOwnnerUserId");
					this.OnDivisionOwnnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DivisionMembers_MemberRelationships", Storage="_UserRelationship", ThisKey="DivisionOwnerRoleId,DivisionOwnnerUserId,MemberRoleId,MemberUserId", OtherKey="RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey=true)]
		public UserRelationship UserRelationship
		{
			get
			{
				return this._UserRelationship.Entity;
			}
			set
			{
				UserRelationship previousValue = this._UserRelationship.Entity;
				if (((previousValue != value) 
							|| (this._UserRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRelationship.Entity = null;
						previousValue.DivisionMembers.Remove(this);
					}
					this._UserRelationship.Entity = value;
					if ((value != null))
					{
						value.DivisionMembers.Add(this);
						this._DivisionOwnerRoleId = value.RoleId;
						this._DivisionOwnnerUserId = value.UserId;
						this._MemberRoleId = value.PartnerRoleId;
						this._MemberUserId = value.PartnerUserId;
					}
					else
					{
						this._DivisionOwnerRoleId = default(byte);
						this._DivisionOwnnerUserId = default(System.Guid);
						this._MemberRoleId = default(byte);
						this._MemberUserId = default(System.Guid);
					}
					this.SendPropertyChanged("UserRelationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._UserRelationship = default(EntityRef<UserRelationship>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DivisionOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DivisionOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<Division> _Divisions;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public DivisionOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DivisionOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.DivisionOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.DivisionOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Divisions_DivisionOwnerRoles", Storage="_Divisions", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<Division> Divisions
		{
			get
			{
				if ((this.serializing 
							&& (this._Divisions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Divisions;
			}
			set
			{
				this._Divisions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.DivisionOwnerRole = this;
		}
		
		private void detach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.DivisionOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._Divisions = new EntitySet<Division>(new Action<Division>(this.attach_Divisions), new Action<Division>(this.detach_Divisions));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Divisions")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private EntityRef<DivisionOwnerRole> _DivisionOwnerRole;
		
		private EntityRef<RoleMember> _RoleMember;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public Division()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._DivisionOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Divisions_DivisionOwnerRoles", Storage="_DivisionOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public DivisionOwnerRole DivisionOwnerRole
		{
			get
			{
				return this._DivisionOwnerRole.Entity;
			}
			set
			{
				DivisionOwnerRole previousValue = this._DivisionOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._DivisionOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DivisionOwnerRole.Entity = null;
						previousValue.Divisions.Remove(this);
					}
					this._DivisionOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Divisions.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("DivisionOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Divisions_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.Divisions.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.Divisions.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._DivisionOwnerRole = default(EntityRef<DivisionOwnerRole>);
			this._RoleMember = default(EntityRef<RoleMember>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DomainImages")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DomainImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DomainId;
		
		private string _ImageType;
		
		private string _ImageUrl;
		
		private string _AltText;
		
		private EntityRef<ImageType> _ImageTypeImageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainIdChanging(int value);
    partial void OnDomainIdChanged();
    partial void OnImageTypeChanging(string value);
    partial void OnImageTypeChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnAltTextChanging(string value);
    partial void OnAltTextChanged();
    #endregion
		
		public DomainImage()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int DomainId
		{
			get
			{
				return this._DomainId;
			}
			set
			{
				if ((this._DomainId != value))
				{
					this.OnDomainIdChanging(value);
					this.SendPropertyChanging();
					this._DomainId = value;
					this.SendPropertyChanged("DomainId");
					this.OnDomainIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageType", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string ImageType
		{
			get
			{
				return this._ImageType;
			}
			set
			{
				if ((this._ImageType != value))
				{
					if (this._ImageTypeImageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageTypeChanging(value);
					this.SendPropertyChanging();
					this._ImageType = value;
					this.SendPropertyChanged("ImageType");
					this.OnImageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrl", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AltText", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string AltText
		{
			get
			{
				return this._AltText;
			}
			set
			{
				if ((this._AltText != value))
				{
					this.OnAltTextChanging(value);
					this.SendPropertyChanging();
					this._AltText = value;
					this.SendPropertyChanged("AltText");
					this.OnAltTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DomainImages_ImageTypes", Storage="_ImageTypeImageType", ThisKey="ImageType", OtherKey="Type", IsForeignKey=true)]
		public ImageType ImageTypeImageType
		{
			get
			{
				return this._ImageTypeImageType.Entity;
			}
			set
			{
				ImageType previousValue = this._ImageTypeImageType.Entity;
				if (((previousValue != value) 
							|| (this._ImageTypeImageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImageTypeImageType.Entity = null;
						previousValue.DomainImages.Remove(this);
					}
					this._ImageTypeImageType.Entity = value;
					if ((value != null))
					{
						value.DomainImages.Add(this);
						this._ImageType = value.Type;
					}
					else
					{
						this._ImageType = default(string);
					}
					this.SendPropertyChanged("ImageTypeImageType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ImageTypeImageType = default(EntityRef<ImageType>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DomainOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DomainOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<Domain> _Domains;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public DomainOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DomainOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.DomainOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.DomainOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Domains_DomainOwnerRoles", Storage="_Domains", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<Domain> Domains
		{
			get
			{
				if ((this.serializing 
							&& (this._Domains.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Domains;
			}
			set
			{
				this._Domains.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Domains(Domain entity)
		{
			this.SendPropertyChanging();
			entity.DomainOwnerRole = this;
		}
		
		private void detach_Domains(Domain entity)
		{
			this.SendPropertyChanging();
			entity.DomainOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._Domains = new EntitySet<Domain>(new Action<Domain>(this.attach_Domains), new Action<Domain>(this.detach_Domains));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DomainPalettes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DomainPalette : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DomainId;
		
		private string _PaletteType;
		
		private string _ColourCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainIdChanging(int value);
    partial void OnDomainIdChanged();
    partial void OnPaletteTypeChanging(string value);
    partial void OnPaletteTypeChanged();
    partial void OnColourCodeChanging(string value);
    partial void OnColourCodeChanged();
    #endregion
		
		public DomainPalette()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int DomainId
		{
			get
			{
				return this._DomainId;
			}
			set
			{
				if ((this._DomainId != value))
				{
					this.OnDomainIdChanging(value);
					this.SendPropertyChanging();
					this._DomainId = value;
					this.SendPropertyChanged("DomainId");
					this.OnDomainIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaletteType", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string PaletteType
		{
			get
			{
				return this._PaletteType;
			}
			set
			{
				if ((this._PaletteType != value))
				{
					this.OnPaletteTypeChanging(value);
					this.SendPropertyChanging();
					this._PaletteType = value;
					this.SendPropertyChanged("PaletteType");
					this.OnPaletteTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColourCode", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string ColourCode
		{
			get
			{
				return this._ColourCode;
			}
			set
			{
				if ((this._ColourCode != value))
				{
					this.OnColourCodeChanging(value);
					this.SendPropertyChanging();
					this._ColourCode = value;
					this.SendPropertyChanged("ColourCode");
					this.OnColourCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Domains")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Domain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Domain1;
		
		private string _Subdomain;
		
		private string _TopLevelDomain;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private EntityRef<DomainOwnerRole> _DomainOwnerRole;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntityRef<DomainSecurity> _DomainSecurity;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDomain1Changing(string value);
    partial void OnDomain1Changed();
    partial void OnSubdomainChanging(string value);
    partial void OnSubdomainChanged();
    partial void OnTopLevelDomainChanging(string value);
    partial void OnTopLevelDomainChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public Domain()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Domain", Storage="_Domain1", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Domain1
		{
			get
			{
				return this._Domain1;
			}
			set
			{
				if ((this._Domain1 != value))
				{
					this.OnDomain1Changing(value);
					this.SendPropertyChanging();
					this._Domain1 = value;
					this.SendPropertyChanged("Domain1");
					this.OnDomain1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subdomain", DbType="NVarChar(256)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Subdomain
		{
			get
			{
				return this._Subdomain;
			}
			set
			{
				if ((this._Subdomain != value))
				{
					this.OnSubdomainChanging(value);
					this.SendPropertyChanging();
					this._Subdomain = value;
					this.SendPropertyChanged("Subdomain");
					this.OnSubdomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopLevelDomain", DbType="NVarChar(256)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string TopLevelDomain
		{
			get
			{
				return this._TopLevelDomain;
			}
			set
			{
				if ((this._TopLevelDomain != value))
				{
					this.OnTopLevelDomainChanging(value);
					this.SendPropertyChanging();
					this._TopLevelDomain = value;
					this.SendPropertyChanged("TopLevelDomain");
					this.OnTopLevelDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._DomainOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Domains_DomainOwnerRoles", Storage="_DomainOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public DomainOwnerRole DomainOwnerRole
		{
			get
			{
				return this._DomainOwnerRole.Entity;
			}
			set
			{
				DomainOwnerRole previousValue = this._DomainOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._DomainOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DomainOwnerRole.Entity = null;
						previousValue.Domains.Remove(this);
					}
					this._DomainOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Domains.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("DomainOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Domains_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.Domains.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.Domains.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DomainSettings_Domains", Storage="_DomainSecurity", ThisKey="Id", OtherKey="DomainId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public DomainSecurity DomainSecurity
		{
			get
			{
				if ((this.serializing 
							&& (this._DomainSecurity.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._DomainSecurity.Entity;
			}
			set
			{
				DomainSecurity previousValue = this._DomainSecurity.Entity;
				if (((previousValue != value) 
							|| (this._DomainSecurity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DomainSecurity.Entity = null;
						previousValue.Domain = null;
					}
					this._DomainSecurity.Entity = value;
					if ((value != null))
					{
						value.Domain = this;
					}
					this.SendPropertyChanged("DomainSecurity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._DomainOwnerRole = default(EntityRef<DomainOwnerRole>);
			this._RoleMember = default(EntityRef<RoleMember>);
			this._DomainSecurity = default(EntityRef<DomainSecurity>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DomainSecurity")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class DomainSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DomainId;
		
		private string _CookieName;
		
		private int _AbsoluteExpirationInHours;
		
		private int _SlidingExpirationInMinutes;
		
		private bool _AllowPerpetualLogin;
		
		private EntityRef<Domain> _Domain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainIdChanging(int value);
    partial void OnDomainIdChanged();
    partial void OnCookieNameChanging(string value);
    partial void OnCookieNameChanged();
    partial void OnAbsoluteExpirationInHoursChanging(int value);
    partial void OnAbsoluteExpirationInHoursChanged();
    partial void OnSlidingExpirationInMinutesChanging(int value);
    partial void OnSlidingExpirationInMinutesChanged();
    partial void OnAllowPerpetualLoginChanging(bool value);
    partial void OnAllowPerpetualLoginChanged();
    #endregion
		
		public DomainSecurity()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int DomainId
		{
			get
			{
				return this._DomainId;
			}
			set
			{
				if ((this._DomainId != value))
				{
					if (this._Domain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainIdChanging(value);
					this.SendPropertyChanging();
					this._DomainId = value;
					this.SendPropertyChanged("DomainId");
					this.OnDomainIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CookieName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string CookieName
		{
			get
			{
				return this._CookieName;
			}
			set
			{
				if ((this._CookieName != value))
				{
					this.OnCookieNameChanging(value);
					this.SendPropertyChanging();
					this._CookieName = value;
					this.SendPropertyChanged("CookieName");
					this.OnCookieNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsoluteExpirationInHours", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int AbsoluteExpirationInHours
		{
			get
			{
				return this._AbsoluteExpirationInHours;
			}
			set
			{
				if ((this._AbsoluteExpirationInHours != value))
				{
					this.OnAbsoluteExpirationInHoursChanging(value);
					this.SendPropertyChanging();
					this._AbsoluteExpirationInHours = value;
					this.SendPropertyChanged("AbsoluteExpirationInHours");
					this.OnAbsoluteExpirationInHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlidingExpirationInMinutes", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int SlidingExpirationInMinutes
		{
			get
			{
				return this._SlidingExpirationInMinutes;
			}
			set
			{
				if ((this._SlidingExpirationInMinutes != value))
				{
					this.OnSlidingExpirationInMinutesChanging(value);
					this.SendPropertyChanging();
					this._SlidingExpirationInMinutes = value;
					this.SendPropertyChanged("SlidingExpirationInMinutes");
					this.OnSlidingExpirationInMinutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowPerpetualLogin", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool AllowPerpetualLogin
		{
			get
			{
				return this._AllowPerpetualLogin;
			}
			set
			{
				if ((this._AllowPerpetualLogin != value))
				{
					this.OnAllowPerpetualLoginChanging(value);
					this.SendPropertyChanging();
					this._AllowPerpetualLogin = value;
					this.SendPropertyChanged("AllowPerpetualLogin");
					this.OnAllowPerpetualLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DomainSettings_Domains", Storage="_Domain", ThisKey="DomainId", OtherKey="Id", IsForeignKey=true)]
		public Domain Domain
		{
			get
			{
				return this._Domain.Entity;
			}
			set
			{
				Domain previousValue = this._Domain.Entity;
				if (((previousValue != value) 
							|| (this._Domain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain.Entity = null;
						previousValue.DomainSecurity = null;
					}
					this._Domain.Entity = value;
					if ((value != null))
					{
						value.DomainSecurity = this;
						this._DomainId = value.Id;
					}
					else
					{
						this._DomainId = default(int);
					}
					this.SendPropertyChanged("Domain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Domain = default(EntityRef<Domain>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventAllocationStatus")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class EventAllocationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private int _AllocationStatusId;
		
		private byte _EventOwnerRoleId;
		
		private System.Guid _EventOwnerUserId;
		
		private EntityRef<UserAllocationStatus> _UserAllocationStatus;
		
		private EntitySet<TicketAllocationStatus> _TicketAllocationStatus;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnAllocationStatusIdChanging(int value);
    partial void OnAllocationStatusIdChanged();
    partial void OnEventOwnerRoleIdChanging(byte value);
    partial void OnEventOwnerRoleIdChanged();
    partial void OnEventOwnerUserIdChanging(System.Guid value);
    partial void OnEventOwnerUserIdChanged();
    #endregion
		
		public EventAllocationStatus()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocationStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int AllocationStatusId
		{
			get
			{
				return this._AllocationStatusId;
			}
			set
			{
				if ((this._AllocationStatusId != value))
				{
					if (this._UserAllocationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllocationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AllocationStatusId = value;
					this.SendPropertyChanged("AllocationStatusId");
					this.OnAllocationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte EventOwnerRoleId
		{
			get
			{
				return this._EventOwnerRoleId;
			}
			set
			{
				if ((this._EventOwnerRoleId != value))
				{
					if (this._UserAllocationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerRoleId = value;
					this.SendPropertyChanged("EventOwnerRoleId");
					this.OnEventOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid EventOwnerUserId
		{
			get
			{
				return this._EventOwnerUserId;
			}
			set
			{
				if ((this._EventOwnerUserId != value))
				{
					if (this._UserAllocationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerUserId = value;
					this.SendPropertyChanged("EventOwnerUserId");
					this.OnEventOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventAllocationStatus_UserAllocationStatus", Storage="_UserAllocationStatus", ThisKey="EventOwnerRoleId,EventOwnerUserId,AllocationStatusId", OtherKey="OwnerRoleId,OwnerUserId,AllocationStatusId", IsForeignKey=true)]
		public UserAllocationStatus UserAllocationStatus
		{
			get
			{
				return this._UserAllocationStatus.Entity;
			}
			set
			{
				UserAllocationStatus previousValue = this._UserAllocationStatus.Entity;
				if (((previousValue != value) 
							|| (this._UserAllocationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAllocationStatus.Entity = null;
						previousValue.EventAllocationStatus.Remove(this);
					}
					this._UserAllocationStatus.Entity = value;
					if ((value != null))
					{
						value.EventAllocationStatus.Add(this);
						this._EventOwnerRoleId = value.OwnerRoleId;
						this._EventOwnerUserId = value.OwnerUserId;
						this._AllocationStatusId = value.AllocationStatusId;
					}
					else
					{
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
						this._AllocationStatusId = default(int);
					}
					this.SendPropertyChanged("UserAllocationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationStatus_EventAllocationStatus", Storage="_TicketAllocationStatus", ThisKey="EventId,AllocationStatusId,EventOwnerRoleId,EventOwnerUserId", OtherKey="EventId,AllocationStatusId,EventOwnerRoleId,EventOwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<TicketAllocationStatus> TicketAllocationStatus
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocationStatus.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocationStatus;
			}
			set
			{
				this._TicketAllocationStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocationStatus(TicketAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.EventAllocationStatus = this;
		}
		
		private void detach_TicketAllocationStatus(TicketAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.EventAllocationStatus = null;
		}
		
		private void Initialize()
		{
			this._UserAllocationStatus = default(EntityRef<UserAllocationStatus>);
			this._TicketAllocationStatus = new EntitySet<TicketAllocationStatus>(new Action<TicketAllocationStatus>(this.attach_TicketAllocationStatus), new Action<TicketAllocationStatus>(this.detach_TicketAllocationStatus));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventFields")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class EventField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private string _FieldType;
		
		private EntityRef<Field> _Field;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnFieldTypeChanging(string value);
    partial void OnFieldTypeChanged();
    #endregion
		
		public EventField()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventFields_Fields", Storage="_Field", ThisKey="FieldType,OwnerRoleId,OwnerUserId", OtherKey="FieldType,OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.EventFields.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.EventFields.Add(this);
						this._FieldType = value.FieldType;
						this._OwnerRoleId = value.OwnerRoleId;
						this._OwnerUserId = value.OwnerUserId;
					}
					else
					{
						this._FieldType = default(string);
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Field = default(EntityRef<Field>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventFieldValues")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class EventFieldValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private byte _EventOwnerRoleId;
		
		private System.Guid _EventOwnerUserId;
		
		private string _FieldType;
		
		private byte _SubmittingRoleId;
		
		private System.Guid _SubmittingUserId;
		
		private System.Data.Linq.Binary _Value;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<UserRelationship> _UserRelationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventOwnerRoleIdChanging(byte value);
    partial void OnEventOwnerRoleIdChanged();
    partial void OnEventOwnerUserIdChanging(System.Guid value);
    partial void OnEventOwnerUserIdChanged();
    partial void OnFieldTypeChanging(string value);
    partial void OnFieldTypeChanged();
    partial void OnSubmittingRoleIdChanging(byte value);
    partial void OnSubmittingRoleIdChanged();
    partial void OnSubmittingUserIdChanging(System.Guid value);
    partial void OnSubmittingUserIdChanged();
    partial void OnValueChanging(System.Data.Linq.Binary value);
    partial void OnValueChanged();
    #endregion
		
		public EventFieldValue()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte EventOwnerRoleId
		{
			get
			{
				return this._EventOwnerRoleId;
			}
			set
			{
				if ((this._EventOwnerRoleId != value))
				{
					if ((this._Field.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerRoleId = value;
					this.SendPropertyChanged("EventOwnerRoleId");
					this.OnEventOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid EventOwnerUserId
		{
			get
			{
				return this._EventOwnerUserId;
			}
			set
			{
				if ((this._EventOwnerUserId != value))
				{
					if ((this._Field.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerUserId = value;
					this.SendPropertyChanged("EventOwnerUserId");
					this.OnEventOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittingRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte SubmittingRoleId
		{
			get
			{
				return this._SubmittingRoleId;
			}
			set
			{
				if ((this._SubmittingRoleId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmittingRoleIdChanging(value);
					this.SendPropertyChanging();
					this._SubmittingRoleId = value;
					this.SendPropertyChanged("SubmittingRoleId");
					this.OnSubmittingRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittingUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Guid SubmittingUserId
		{
			get
			{
				return this._SubmittingUserId;
			}
			set
			{
				if ((this._SubmittingUserId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmittingUserIdChanging(value);
					this.SendPropertyChanging();
					this._SubmittingUserId = value;
					this.SendPropertyChanged("SubmittingUserId");
					this.OnSubmittingUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventFieldValues_Fields", Storage="_Field", ThisKey="FieldType,EventOwnerRoleId,EventOwnerUserId", OtherKey="FieldType,OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.EventFieldValues.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.EventFieldValues.Add(this);
						this._FieldType = value.FieldType;
						this._EventOwnerRoleId = value.OwnerRoleId;
						this._EventOwnerUserId = value.OwnerUserId;
					}
					else
					{
						this._FieldType = default(string);
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventFieldValues_UserRelationships", Storage="_UserRelationship", ThisKey="EventOwnerRoleId,EventOwnerUserId,SubmittingRoleId,SubmittingUserId", OtherKey="RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey=true)]
		public UserRelationship UserRelationship
		{
			get
			{
				return this._UserRelationship.Entity;
			}
			set
			{
				UserRelationship previousValue = this._UserRelationship.Entity;
				if (((previousValue != value) 
							|| (this._UserRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRelationship.Entity = null;
						previousValue.EventFieldValues.Remove(this);
					}
					this._UserRelationship.Entity = value;
					if ((value != null))
					{
						value.EventFieldValues.Add(this);
						this._EventOwnerRoleId = value.RoleId;
						this._EventOwnerUserId = value.UserId;
						this._SubmittingRoleId = value.PartnerRoleId;
						this._SubmittingUserId = value.PartnerUserId;
					}
					else
					{
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
						this._SubmittingRoleId = default(byte);
						this._SubmittingUserId = default(System.Guid);
					}
					this.SendPropertyChanged("UserRelationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Field = default(EntityRef<Field>);
			this._UserRelationship = default(EntityRef<UserRelationship>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class EventOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<Event> _Events;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public EventOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.EventOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.EventOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Events_EventOwnerRoles", Storage="_Events", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<Event> Events
		{
			get
			{
				if ((this.serializing 
							&& (this._Events.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventOwnerRole = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private System.Nullable<int> _ParentId;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntityRef<EventOwnerRole> _EventOwnerRole;
		
		private EntityRef<Event> _Parent;
		
		private EntitySet<Event> _Events_ParentEvents;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public Event()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._EventOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Events_EventOwnerRoles", Storage="_EventOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public EventOwnerRole EventOwnerRole
		{
			get
			{
				return this._EventOwnerRole.Entity;
			}
			set
			{
				EventOwnerRole previousValue = this._EventOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._EventOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventOwnerRole.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("EventOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Events_ParentEvents", Storage="_Parent", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Event Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Event previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Events_ParentEvents.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Events_ParentEvents.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Events_ParentEvents", Storage="_Events_ParentEvents", ThisKey="Id", OtherKey="ParentId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Event> Events_ParentEvents
		{
			get
			{
				if ((this.serializing 
							&& (this._Events_ParentEvents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Events_ParentEvents;
			}
			set
			{
				this._Events_ParentEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Events_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events_ParentEvents(Event entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Events_ParentEvents(Event entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void Initialize()
		{
			this._EventOwnerRole = default(EntityRef<EventOwnerRole>);
			this._Parent = default(EntityRef<Event>);
			this._Events_ParentEvents = new EntitySet<Event>(new Action<Event>(this.attach_Events_ParentEvents), new Action<Event>(this.detach_Events_ParentEvents));
			this._RoleMember = default(EntityRef<RoleMember>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTickets")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class EventTicket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private byte _EventOwnerRoleId;
		
		private System.Guid _EventOwnerUserId;
		
		private int _TicketId;
		
		private int _Allocation;
		
		private EntityRef<TicketOwner> _TicketOwner;
		
		private EntitySet<TicketAllocationStatus> _TicketAllocationStatus;
		
		private EntitySet<TicketRequest> _TicketRequests;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventOwnerRoleIdChanging(byte value);
    partial void OnEventOwnerRoleIdChanged();
    partial void OnEventOwnerUserIdChanging(System.Guid value);
    partial void OnEventOwnerUserIdChanged();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnAllocationChanging(int value);
    partial void OnAllocationChanged();
    #endregion
		
		public EventTicket()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte EventOwnerRoleId
		{
			get
			{
				return this._EventOwnerRoleId;
			}
			set
			{
				if ((this._EventOwnerRoleId != value))
				{
					if (this._TicketOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerRoleId = value;
					this.SendPropertyChanged("EventOwnerRoleId");
					this.OnEventOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid EventOwnerUserId
		{
			get
			{
				return this._EventOwnerUserId;
			}
			set
			{
				if ((this._EventOwnerUserId != value))
				{
					if (this._TicketOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerUserId = value;
					this.SendPropertyChanged("EventOwnerUserId");
					this.OnEventOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._TicketOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allocation", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public int Allocation
		{
			get
			{
				return this._Allocation;
			}
			set
			{
				if ((this._Allocation != value))
				{
					this.OnAllocationChanging(value);
					this.SendPropertyChanging();
					this._Allocation = value;
					this.SendPropertyChanged("Allocation");
					this.OnAllocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventTickets_TicketOwners", Storage="_TicketOwner", ThisKey="TicketId,EventOwnerRoleId,EventOwnerUserId", OtherKey="TicketId,OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public TicketOwner TicketOwner
		{
			get
			{
				return this._TicketOwner.Entity;
			}
			set
			{
				TicketOwner previousValue = this._TicketOwner.Entity;
				if (((previousValue != value) 
							|| (this._TicketOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketOwner.Entity = null;
						previousValue.EventTickets.Remove(this);
					}
					this._TicketOwner.Entity = value;
					if ((value != null))
					{
						value.EventTickets.Add(this);
						this._TicketId = value.TicketId;
						this._EventOwnerRoleId = value.OwnerRoleId;
						this._EventOwnerUserId = value.OwnerUserId;
					}
					else
					{
						this._TicketId = default(int);
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("TicketOwner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationStatus_EventTickets", Storage="_TicketAllocationStatus", ThisKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", OtherKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<TicketAllocationStatus> TicketAllocationStatus
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocationStatus.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocationStatus;
			}
			set
			{
				this._TicketAllocationStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequests_EventTickets", Storage="_TicketRequests", ThisKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", OtherKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<TicketRequest> TicketRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketRequests;
			}
			set
			{
				this._TicketRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocationStatus(TicketAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.EventTicket = this;
		}
		
		private void detach_TicketAllocationStatus(TicketAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.EventTicket = null;
		}
		
		private void attach_TicketRequests(TicketRequest entity)
		{
			this.SendPropertyChanging();
			entity.EventTicket = this;
		}
		
		private void detach_TicketRequests(TicketRequest entity)
		{
			this.SendPropertyChanging();
			entity.EventTicket = null;
		}
		
		private void Initialize()
		{
			this._TicketOwner = default(EntityRef<TicketOwner>);
			this._TicketAllocationStatus = new EntitySet<TicketAllocationStatus>(new Action<TicketAllocationStatus>(this.attach_TicketAllocationStatus), new Action<TicketAllocationStatus>(this.detach_TicketAllocationStatus));
			this._TicketRequests = new EntitySet<TicketRequest>(new Action<TicketRequest>(this.attach_TicketRequests), new Action<TicketRequest>(this.detach_TicketRequests));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventVenues")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class EventVenue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private int _VenueId;
		
		private EntityRef<VenueOwner> _VenueOwner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnVenueIdChanging(int value);
    partial void OnVenueIdChanged();
    #endregion
		
		public EventVenue()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if (this._VenueOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._VenueOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int VenueId
		{
			get
			{
				return this._VenueId;
			}
			set
			{
				if ((this._VenueId != value))
				{
					if (this._VenueOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIdChanging(value);
					this.SendPropertyChanging();
					this._VenueId = value;
					this.SendPropertyChanged("VenueId");
					this.OnVenueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventVenues_VenueOwners", Storage="_VenueOwner", ThisKey="VenueId,OwnerRoleId,OwnerUserId", OtherKey="VenueId,OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public VenueOwner VenueOwner
		{
			get
			{
				return this._VenueOwner.Entity;
			}
			set
			{
				VenueOwner previousValue = this._VenueOwner.Entity;
				if (((previousValue != value) 
							|| (this._VenueOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VenueOwner.Entity = null;
						previousValue.EventVenues.Remove(this);
					}
					this._VenueOwner.Entity = value;
					if ((value != null))
					{
						value.EventVenues.Add(this);
						this._VenueId = value.VenueId;
						this._OwnerRoleId = value.OwnerRoleId;
						this._OwnerUserId = value.OwnerUserId;
					}
					else
					{
						this._VenueId = default(int);
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("VenueOwner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._VenueOwner = default(EntityRef<VenueOwner>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalAccountOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ExternalAccountOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private bool _Active;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<ExternalAccount> _ExternalAccounts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ExternalAccountOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.ExternalAccountOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.ExternalAccountOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccounts_ExternalAccountOwnerRoles", Storage="_ExternalAccounts", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<ExternalAccount> ExternalAccounts
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExternalAccounts;
			}
			set
			{
				this._ExternalAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExternalAccounts(ExternalAccount entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountOwnerRole = this;
		}
		
		private void detach_ExternalAccounts(ExternalAccount entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._ExternalAccounts = new EntitySet<ExternalAccount>(new Action<ExternalAccount>(this.attach_ExternalAccounts), new Action<ExternalAccount>(this.detach_ExternalAccounts));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalAccountProviderOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ExternalAccountProviderOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private bool _Active;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<ExternalAccountProviderOwner> _ExternalAccountProviderOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ExternalAccountProviderOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.ExternalAccountProviderOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.ExternalAccountProviderOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwners_ExternalAccountProviderOwnerRoles", Storage="_ExternalAccountProviderOwners", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<ExternalAccountProviderOwner> ExternalAccountProviderOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccountProviderOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExternalAccountProviderOwners;
			}
			set
			{
				this._ExternalAccountProviderOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExternalAccountProviderOwners(ExternalAccountProviderOwner entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountProviderOwnerRole = this;
		}
		
		private void detach_ExternalAccountProviderOwners(ExternalAccountProviderOwner entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountProviderOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._ExternalAccountProviderOwners = new EntitySet<ExternalAccountProviderOwner>(new Action<ExternalAccountProviderOwner>(this.attach_ExternalAccountProviderOwners), new Action<ExternalAccountProviderOwner>(this.detach_ExternalAccountProviderOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalAccountProviderOwners")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ExternalAccountProviderOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountProviderName;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private bool _Active;
		
		private EntityRef<ExternalAccountProviderOwnerRole> _ExternalAccountProviderOwnerRole;
		
		private EntityRef<ExternalAccountProvider> _ExternalAccountProvider;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntitySet<ExternalAccount> _ExternalAccounts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountProviderNameChanging(string value);
    partial void OnAccountProviderNameChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ExternalAccountProviderOwner()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountProviderName", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string AccountProviderName
		{
			get
			{
				return this._AccountProviderName;
			}
			set
			{
				if ((this._AccountProviderName != value))
				{
					if (this._ExternalAccountProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountProviderNameChanging(value);
					this.SendPropertyChanging();
					this._AccountProviderName = value;
					this.SendPropertyChanged("AccountProviderName");
					this.OnAccountProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._ExternalAccountProviderOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwners_ExternalAccountProviderOwnerRoles", Storage="_ExternalAccountProviderOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public ExternalAccountProviderOwnerRole ExternalAccountProviderOwnerRole
		{
			get
			{
				return this._ExternalAccountProviderOwnerRole.Entity;
			}
			set
			{
				ExternalAccountProviderOwnerRole previousValue = this._ExternalAccountProviderOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._ExternalAccountProviderOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExternalAccountProviderOwnerRole.Entity = null;
						previousValue.ExternalAccountProviderOwners.Remove(this);
					}
					this._ExternalAccountProviderOwnerRole.Entity = value;
					if ((value != null))
					{
						value.ExternalAccountProviderOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("ExternalAccountProviderOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwners_ExternalAccountProviders", Storage="_ExternalAccountProvider", ThisKey="AccountProviderName", OtherKey="Name", IsForeignKey=true)]
		public ExternalAccountProvider ExternalAccountProvider
		{
			get
			{
				return this._ExternalAccountProvider.Entity;
			}
			set
			{
				ExternalAccountProvider previousValue = this._ExternalAccountProvider.Entity;
				if (((previousValue != value) 
							|| (this._ExternalAccountProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExternalAccountProvider.Entity = null;
						previousValue.ExternalAccountProviderOwners.Remove(this);
					}
					this._ExternalAccountProvider.Entity = value;
					if ((value != null))
					{
						value.ExternalAccountProviderOwners.Add(this);
						this._AccountProviderName = value.Name;
					}
					else
					{
						this._AccountProviderName = default(string);
					}
					this.SendPropertyChanged("ExternalAccountProvider");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwners_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.ExternalAccountProviderOwners.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.ExternalAccountProviderOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccounts_ExternalAccountProviderOwners", Storage="_ExternalAccounts", ThisKey="AccountProviderName,OwnerRoleId,OwnerUserId", OtherKey="ProviderName,ProviderOwnerRoleId,ProviderOwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<ExternalAccount> ExternalAccounts
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExternalAccounts;
			}
			set
			{
				this._ExternalAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExternalAccounts(ExternalAccount entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountProviderOwner = this;
		}
		
		private void detach_ExternalAccounts(ExternalAccount entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountProviderOwner = null;
		}
		
		private void Initialize()
		{
			this._ExternalAccountProviderOwnerRole = default(EntityRef<ExternalAccountProviderOwnerRole>);
			this._ExternalAccountProvider = default(EntityRef<ExternalAccountProvider>);
			this._RoleMember = default(EntityRef<RoleMember>);
			this._ExternalAccounts = new EntitySet<ExternalAccount>(new Action<ExternalAccount>(this.attach_ExternalAccounts), new Action<ExternalAccount>(this.detach_ExternalAccounts));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalAccountProviders")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ExternalAccountProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Description;
		
		private bool _Active;
		
		private EntitySet<ExternalAccountProviderOwner> _ExternalAccountProviderOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ExternalAccountProvider()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwners_ExternalAccountProviders", Storage="_ExternalAccountProviderOwners", ThisKey="Name", OtherKey="AccountProviderName", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<ExternalAccountProviderOwner> ExternalAccountProviderOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccountProviderOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExternalAccountProviderOwners;
			}
			set
			{
				this._ExternalAccountProviderOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExternalAccountProviderOwners(ExternalAccountProviderOwner entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountProvider = this;
		}
		
		private void detach_ExternalAccountProviderOwners(ExternalAccountProviderOwner entity)
		{
			this.SendPropertyChanging();
			entity.ExternalAccountProvider = null;
		}
		
		private void Initialize()
		{
			this._ExternalAccountProviderOwners = new EntitySet<ExternalAccountProviderOwner>(new Action<ExternalAccountProviderOwner>(this.attach_ExternalAccountProviderOwners), new Action<ExternalAccountProviderOwner>(this.detach_ExternalAccountProviderOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalAccounts")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ExternalAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _ProviderName;
		
		private byte _ProviderOwnerRoleId;
		
		private System.Guid _ProviderOwnerUserId;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private string _ProviderKey;
		
		private bool _Active;
		
		private EntityRef<ExternalAccountOwnerRole> _ExternalAccountOwnerRole;
		
		private EntityRef<ExternalAccountProviderOwner> _ExternalAccountProviderOwner;
		
		private EntityRef<UserRelationship> _UserRelationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnProviderNameChanging(string value);
    partial void OnProviderNameChanged();
    partial void OnProviderOwnerRoleIdChanging(byte value);
    partial void OnProviderOwnerRoleIdChanged();
    partial void OnProviderOwnerUserIdChanging(System.Guid value);
    partial void OnProviderOwnerUserIdChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ExternalAccount()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string ProviderName
		{
			get
			{
				return this._ProviderName;
			}
			set
			{
				if ((this._ProviderName != value))
				{
					if (this._ExternalAccountProviderOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderNameChanging(value);
					this.SendPropertyChanging();
					this._ProviderName = value;
					this.SendPropertyChanged("ProviderName");
					this.OnProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderOwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte ProviderOwnerRoleId
		{
			get
			{
				return this._ProviderOwnerRoleId;
			}
			set
			{
				if ((this._ProviderOwnerRoleId != value))
				{
					if ((this._ExternalAccountProviderOwner.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderOwnerRoleId = value;
					this.SendPropertyChanged("ProviderOwnerRoleId");
					this.OnProviderOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderOwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid ProviderOwnerUserId
		{
			get
			{
				return this._ProviderOwnerUserId;
			}
			set
			{
				if ((this._ProviderOwnerUserId != value))
				{
					if ((this._ExternalAccountProviderOwner.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._ProviderOwnerUserId = value;
					this.SendPropertyChanged("ProviderOwnerUserId");
					this.OnProviderOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._ExternalAccountOwnerRole.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccounts_ExternalAccountOwnerRoles", Storage="_ExternalAccountOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public ExternalAccountOwnerRole ExternalAccountOwnerRole
		{
			get
			{
				return this._ExternalAccountOwnerRole.Entity;
			}
			set
			{
				ExternalAccountOwnerRole previousValue = this._ExternalAccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._ExternalAccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExternalAccountOwnerRole.Entity = null;
						previousValue.ExternalAccounts.Remove(this);
					}
					this._ExternalAccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.ExternalAccounts.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("ExternalAccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccounts_ExternalAccountProviderOwners", Storage="_ExternalAccountProviderOwner", ThisKey="ProviderName,ProviderOwnerRoleId,ProviderOwnerUserId", OtherKey="AccountProviderName,OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public ExternalAccountProviderOwner ExternalAccountProviderOwner
		{
			get
			{
				return this._ExternalAccountProviderOwner.Entity;
			}
			set
			{
				ExternalAccountProviderOwner previousValue = this._ExternalAccountProviderOwner.Entity;
				if (((previousValue != value) 
							|| (this._ExternalAccountProviderOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExternalAccountProviderOwner.Entity = null;
						previousValue.ExternalAccounts.Remove(this);
					}
					this._ExternalAccountProviderOwner.Entity = value;
					if ((value != null))
					{
						value.ExternalAccounts.Add(this);
						this._ProviderName = value.AccountProviderName;
						this._ProviderOwnerRoleId = value.OwnerRoleId;
						this._ProviderOwnerUserId = value.OwnerUserId;
					}
					else
					{
						this._ProviderName = default(string);
						this._ProviderOwnerRoleId = default(byte);
						this._ProviderOwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("ExternalAccountProviderOwner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccounts_UserRelationships", Storage="_UserRelationship", ThisKey="ProviderOwnerRoleId,ProviderOwnerUserId,OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey=true)]
		public UserRelationship UserRelationship
		{
			get
			{
				return this._UserRelationship.Entity;
			}
			set
			{
				UserRelationship previousValue = this._UserRelationship.Entity;
				if (((previousValue != value) 
							|| (this._UserRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRelationship.Entity = null;
						previousValue.ExternalAccounts.Remove(this);
					}
					this._UserRelationship.Entity = value;
					if ((value != null))
					{
						value.ExternalAccounts.Add(this);
						this._ProviderOwnerRoleId = value.RoleId;
						this._ProviderOwnerUserId = value.UserId;
						this._OwnerRoleId = value.PartnerRoleId;
						this._OwnerUserId = value.PartnerUserId;
					}
					else
					{
						this._ProviderOwnerRoleId = default(byte);
						this._ProviderOwnerUserId = default(System.Guid);
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("UserRelationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ExternalAccountOwnerRole = default(EntityRef<ExternalAccountOwnerRole>);
			this._ExternalAccountProviderOwner = default(EntityRef<ExternalAccountProviderOwner>);
			this._UserRelationship = default(EntityRef<UserRelationship>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class FieldOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public FieldOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FieldOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.FieldOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.FieldOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fields")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FieldType;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private EntitySet<EventField> _EventFields;
		
		private EntitySet<EventFieldValue> _EventFieldValues;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldTypeChanging(string value);
    partial void OnFieldTypeChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public Field()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventFields_Fields", Storage="_EventFields", ThisKey="FieldType,OwnerRoleId,OwnerUserId", OtherKey="FieldType,OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<EventField> EventFields
		{
			get
			{
				if ((this.serializing 
							&& (this._EventFields.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EventFields;
			}
			set
			{
				this._EventFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventFieldValues_Fields", Storage="_EventFieldValues", ThisKey="FieldType,OwnerRoleId,OwnerUserId", OtherKey="FieldType,EventOwnerRoleId,EventOwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<EventFieldValue> EventFieldValues
		{
			get
			{
				if ((this.serializing 
							&& (this._EventFieldValues.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EventFieldValues;
			}
			set
			{
				this._EventFieldValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventFields(EventField entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_EventFields(EventField entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_EventFieldValues(EventFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_EventFieldValues(EventFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void Initialize()
		{
			this._EventFields = new EntitySet<EventField>(new Action<EventField>(this.attach_EventFields), new Action<EventField>(this.detach_EventFields));
			this._EventFieldValues = new EntitySet<EventFieldValue>(new Action<EventFieldValue>(this.attach_EventFieldValues), new Action<EventFieldValue>(this.detach_EventFieldValues));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldTypes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class FieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Type;
		
		private string _DisplayName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public FieldType()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageTypes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ImageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Type;
		
		private string _DisplayName;
		
		private EntitySet<DomainImage> _DomainImages;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public ImageType()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DomainImages_ImageTypes", Storage="_DomainImages", ThisKey="Type", OtherKey="ImageType", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<DomainImage> DomainImages
		{
			get
			{
				if ((this.serializing 
							&& (this._DomainImages.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DomainImages;
			}
			set
			{
				this._DomainImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DomainImages(DomainImage entity)
		{
			this.SendPropertyChanging();
			entity.ImageTypeImageType = this;
		}
		
		private void detach_DomainImages(DomainImage entity)
		{
			this.SendPropertyChanging();
			entity.ImageTypeImageType = null;
		}
		
		private void Initialize()
		{
			this._DomainImages = new EntitySet<DomainImage>(new Action<DomainImage>(this.attach_DomainImages), new Action<DomainImage>(this.detach_DomainImages));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnedRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class OwnedRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntityRef<RoleOwnerRole> _RoleOwnerRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public OwnedRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._RoleMember.HasLoadedOrAssignedValue || this._RoleOwnerRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OwnedRoles_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.OwnedRoles.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.OwnedRoles.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OwnedRoles_RoleOwnerRoles", Storage="_RoleOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public RoleOwnerRole RoleOwnerRole
		{
			get
			{
				return this._RoleOwnerRole.Entity;
			}
			set
			{
				RoleOwnerRole previousValue = this._RoleOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._RoleOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleOwnerRole.Entity = null;
						previousValue.OwnedRoles.Remove(this);
					}
					this._RoleOwnerRole.Entity = value;
					if ((value != null))
					{
						value.OwnedRoles.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("RoleOwnerRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._RoleMember = default(EntityRef<RoleMember>);
			this._RoleOwnerRole = default(EntityRef<RoleOwnerRole>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaletteTypes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class PaletteType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public PaletteType()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceOverrides")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ResourceOverride : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceId;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private string _Value;
		
		private EntityRef<ResourceOverridesOwnerRole> _ResourceOverridesOwnerRole;
		
		private EntityRef<RoleMember> _RoleMember;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(int value);
    partial void OnResourceIdChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ResourceOverride()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._ResourceOverridesOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ResourceOverrides_ResourceOverridesOwnerRoles", Storage="_ResourceOverridesOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public ResourceOverridesOwnerRole ResourceOverridesOwnerRole
		{
			get
			{
				return this._ResourceOverridesOwnerRole.Entity;
			}
			set
			{
				ResourceOverridesOwnerRole previousValue = this._ResourceOverridesOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._ResourceOverridesOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceOverridesOwnerRole.Entity = null;
						previousValue.ResourceOverrides.Remove(this);
					}
					this._ResourceOverridesOwnerRole.Entity = value;
					if ((value != null))
					{
						value.ResourceOverrides.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("ResourceOverridesOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ResourceOverrides_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.ResourceOverrides.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.ResourceOverrides.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._ResourceOverridesOwnerRole = default(EntityRef<ResourceOverridesOwnerRole>);
			this._RoleMember = default(EntityRef<RoleMember>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceOverridesOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ResourceOverridesOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntitySet<ResourceOverride> _ResourceOverrides;
		
		private EntityRef<Role> _Role;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public ResourceOverridesOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ResourceOverrides_ResourceOverridesOwnerRoles", Storage="_ResourceOverrides", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<ResourceOverride> ResourceOverrides
		{
			get
			{
				if ((this.serializing 
							&& (this._ResourceOverrides.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ResourceOverrides;
			}
			set
			{
				this._ResourceOverrides.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ResourceOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.ResourceOverridesOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.ResourceOverridesOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceOverrides(ResourceOverride entity)
		{
			this.SendPropertyChanging();
			entity.ResourceOverridesOwnerRole = this;
		}
		
		private void detach_ResourceOverrides(ResourceOverride entity)
		{
			this.SendPropertyChanging();
			entity.ResourceOverridesOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._ResourceOverrides = new EntitySet<ResourceOverride>(new Action<ResourceOverride>(this.attach_ResourceOverrides), new Action<ResourceOverride>(this.detach_ResourceOverrides));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resources")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private byte _ResourceTypeId;
		
		private string _Name;
		
		private string _DisplayName;
		
		private string _DefaultValue;
		
		private EntityRef<Resource> _Resources_Resource;
		
		private EntityRef<Resource> _Resources_Resource1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnResourceTypeIdChanging(byte value);
    partial void OnResourceTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    #endregion
		
		public Resource()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Resources_Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceTypeId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte ResourceTypeId
		{
			get
			{
				return this._ResourceTypeId;
			}
			set
			{
				if ((this._ResourceTypeId != value))
				{
					this.OnResourceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceTypeId = value;
					this.SendPropertyChanged("ResourceTypeId");
					this.OnResourceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Resources_Resources", Storage="_Resources_Resource", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Resource Resources_Resource
		{
			get
			{
				return this._Resources_Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resources_Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resources_Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resources_Resource.Entity = null;
						previousValue.Resources_Resource1 = null;
					}
					this._Resources_Resource.Entity = value;
					if ((value != null))
					{
						value.Resources_Resource1 = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Resources_Resource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Resources_Resources", Storage="_Resources_Resource1", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public Resource Resources_Resource1
		{
			get
			{
				if ((this.serializing 
							&& (this._Resources_Resource1.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._Resources_Resource1.Entity;
			}
			set
			{
				Resource previousValue = this._Resources_Resource1.Entity;
				if (((previousValue != value) 
							|| (this._Resources_Resource1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resources_Resource1.Entity = null;
						previousValue.Resources_Resource = null;
					}
					this._Resources_Resource1.Entity = value;
					if ((value != null))
					{
						value.Resources_Resource = this;
					}
					this.SendPropertyChanged("Resources_Resource1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Resources_Resource = default(EntityRef<Resource>);
			this._Resources_Resource1 = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceTypes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ResourceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Id;
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(byte value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ResourceType()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleMembers")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class RoleMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private System.Guid _UserId;
		
		private bool _Active;
		
		private EntityRef<Account> _Account;
		
		private EntitySet<AccountLockOutOwner> _AccountLockOutOwners;
		
		private EntitySet<AccountTwoFactorOwner> _AccountTwoFactorOwners;
		
		private EntitySet<Division> _Divisions;
		
		private EntitySet<Domain> _Domains;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<ExternalAccountProviderOwner> _ExternalAccountProviderOwners;
		
		private EntitySet<OwnedRole> _OwnedRoles;
		
		private EntitySet<ResourceOverride> _ResourceOverrides;
		
		private EntitySet<TicketOwner> _TicketOwners;
		
		private EntitySet<TwoFactorAccountOwner> _TwoFactorAccountOwners;
		
		private EntitySet<UserAllocationStatus> _UserAllocationStatus;
		
		private EntitySet<UserEmailAddress> _UserEmailAddresses;
		
		private EntitySet<UserRelationship> _UserRelationships;
		
		private EntitySet<UserRelationship> _UserRelationships_RoleMembers;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
		private EntitySet<VenueOwner> _VenueOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public RoleMember()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Account_RoleMembers", Storage="_Account", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public Account Account
		{
			get
			{
				if ((this.serializing 
							&& (this._Account.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.RoleMember = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.RoleMember = this;
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwners_RoleMembers", Storage="_AccountLockOutOwners", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<AccountLockOutOwner> AccountLockOutOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountLockOutOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountLockOutOwners;
			}
			set
			{
				this._AccountLockOutOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTwoFactorOwners_RoleMembers", Storage="_AccountTwoFactorOwners", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<AccountTwoFactorOwner> AccountTwoFactorOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountTwoFactorOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountTwoFactorOwners;
			}
			set
			{
				this._AccountTwoFactorOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Divisions_RoleMembers", Storage="_Divisions", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<Division> Divisions
		{
			get
			{
				if ((this.serializing 
							&& (this._Divisions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Divisions;
			}
			set
			{
				this._Divisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Domains_RoleMembers", Storage="_Domains", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Domain> Domains
		{
			get
			{
				if ((this.serializing 
							&& (this._Domains.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Domains;
			}
			set
			{
				this._Domains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Events_RoleMembers", Storage="_Events", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<Event> Events
		{
			get
			{
				if ((this.serializing 
							&& (this._Events.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwners_RoleMembers", Storage="_ExternalAccountProviderOwners", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<ExternalAccountProviderOwner> ExternalAccountProviderOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccountProviderOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExternalAccountProviderOwners;
			}
			set
			{
				this._ExternalAccountProviderOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OwnedRoles_RoleMembers", Storage="_OwnedRoles", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<OwnedRole> OwnedRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._OwnedRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._OwnedRoles;
			}
			set
			{
				this._OwnedRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ResourceOverrides_RoleMembers", Storage="_ResourceOverrides", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<ResourceOverride> ResourceOverrides
		{
			get
			{
				if ((this.serializing 
							&& (this._ResourceOverrides.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ResourceOverrides;
			}
			set
			{
				this._ResourceOverrides.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketOwners_RoleMembers", Storage="_TicketOwners", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EntitySet<TicketOwner> TicketOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketOwners;
			}
			set
			{
				this._TicketOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccountOwners_RoleMembers", Storage="_TwoFactorAccountOwners", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14, EmitDefaultValue=false)]
		public EntitySet<TwoFactorAccountOwner> TwoFactorAccountOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._TwoFactorAccountOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TwoFactorAccountOwners;
			}
			set
			{
				this._TwoFactorAccountOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserAllocationStatus_RoleMembers", Storage="_UserAllocationStatus", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15, EmitDefaultValue=false)]
		public EntitySet<UserAllocationStatus> UserAllocationStatus
		{
			get
			{
				if ((this.serializing 
							&& (this._UserAllocationStatus.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserAllocationStatus;
			}
			set
			{
				this._UserAllocationStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserEmailAddresses_RoleMembers", Storage="_UserEmailAddresses", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16, EmitDefaultValue=false)]
		public EntitySet<UserEmailAddress> UserEmailAddresses
		{
			get
			{
				if ((this.serializing 
							&& (this._UserEmailAddresses.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserEmailAddresses;
			}
			set
			{
				this._UserEmailAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRelationships_PartnerRoleMembers", Storage="_UserRelationships", ThisKey="RoleId,UserId", OtherKey="PartnerRoleId,PartnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=17, EmitDefaultValue=false)]
		public EntitySet<UserRelationship> UserRelationships
		{
			get
			{
				if ((this.serializing 
							&& (this._UserRelationships.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserRelationships;
			}
			set
			{
				this._UserRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRelationships_RoleMembers", Storage="_UserRelationships_RoleMembers", ThisKey="RoleId,UserId", OtherKey="RoleId,UserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=18, EmitDefaultValue=false)]
		public EntitySet<UserRelationship> UserRelationships_RoleMembers
		{
			get
			{
				if ((this.serializing 
							&& (this._UserRelationships_RoleMembers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserRelationships_RoleMembers;
			}
			set
			{
				this._UserRelationships_RoleMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_Role", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleMembers.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleMembers.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_User", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RoleMembers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RoleMembers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwners_RoleMembers", Storage="_VenueOwners", ThisKey="RoleId,UserId", OtherKey="OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=19, EmitDefaultValue=false)]
		public EntitySet<VenueOwner> VenueOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._VenueOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._VenueOwners;
			}
			set
			{
				this._VenueOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountLockOutOwners(AccountLockOutOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_AccountLockOutOwners(AccountLockOutOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_AccountTwoFactorOwners(AccountTwoFactorOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_AccountTwoFactorOwners(AccountTwoFactorOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_Domains(Domain entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_Domains(Domain entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_ExternalAccountProviderOwners(ExternalAccountProviderOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_ExternalAccountProviderOwners(ExternalAccountProviderOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_OwnedRoles(OwnedRole entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_OwnedRoles(OwnedRole entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_ResourceOverrides(ResourceOverride entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_ResourceOverrides(ResourceOverride entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_TicketOwners(TicketOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_TicketOwners(TicketOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_TwoFactorAccountOwners(TwoFactorAccountOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_TwoFactorAccountOwners(TwoFactorAccountOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_UserAllocationStatus(UserAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_UserAllocationStatus(UserAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_UserEmailAddresses(UserEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_UserEmailAddresses(UserEmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_UserRelationships(UserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_UserRelationships(UserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void attach_UserRelationships_RoleMembers(UserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationships_RoleMember = this;
		}
		
		private void detach_UserRelationships_RoleMembers(UserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationships_RoleMember = null;
		}
		
		private void attach_VenueOwners(VenueOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = this;
		}
		
		private void detach_VenueOwners(VenueOwner entity)
		{
			this.SendPropertyChanging();
			entity.RoleMember = null;
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			this._AccountLockOutOwners = new EntitySet<AccountLockOutOwner>(new Action<AccountLockOutOwner>(this.attach_AccountLockOutOwners), new Action<AccountLockOutOwner>(this.detach_AccountLockOutOwners));
			this._AccountTwoFactorOwners = new EntitySet<AccountTwoFactorOwner>(new Action<AccountTwoFactorOwner>(this.attach_AccountTwoFactorOwners), new Action<AccountTwoFactorOwner>(this.detach_AccountTwoFactorOwners));
			this._Divisions = new EntitySet<Division>(new Action<Division>(this.attach_Divisions), new Action<Division>(this.detach_Divisions));
			this._Domains = new EntitySet<Domain>(new Action<Domain>(this.attach_Domains), new Action<Domain>(this.detach_Domains));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._ExternalAccountProviderOwners = new EntitySet<ExternalAccountProviderOwner>(new Action<ExternalAccountProviderOwner>(this.attach_ExternalAccountProviderOwners), new Action<ExternalAccountProviderOwner>(this.detach_ExternalAccountProviderOwners));
			this._OwnedRoles = new EntitySet<OwnedRole>(new Action<OwnedRole>(this.attach_OwnedRoles), new Action<OwnedRole>(this.detach_OwnedRoles));
			this._ResourceOverrides = new EntitySet<ResourceOverride>(new Action<ResourceOverride>(this.attach_ResourceOverrides), new Action<ResourceOverride>(this.detach_ResourceOverrides));
			this._TicketOwners = new EntitySet<TicketOwner>(new Action<TicketOwner>(this.attach_TicketOwners), new Action<TicketOwner>(this.detach_TicketOwners));
			this._TwoFactorAccountOwners = new EntitySet<TwoFactorAccountOwner>(new Action<TwoFactorAccountOwner>(this.attach_TwoFactorAccountOwners), new Action<TwoFactorAccountOwner>(this.detach_TwoFactorAccountOwners));
			this._UserAllocationStatus = new EntitySet<UserAllocationStatus>(new Action<UserAllocationStatus>(this.attach_UserAllocationStatus), new Action<UserAllocationStatus>(this.detach_UserAllocationStatus));
			this._UserEmailAddresses = new EntitySet<UserEmailAddress>(new Action<UserEmailAddress>(this.attach_UserEmailAddresses), new Action<UserEmailAddress>(this.detach_UserEmailAddresses));
			this._UserRelationships = new EntitySet<UserRelationship>(new Action<UserRelationship>(this.attach_UserRelationships), new Action<UserRelationship>(this.detach_UserRelationships));
			this._UserRelationships_RoleMembers = new EntitySet<UserRelationship>(new Action<UserRelationship>(this.attach_UserRelationships_RoleMembers), new Action<UserRelationship>(this.detach_UserRelationships_RoleMembers));
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			this._VenueOwners = new EntitySet<VenueOwner>(new Action<VenueOwner>(this.attach_VenueOwners), new Action<VenueOwner>(this.detach_VenueOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleOwnerAllowedRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class RoleOwnerAllowedRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _AllowedRoleId;
		
		private byte _RoleOwnerRoleId;
		
		private EntityRef<RoleOwnerRole> _RoleOwnerRole;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAllowedRoleIdChanging(byte value);
    partial void OnAllowedRoleIdChanged();
    partial void OnRoleOwnerRoleIdChanging(byte value);
    partial void OnRoleOwnerRoleIdChanged();
    #endregion
		
		public RoleOwnerAllowedRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowedRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte AllowedRoleId
		{
			get
			{
				return this._AllowedRoleId;
			}
			set
			{
				if ((this._AllowedRoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllowedRoleIdChanging(value);
					this.SendPropertyChanging();
					this._AllowedRoleId = value;
					this.SendPropertyChanged("AllowedRoleId");
					this.OnAllowedRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleOwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte RoleOwnerRoleId
		{
			get
			{
				return this._RoleOwnerRoleId;
			}
			set
			{
				if ((this._RoleOwnerRoleId != value))
				{
					if (this._RoleOwnerRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleOwnerRoleId = value;
					this.SendPropertyChanged("RoleOwnerRoleId");
					this.OnRoleOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleOwnerAllowedRoles_RoleOwnerRoles", Storage="_RoleOwnerRole", ThisKey="RoleOwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public RoleOwnerRole RoleOwnerRole
		{
			get
			{
				return this._RoleOwnerRole.Entity;
			}
			set
			{
				RoleOwnerRole previousValue = this._RoleOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._RoleOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleOwnerRole.Entity = null;
						previousValue.RoleOwnerAllowedRoles.Remove(this);
					}
					this._RoleOwnerRole.Entity = value;
					if ((value != null))
					{
						value.RoleOwnerAllowedRoles.Add(this);
						this._RoleOwnerRoleId = value.RoleId;
					}
					else
					{
						this._RoleOwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("RoleOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleOwnerAllowedRoles_Roles", Storage="_Role", ThisKey="AllowedRoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleOwnerAllowedRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleOwnerAllowedRoles.Add(this);
						this._AllowedRoleId = value.Id;
					}
					else
					{
						this._AllowedRoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._RoleOwnerRole = default(EntityRef<RoleOwnerRole>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class RoleOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntitySet<OwnedRole> _OwnedRoles;
		
		private EntitySet<RoleOwnerAllowedRole> _RoleOwnerAllowedRoles;
		
		private EntityRef<Role> _Role;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public RoleOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_OwnedRoles_RoleOwnerRoles", Storage="_OwnedRoles", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<OwnedRole> OwnedRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._OwnedRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._OwnedRoles;
			}
			set
			{
				this._OwnedRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleOwnerAllowedRoles_RoleOwnerRoles", Storage="_RoleOwnerAllowedRoles", ThisKey="RoleId", OtherKey="RoleOwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<RoleOwnerAllowedRole> RoleOwnerAllowedRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._RoleOwnerAllowedRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RoleOwnerAllowedRoles;
			}
			set
			{
				this._RoleOwnerAllowedRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnedRoles(OwnedRole entity)
		{
			this.SendPropertyChanging();
			entity.RoleOwnerRole = this;
		}
		
		private void detach_OwnedRoles(OwnedRole entity)
		{
			this.SendPropertyChanging();
			entity.RoleOwnerRole = null;
		}
		
		private void attach_RoleOwnerAllowedRoles(RoleOwnerAllowedRole entity)
		{
			this.SendPropertyChanging();
			entity.RoleOwnerRole = this;
		}
		
		private void detach_RoleOwnerAllowedRoles(RoleOwnerAllowedRole entity)
		{
			this.SendPropertyChanging();
			entity.RoleOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._OwnedRoles = new EntitySet<OwnedRole>(new Action<OwnedRole>(this.attach_OwnedRoles), new Action<OwnedRole>(this.detach_OwnedRoles));
			this._RoleOwnerAllowedRoles = new EntitySet<RoleOwnerAllowedRole>(new Action<RoleOwnerAllowedRole>(this.attach_RoleOwnerAllowedRoles), new Action<RoleOwnerAllowedRole>(this.detach_RoleOwnerAllowedRoles));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleRelationships")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class RoleRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private byte _PartnerRoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Role> _RoleRelationships_Role;
		
		private EntitySet<UserRelationship> _UserRelationships;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    partial void OnPartnerRoleIdChanging(byte value);
    partial void OnPartnerRoleIdChanged();
    #endregion
		
		public RoleRelationship()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._RoleRelationships_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte PartnerRoleId
		{
			get
			{
				return this._PartnerRoleId;
			}
			set
			{
				if ((this._PartnerRoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._PartnerRoleId = value;
					this.SendPropertyChanged("PartnerRoleId");
					this.OnPartnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleRelationships_PartnerRoles", Storage="_Role", ThisKey="PartnerRoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleRelationships.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleRelationships.Add(this);
						this._PartnerRoleId = value.Id;
					}
					else
					{
						this._PartnerRoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleRelationships_Roles", Storage="_RoleRelationships_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role RoleRelationships_Role
		{
			get
			{
				return this._RoleRelationships_Role.Entity;
			}
			set
			{
				Role previousValue = this._RoleRelationships_Role.Entity;
				if (((previousValue != value) 
							|| (this._RoleRelationships_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleRelationships_Role.Entity = null;
						previousValue.RoleRelationships_Roles.Remove(this);
					}
					this._RoleRelationships_Role.Entity = value;
					if ((value != null))
					{
						value.RoleRelationships_Roles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("RoleRelationships_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRelationships_RoleRelationships", Storage="_UserRelationships", ThisKey="RoleId,PartnerRoleId", OtherKey="RoleId,PartnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<UserRelationship> UserRelationships
		{
			get
			{
				if ((this.serializing 
							&& (this._UserRelationships.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserRelationships;
			}
			set
			{
				this._UserRelationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRelationships(UserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RoleRelationship = this;
		}
		
		private void detach_UserRelationships(UserRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RoleRelationship = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._RoleRelationships_Role = default(EntityRef<Role>);
			this._UserRelationships = new EntitySet<UserRelationship>(new Action<UserRelationship>(this.attach_UserRelationships), new Action<UserRelationship>(this.detach_UserRelationships));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Id;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsSystemRole;
		
		private byte _OwnerRoleId;
		
		private bool _Active;
		
		private EntityRef<AccountLockOutOwnerRole> _AccountLockOutOwnerRole;
		
		private EntityRef<AccountOwnerRole> _AccountOwnerRole;
		
		private EntityRef<TwoFactorAccountOwnerRole> _TwoFactorAccountOwnerRole;
		
		private EntityRef<DivisionMemberRole> _DivisionMemberRole;
		
		private EntityRef<DivisionOwnerRole> _DivisionOwnerRole;
		
		private EntityRef<DomainOwnerRole> _DomainOwnerRole;
		
		private EntityRef<EventOwnerRole> _EventOwnerRole;
		
		private EntityRef<ExternalAccountOwnerRole> _ExternalAccountOwnerRole;
		
		private EntityRef<ExternalAccountProviderOwnerRole> _ExternalAccountProviderOwnerRole;
		
		private EntityRef<FieldOwnerRole> _FieldOwnerRole;
		
		private EntityRef<ResourceOverridesOwnerRole> _ResourceOverridesOwnerRole;
		
		private EntitySet<RoleOwnerAllowedRole> _RoleOwnerAllowedRoles;
		
		private EntityRef<RoleOwnerRole> _RoleOwnerRole;
		
		private EntitySet<RoleRelationship> _RoleRelationships;
		
		private EntitySet<RoleRelationship> _RoleRelationships_Roles;
		
		private EntityRef<Role> _OwnerRole;
		
		private EntitySet<Role> _Roles_OwnerRoles;
		
		private EntityRef<TicketAllocationRole> _TicketAllocationRole;
		
		private EntityRef<TicketAllocatorRole> _TicketAllocatorRole;
		
		private EntityRef<TicketOwnerRole> _TicketOwnerRole;
		
		private EntityRef<TicketPatronageRole> _TicketPatronageRole;
		
		private EntityRef<TicketRequestorRole> _TicketRequestorRole;
		
		private EntityRef<TicketStatusUpdaterRole> _TicketStatusUpdaterRole;
		
		private EntitySet<RoleMember> _RoleMembers;
		
		private EntityRef<VenueOwnerRole> _VenueOwnerRole;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(byte value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsSystemRoleChanging(bool value);
    partial void OnIsSystemRoleChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Role()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemRole", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public bool IsSystemRole
		{
			get
			{
				return this._IsSystemRole;
			}
			set
			{
				if ((this._IsSystemRole != value))
				{
					this.OnIsSystemRoleChanging(value);
					this.SendPropertyChanging();
					this._IsSystemRole = value;
					this.SendPropertyChanged("IsSystemRole");
					this.OnIsSystemRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if (this._OwnerRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountLockOutOwnerRoles_AccountLockOutOwnerRoles", Storage="_AccountLockOutOwnerRole", ThisKey="Id", OtherKey="OwnerRoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public AccountLockOutOwnerRole AccountLockOutOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountLockOutOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._AccountLockOutOwnerRole.Entity;
			}
			set
			{
				AccountLockOutOwnerRole previousValue = this._AccountLockOutOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._AccountLockOutOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountLockOutOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._AccountLockOutOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("AccountLockOutOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountRoles_Roles", Storage="_AccountOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public AccountOwnerRole AccountOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._AccountOwnerRole.Entity;
			}
			set
			{
				AccountOwnerRole previousValue = this._AccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._AccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._AccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("AccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTwoFactorOwnerRoles_Roles", Storage="_TwoFactorAccountOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public TwoFactorAccountOwnerRole TwoFactorAccountOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._TwoFactorAccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._TwoFactorAccountOwnerRole.Entity;
			}
			set
			{
				TwoFactorAccountOwnerRole previousValue = this._TwoFactorAccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._TwoFactorAccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TwoFactorAccountOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._TwoFactorAccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("TwoFactorAccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DivisionMemberRoles_Roles", Storage="_DivisionMemberRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public DivisionMemberRole DivisionMemberRole
		{
			get
			{
				if ((this.serializing 
							&& (this._DivisionMemberRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._DivisionMemberRole.Entity;
			}
			set
			{
				DivisionMemberRole previousValue = this._DivisionMemberRole.Entity;
				if (((previousValue != value) 
							|| (this._DivisionMemberRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DivisionMemberRole.Entity = null;
						previousValue.Role = null;
					}
					this._DivisionMemberRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("DivisionMemberRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DivisionOwnerRoles_Roles", Storage="_DivisionOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public DivisionOwnerRole DivisionOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._DivisionOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._DivisionOwnerRole.Entity;
			}
			set
			{
				DivisionOwnerRole previousValue = this._DivisionOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._DivisionOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DivisionOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._DivisionOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("DivisionOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DomainOwnerRoles_Roles", Storage="_DomainOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public DomainOwnerRole DomainOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._DomainOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._DomainOwnerRole.Entity;
			}
			set
			{
				DomainOwnerRole previousValue = this._DomainOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._DomainOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DomainOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._DomainOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("DomainOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventOwnerRoles_Roles", Storage="_EventOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EventOwnerRole EventOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._EventOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._EventOwnerRole.Entity;
			}
			set
			{
				EventOwnerRole previousValue = this._EventOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._EventOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._EventOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("EventOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountOwnerRoles_Roles", Storage="_ExternalAccountOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14, EmitDefaultValue=false)]
		public ExternalAccountOwnerRole ExternalAccountOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._ExternalAccountOwnerRole.Entity;
			}
			set
			{
				ExternalAccountOwnerRole previousValue = this._ExternalAccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._ExternalAccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExternalAccountOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._ExternalAccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("ExternalAccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccountProviderOwnerRoles_Roles", Storage="_ExternalAccountProviderOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15, EmitDefaultValue=false)]
		public ExternalAccountProviderOwnerRole ExternalAccountProviderOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccountProviderOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._ExternalAccountProviderOwnerRole.Entity;
			}
			set
			{
				ExternalAccountProviderOwnerRole previousValue = this._ExternalAccountProviderOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._ExternalAccountProviderOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExternalAccountProviderOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._ExternalAccountProviderOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("ExternalAccountProviderOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FieldOwnerRoles_Roles", Storage="_FieldOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16, EmitDefaultValue=false)]
		public FieldOwnerRole FieldOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._FieldOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._FieldOwnerRole.Entity;
			}
			set
			{
				FieldOwnerRole previousValue = this._FieldOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._FieldOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._FieldOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("FieldOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ResourceOwnerRoles_Roles", Storage="_ResourceOverridesOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=17, EmitDefaultValue=false)]
		public ResourceOverridesOwnerRole ResourceOverridesOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._ResourceOverridesOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._ResourceOverridesOwnerRole.Entity;
			}
			set
			{
				ResourceOverridesOwnerRole previousValue = this._ResourceOverridesOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._ResourceOverridesOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceOverridesOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._ResourceOverridesOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("ResourceOverridesOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleOwnerAllowedRoles_Roles", Storage="_RoleOwnerAllowedRoles", ThisKey="Id", OtherKey="AllowedRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=18, EmitDefaultValue=false)]
		public EntitySet<RoleOwnerAllowedRole> RoleOwnerAllowedRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._RoleOwnerAllowedRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RoleOwnerAllowedRoles;
			}
			set
			{
				this._RoleOwnerAllowedRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleOwnerRoles_Roles", Storage="_RoleOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=19, EmitDefaultValue=false)]
		public RoleOwnerRole RoleOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._RoleOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._RoleOwnerRole.Entity;
			}
			set
			{
				RoleOwnerRole previousValue = this._RoleOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._RoleOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._RoleOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("RoleOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleRelationships_PartnerRoles", Storage="_RoleRelationships", ThisKey="Id", OtherKey="PartnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=20, EmitDefaultValue=false)]
		public EntitySet<RoleRelationship> RoleRelationships
		{
			get
			{
				if ((this.serializing 
							&& (this._RoleRelationships.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RoleRelationships;
			}
			set
			{
				this._RoleRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_RoleRelationships_Roles", Storage="_RoleRelationships_Roles", ThisKey="Id", OtherKey="RoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=21, EmitDefaultValue=false)]
		public EntitySet<RoleRelationship> RoleRelationships_Roles
		{
			get
			{
				if ((this.serializing 
							&& (this._RoleRelationships_Roles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RoleRelationships_Roles;
			}
			set
			{
				this._RoleRelationships_Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Roles_OwnerRoles", Storage="_OwnerRole", ThisKey="OwnerRoleId", OtherKey="Id", IsForeignKey=true)]
		public Role OwnerRole
		{
			get
			{
				return this._OwnerRole.Entity;
			}
			set
			{
				Role previousValue = this._OwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._OwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerRole.Entity = null;
						previousValue.Roles_OwnerRoles.Remove(this);
					}
					this._OwnerRole.Entity = value;
					if ((value != null))
					{
						value.Roles_OwnerRoles.Add(this);
						this._OwnerRoleId = value.Id;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("OwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Roles_OwnerRoles", Storage="_Roles_OwnerRoles", ThisKey="Id", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=22, EmitDefaultValue=false)]
		public EntitySet<Role> Roles_OwnerRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._Roles_OwnerRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Roles_OwnerRoles;
			}
			set
			{
				this._Roles_OwnerRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationRoles_Roles", Storage="_TicketAllocationRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=23, EmitDefaultValue=false)]
		public TicketAllocationRole TicketAllocationRole
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocationRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._TicketAllocationRole.Entity;
			}
			set
			{
				TicketAllocationRole previousValue = this._TicketAllocationRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocationRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocationRole.Entity = null;
						previousValue.Role = null;
					}
					this._TicketAllocationRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("TicketAllocationRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocatorRoles_Roles", Storage="_TicketAllocatorRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=24, EmitDefaultValue=false)]
		public TicketAllocatorRole TicketAllocatorRole
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocatorRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._TicketAllocatorRole.Entity;
			}
			set
			{
				TicketAllocatorRole previousValue = this._TicketAllocatorRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocatorRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocatorRole.Entity = null;
						previousValue.Role = null;
					}
					this._TicketAllocatorRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("TicketAllocatorRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketOwnerRoles_Roles", Storage="_TicketOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=25, EmitDefaultValue=false)]
		public TicketOwnerRole TicketOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._TicketOwnerRole.Entity;
			}
			set
			{
				TicketOwnerRole previousValue = this._TicketOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._TicketOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("TicketOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketPatronageRoles_Roles", Storage="_TicketPatronageRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=26, EmitDefaultValue=false)]
		public TicketPatronageRole TicketPatronageRole
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketPatronageRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._TicketPatronageRole.Entity;
			}
			set
			{
				TicketPatronageRole previousValue = this._TicketPatronageRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketPatronageRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketPatronageRole.Entity = null;
						previousValue.Role = null;
					}
					this._TicketPatronageRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("TicketPatronageRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequestRoles_Roles", Storage="_TicketRequestorRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=27, EmitDefaultValue=false)]
		public TicketRequestorRole TicketRequestorRole
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketRequestorRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._TicketRequestorRole.Entity;
			}
			set
			{
				TicketRequestorRole previousValue = this._TicketRequestorRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketRequestorRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketRequestorRole.Entity = null;
						previousValue.Role = null;
					}
					this._TicketRequestorRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("TicketRequestorRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketStatusUpdaterRoles_Roles", Storage="_TicketStatusUpdaterRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=28, EmitDefaultValue=false)]
		public TicketStatusUpdaterRole TicketStatusUpdaterRole
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketStatusUpdaterRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._TicketStatusUpdaterRole.Entity;
			}
			set
			{
				TicketStatusUpdaterRole previousValue = this._TicketStatusUpdaterRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketStatusUpdaterRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketStatusUpdaterRole.Entity = null;
						previousValue.Role = null;
					}
					this._TicketStatusUpdaterRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("TicketStatusUpdaterRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_Role", Storage="_RoleMembers", ThisKey="Id", OtherKey="RoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=29, EmitDefaultValue=false)]
		public EntitySet<RoleMember> RoleMembers
		{
			get
			{
				if ((this.serializing 
							&& (this._RoleMembers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RoleMembers;
			}
			set
			{
				this._RoleMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwnerRoles_Roles", Storage="_VenueOwnerRole", ThisKey="Id", OtherKey="RoleId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=30, EmitDefaultValue=false)]
		public VenueOwnerRole VenueOwnerRole
		{
			get
			{
				if ((this.serializing 
							&& (this._VenueOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._VenueOwnerRole.Entity;
			}
			set
			{
				VenueOwnerRole previousValue = this._VenueOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._VenueOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VenueOwnerRole.Entity = null;
						previousValue.Role = null;
					}
					this._VenueOwnerRole.Entity = value;
					if ((value != null))
					{
						value.Role = this;
					}
					this.SendPropertyChanged("VenueOwnerRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleOwnerAllowedRoles(RoleOwnerAllowedRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleOwnerAllowedRoles(RoleOwnerAllowedRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RoleRelationships(RoleRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleRelationships(RoleRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RoleRelationships_Roles(RoleRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RoleRelationships_Role = this;
		}
		
		private void detach_RoleRelationships_Roles(RoleRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RoleRelationships_Role = null;
		}
		
		private void attach_Roles_OwnerRoles(Role entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRole = this;
		}
		
		private void detach_Roles_OwnerRoles(Role entity)
		{
			this.SendPropertyChanging();
			entity.OwnerRole = null;
		}
		
		private void attach_RoleMembers(RoleMember entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleMembers(RoleMember entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void Initialize()
		{
			this._AccountLockOutOwnerRole = default(EntityRef<AccountLockOutOwnerRole>);
			this._AccountOwnerRole = default(EntityRef<AccountOwnerRole>);
			this._TwoFactorAccountOwnerRole = default(EntityRef<TwoFactorAccountOwnerRole>);
			this._DivisionMemberRole = default(EntityRef<DivisionMemberRole>);
			this._DivisionOwnerRole = default(EntityRef<DivisionOwnerRole>);
			this._DomainOwnerRole = default(EntityRef<DomainOwnerRole>);
			this._EventOwnerRole = default(EntityRef<EventOwnerRole>);
			this._ExternalAccountOwnerRole = default(EntityRef<ExternalAccountOwnerRole>);
			this._ExternalAccountProviderOwnerRole = default(EntityRef<ExternalAccountProviderOwnerRole>);
			this._FieldOwnerRole = default(EntityRef<FieldOwnerRole>);
			this._ResourceOverridesOwnerRole = default(EntityRef<ResourceOverridesOwnerRole>);
			this._RoleOwnerAllowedRoles = new EntitySet<RoleOwnerAllowedRole>(new Action<RoleOwnerAllowedRole>(this.attach_RoleOwnerAllowedRoles), new Action<RoleOwnerAllowedRole>(this.detach_RoleOwnerAllowedRoles));
			this._RoleOwnerRole = default(EntityRef<RoleOwnerRole>);
			this._RoleRelationships = new EntitySet<RoleRelationship>(new Action<RoleRelationship>(this.attach_RoleRelationships), new Action<RoleRelationship>(this.detach_RoleRelationships));
			this._RoleRelationships_Roles = new EntitySet<RoleRelationship>(new Action<RoleRelationship>(this.attach_RoleRelationships_Roles), new Action<RoleRelationship>(this.detach_RoleRelationships_Roles));
			this._OwnerRole = default(EntityRef<Role>);
			this._Roles_OwnerRoles = new EntitySet<Role>(new Action<Role>(this.attach_Roles_OwnerRoles), new Action<Role>(this.detach_Roles_OwnerRoles));
			this._TicketAllocationRole = default(EntityRef<TicketAllocationRole>);
			this._TicketAllocatorRole = default(EntityRef<TicketAllocatorRole>);
			this._TicketOwnerRole = default(EntityRef<TicketOwnerRole>);
			this._TicketPatronageRole = default(EntityRef<TicketPatronageRole>);
			this._TicketRequestorRole = default(EntityRef<TicketRequestorRole>);
			this._TicketStatusUpdaterRole = default(EntityRef<TicketStatusUpdaterRole>);
			this._RoleMembers = new EntitySet<RoleMember>(new Action<RoleMember>(this.attach_RoleMembers), new Action<RoleMember>(this.detach_RoleMembers));
			this._VenueOwnerRole = default(EntityRef<VenueOwnerRole>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="id.Roles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Id_Role
	{
		
		private byte _Id;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsSystemRole;
		
		private byte _OwnerRoleId;
		
		private string _OwnerRoleName;
		
		private bool _Active;
		
		private System.Nullable<int> _Members;
		
		public Id_Role()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemRole", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public bool IsSystemRole
		{
			get
			{
				return this._IsSystemRole;
			}
			set
			{
				if ((this._IsSystemRole != value))
				{
					this._IsSystemRole = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					this._OwnerRoleId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string OwnerRoleName
		{
			get
			{
				return this._OwnerRoleName;
			}
			set
			{
				if ((this._OwnerRoleName != value))
				{
					this._OwnerRoleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Members", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Nullable<int> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				if ((this._Members != value))
				{
					this._Members = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketAllocationRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketAllocationRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<TicketAllocation> _TicketAllocations;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public TicketAllocationRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.TicketAllocationRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.TicketAllocationRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketAllocationRoles", Storage="_TicketAllocations", ThisKey="RoleId", OtherKey="PatronRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations;
			}
			set
			{
				this._TicketAllocations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocationRole = this;
		}
		
		private void detach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocationRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._TicketAllocations = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations), new Action<TicketAllocation>(this.detach_TicketAllocations));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketAllocations")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketAllocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EventId;
		
		private int _TicketId;
		
		private int _TicketRequestId;
		
		private byte _EventOwnerRoleId;
		
		private System.Guid _EventOwnerUserId;
		
		private byte _PatronRoleId;
		
		private System.Guid _PatronUserId;
		
		private int _AllocationStatusId;
		
		private byte _AllocatorRoleId;
		
		private System.Guid _AllocatorUserId;
		
		private byte _LastStatusUpdateRoleId;
		
		private System.Guid _LastStatusUpdateUserId;
		
		private System.DateTime _LastStatusUpdate;
		
		private EntityRef<UserRelationship> _UserRelationship;
		
		private EntityRef<UserRelationship> _TicketAllocations_OwnerPatronRelationship;
		
		private EntityRef<UserRelationship> _TicketAllocations_OwnerStatusUpdaterRelationship;
		
		private EntityRef<TicketAllocationRole> _TicketAllocationRole;
		
		private EntityRef<TicketAllocationStatus> _TicketAllocationStatus;
		
		private EntityRef<TicketAllocatorRole> _TicketAllocatorRole;
		
		private EntityRef<TicketOwner> _TicketOwner;
		
		private EntityRef<TicketPatronageRole> _TicketPatronageRole;
		
		private EntityRef<TicketStatusUpdaterRole> _TicketStatusUpdaterRole;
		
		private EntitySet<TicketAllocationStatusHistory> _TicketAllocationStatusHistories;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnTicketRequestIdChanging(int value);
    partial void OnTicketRequestIdChanged();
    partial void OnEventOwnerRoleIdChanging(byte value);
    partial void OnEventOwnerRoleIdChanged();
    partial void OnEventOwnerUserIdChanging(System.Guid value);
    partial void OnEventOwnerUserIdChanged();
    partial void OnPatronRoleIdChanging(byte value);
    partial void OnPatronRoleIdChanged();
    partial void OnPatronUserIdChanging(System.Guid value);
    partial void OnPatronUserIdChanged();
    partial void OnAllocationStatusIdChanging(int value);
    partial void OnAllocationStatusIdChanged();
    partial void OnAllocatorRoleIdChanging(byte value);
    partial void OnAllocatorRoleIdChanged();
    partial void OnAllocatorUserIdChanging(System.Guid value);
    partial void OnAllocatorUserIdChanged();
    partial void OnLastStatusUpdateRoleIdChanging(byte value);
    partial void OnLastStatusUpdateRoleIdChanged();
    partial void OnLastStatusUpdateUserIdChanging(System.Guid value);
    partial void OnLastStatusUpdateUserIdChanged();
    partial void OnLastStatusUpdateChanging(System.DateTime value);
    partial void OnLastStatusUpdateChanged();
    #endregion
		
		public TicketAllocation()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._TicketAllocationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if ((this._TicketAllocationStatus.HasLoadedOrAssignedValue || this._TicketOwner.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketRequestId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int TicketRequestId
		{
			get
			{
				return this._TicketRequestId;
			}
			set
			{
				if ((this._TicketRequestId != value))
				{
					this.OnTicketRequestIdChanging(value);
					this.SendPropertyChanging();
					this._TicketRequestId = value;
					this.SendPropertyChanged("TicketRequestId");
					this.OnTicketRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public byte EventOwnerRoleId
		{
			get
			{
				return this._EventOwnerRoleId;
			}
			set
			{
				if ((this._EventOwnerRoleId != value))
				{
					if (((this._UserRelationship.HasLoadedOrAssignedValue || this._TicketAllocations_OwnerStatusUpdaterRelationship.HasLoadedOrAssignedValue) 
								|| this._TicketAllocationStatus.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerRoleId = value;
					this.SendPropertyChanged("EventOwnerRoleId");
					this.OnEventOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Guid EventOwnerUserId
		{
			get
			{
				return this._EventOwnerUserId;
			}
			set
			{
				if ((this._EventOwnerUserId != value))
				{
					if (((this._UserRelationship.HasLoadedOrAssignedValue || this._TicketAllocations_OwnerStatusUpdaterRelationship.HasLoadedOrAssignedValue) 
								|| this._TicketAllocationStatus.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerUserId = value;
					this.SendPropertyChanged("EventOwnerUserId");
					this.OnEventOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public byte PatronRoleId
		{
			get
			{
				return this._PatronRoleId;
			}
			set
			{
				if ((this._PatronRoleId != value))
				{
					if ((((this._TicketAllocations_OwnerPatronRelationship.HasLoadedOrAssignedValue || this._TicketAllocationRole.HasLoadedOrAssignedValue) 
								|| this._TicketOwner.HasLoadedOrAssignedValue) 
								|| this._TicketPatronageRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatronRoleIdChanging(value);
					this.SendPropertyChanging();
					this._PatronRoleId = value;
					this.SendPropertyChanged("PatronRoleId");
					this.OnPatronRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Guid PatronUserId
		{
			get
			{
				return this._PatronUserId;
			}
			set
			{
				if ((this._PatronUserId != value))
				{
					if ((this._TicketAllocations_OwnerPatronRelationship.HasLoadedOrAssignedValue || this._TicketOwner.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatronUserIdChanging(value);
					this.SendPropertyChanging();
					this._PatronUserId = value;
					this.SendPropertyChanged("PatronUserId");
					this.OnPatronUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocationStatusId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public int AllocationStatusId
		{
			get
			{
				return this._AllocationStatusId;
			}
			set
			{
				if ((this._AllocationStatusId != value))
				{
					if (this._TicketAllocationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllocationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AllocationStatusId = value;
					this.SendPropertyChanged("AllocationStatusId");
					this.OnAllocationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocatorRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public byte AllocatorRoleId
		{
			get
			{
				return this._AllocatorRoleId;
			}
			set
			{
				if ((this._AllocatorRoleId != value))
				{
					if (((this._UserRelationship.HasLoadedOrAssignedValue || this._TicketAllocations_OwnerPatronRelationship.HasLoadedOrAssignedValue) 
								|| this._TicketAllocatorRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllocatorRoleIdChanging(value);
					this.SendPropertyChanging();
					this._AllocatorRoleId = value;
					this.SendPropertyChanged("AllocatorRoleId");
					this.OnAllocatorRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocatorUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public System.Guid AllocatorUserId
		{
			get
			{
				return this._AllocatorUserId;
			}
			set
			{
				if ((this._AllocatorUserId != value))
				{
					if ((this._UserRelationship.HasLoadedOrAssignedValue || this._TicketAllocations_OwnerPatronRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllocatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._AllocatorUserId = value;
					this.SendPropertyChanged("AllocatorUserId");
					this.OnAllocatorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastStatusUpdateRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public byte LastStatusUpdateRoleId
		{
			get
			{
				return this._LastStatusUpdateRoleId;
			}
			set
			{
				if ((this._LastStatusUpdateRoleId != value))
				{
					if ((this._TicketAllocations_OwnerStatusUpdaterRelationship.HasLoadedOrAssignedValue || this._TicketStatusUpdaterRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastStatusUpdateRoleIdChanging(value);
					this.SendPropertyChanging();
					this._LastStatusUpdateRoleId = value;
					this.SendPropertyChanged("LastStatusUpdateRoleId");
					this.OnLastStatusUpdateRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastStatusUpdateUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13)]
		public System.Guid LastStatusUpdateUserId
		{
			get
			{
				return this._LastStatusUpdateUserId;
			}
			set
			{
				if ((this._LastStatusUpdateUserId != value))
				{
					if (this._TicketAllocations_OwnerStatusUpdaterRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLastStatusUpdateUserIdChanging(value);
					this.SendPropertyChanging();
					this._LastStatusUpdateUserId = value;
					this.SendPropertyChanged("LastStatusUpdateUserId");
					this.OnLastStatusUpdateUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastStatusUpdate", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14)]
		public System.DateTime LastStatusUpdate
		{
			get
			{
				return this._LastStatusUpdate;
			}
			set
			{
				if ((this._LastStatusUpdate != value))
				{
					this.OnLastStatusUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastStatusUpdate = value;
					this.SendPropertyChanged("LastStatusUpdate");
					this.OnLastStatusUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_OwnerAllocatorRelationships", Storage="_UserRelationship", ThisKey="EventOwnerRoleId,EventOwnerUserId,AllocatorRoleId,AllocatorUserId", OtherKey="RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey=true)]
		public UserRelationship UserRelationship
		{
			get
			{
				return this._UserRelationship.Entity;
			}
			set
			{
				UserRelationship previousValue = this._UserRelationship.Entity;
				if (((previousValue != value) 
							|| (this._UserRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRelationship.Entity = null;
						previousValue.TicketAllocations.Remove(this);
					}
					this._UserRelationship.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations.Add(this);
						this._EventOwnerRoleId = value.RoleId;
						this._EventOwnerUserId = value.UserId;
						this._AllocatorRoleId = value.PartnerRoleId;
						this._AllocatorUserId = value.PartnerUserId;
					}
					else
					{
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
						this._AllocatorRoleId = default(byte);
						this._AllocatorUserId = default(System.Guid);
					}
					this.SendPropertyChanged("UserRelationship");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_OwnerPatronRelationships", Storage="_TicketAllocations_OwnerPatronRelationship", ThisKey="AllocatorRoleId,AllocatorUserId,PatronRoleId,PatronUserId", OtherKey="RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey=true)]
		public UserRelationship TicketAllocations_OwnerPatronRelationship
		{
			get
			{
				return this._TicketAllocations_OwnerPatronRelationship.Entity;
			}
			set
			{
				UserRelationship previousValue = this._TicketAllocations_OwnerPatronRelationship.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocations_OwnerPatronRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocations_OwnerPatronRelationship.Entity = null;
						previousValue.TicketAllocations_OwnerPatronRelationships.Remove(this);
					}
					this._TicketAllocations_OwnerPatronRelationship.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations_OwnerPatronRelationships.Add(this);
						this._AllocatorRoleId = value.RoleId;
						this._AllocatorUserId = value.UserId;
						this._PatronRoleId = value.PartnerRoleId;
						this._PatronUserId = value.PartnerUserId;
					}
					else
					{
						this._AllocatorRoleId = default(byte);
						this._AllocatorUserId = default(System.Guid);
						this._PatronRoleId = default(byte);
						this._PatronUserId = default(System.Guid);
					}
					this.SendPropertyChanged("TicketAllocations_OwnerPatronRelationship");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_OwnerStatusUpdaterRelationships", Storage="_TicketAllocations_OwnerStatusUpdaterRelationship", ThisKey="EventOwnerRoleId,EventOwnerUserId,LastStatusUpdateRoleId,LastStatusUpdateUserId", OtherKey="RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey=true)]
		public UserRelationship TicketAllocations_OwnerStatusUpdaterRelationship
		{
			get
			{
				return this._TicketAllocations_OwnerStatusUpdaterRelationship.Entity;
			}
			set
			{
				UserRelationship previousValue = this._TicketAllocations_OwnerStatusUpdaterRelationship.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocations_OwnerStatusUpdaterRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocations_OwnerStatusUpdaterRelationship.Entity = null;
						previousValue.TicketAllocations_OwnerStatusUpdaterRelationships.Remove(this);
					}
					this._TicketAllocations_OwnerStatusUpdaterRelationship.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations_OwnerStatusUpdaterRelationships.Add(this);
						this._EventOwnerRoleId = value.RoleId;
						this._EventOwnerUserId = value.UserId;
						this._LastStatusUpdateRoleId = value.PartnerRoleId;
						this._LastStatusUpdateUserId = value.PartnerUserId;
					}
					else
					{
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
						this._LastStatusUpdateRoleId = default(byte);
						this._LastStatusUpdateUserId = default(System.Guid);
					}
					this.SendPropertyChanged("TicketAllocations_OwnerStatusUpdaterRelationship");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketAllocationRoles", Storage="_TicketAllocationRole", ThisKey="PatronRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TicketAllocationRole TicketAllocationRole
		{
			get
			{
				return this._TicketAllocationRole.Entity;
			}
			set
			{
				TicketAllocationRole previousValue = this._TicketAllocationRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocationRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocationRole.Entity = null;
						previousValue.TicketAllocations.Remove(this);
					}
					this._TicketAllocationRole.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations.Add(this);
						this._PatronRoleId = value.RoleId;
					}
					else
					{
						this._PatronRoleId = default(byte);
					}
					this.SendPropertyChanged("TicketAllocationRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketAllocationStatus", Storage="_TicketAllocationStatus", ThisKey="TicketId,AllocationStatusId,EventId,EventOwnerRoleId,EventOwnerUserId", OtherKey="TicketId,AllocationStatusId,EventId,EventOwnerRoleId,EventOwnerUserId", IsForeignKey=true)]
		public TicketAllocationStatus TicketAllocationStatus
		{
			get
			{
				return this._TicketAllocationStatus.Entity;
			}
			set
			{
				TicketAllocationStatus previousValue = this._TicketAllocationStatus.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocationStatus.Entity = null;
						previousValue.TicketAllocations.Remove(this);
					}
					this._TicketAllocationStatus.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations.Add(this);
						this._TicketId = value.TicketId;
						this._AllocationStatusId = value.AllocationStatusId;
						this._EventId = value.EventId;
						this._EventOwnerRoleId = value.EventOwnerRoleId;
						this._EventOwnerUserId = value.EventOwnerUserId;
					}
					else
					{
						this._TicketId = default(int);
						this._AllocationStatusId = default(int);
						this._EventId = default(int);
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("TicketAllocationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketAllocatorRoles", Storage="_TicketAllocatorRole", ThisKey="AllocatorRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TicketAllocatorRole TicketAllocatorRole
		{
			get
			{
				return this._TicketAllocatorRole.Entity;
			}
			set
			{
				TicketAllocatorRole previousValue = this._TicketAllocatorRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocatorRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocatorRole.Entity = null;
						previousValue.TicketAllocations.Remove(this);
					}
					this._TicketAllocatorRole.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations.Add(this);
						this._AllocatorRoleId = value.RoleId;
					}
					else
					{
						this._AllocatorRoleId = default(byte);
					}
					this.SendPropertyChanged("TicketAllocatorRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketOwners", Storage="_TicketOwner", ThisKey="TicketId,PatronRoleId,PatronUserId", OtherKey="TicketId,OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public TicketOwner TicketOwner
		{
			get
			{
				return this._TicketOwner.Entity;
			}
			set
			{
				TicketOwner previousValue = this._TicketOwner.Entity;
				if (((previousValue != value) 
							|| (this._TicketOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketOwner.Entity = null;
						previousValue.TicketAllocations.Remove(this);
					}
					this._TicketOwner.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations.Add(this);
						this._TicketId = value.TicketId;
						this._PatronRoleId = value.OwnerRoleId;
						this._PatronUserId = value.OwnerUserId;
					}
					else
					{
						this._TicketId = default(int);
						this._PatronRoleId = default(byte);
						this._PatronUserId = default(System.Guid);
					}
					this.SendPropertyChanged("TicketOwner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketPatronageRoles", Storage="_TicketPatronageRole", ThisKey="PatronRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TicketPatronageRole TicketPatronageRole
		{
			get
			{
				return this._TicketPatronageRole.Entity;
			}
			set
			{
				TicketPatronageRole previousValue = this._TicketPatronageRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketPatronageRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketPatronageRole.Entity = null;
						previousValue.TicketAllocations.Remove(this);
					}
					this._TicketPatronageRole.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations.Add(this);
						this._PatronRoleId = value.RoleId;
					}
					else
					{
						this._PatronRoleId = default(byte);
					}
					this.SendPropertyChanged("TicketPatronageRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketStatusUpdaterRoles", Storage="_TicketStatusUpdaterRole", ThisKey="LastStatusUpdateRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TicketStatusUpdaterRole TicketStatusUpdaterRole
		{
			get
			{
				return this._TicketStatusUpdaterRole.Entity;
			}
			set
			{
				TicketStatusUpdaterRole previousValue = this._TicketStatusUpdaterRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketStatusUpdaterRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketStatusUpdaterRole.Entity = null;
						previousValue.TicketAllocations.Remove(this);
					}
					this._TicketStatusUpdaterRole.Entity = value;
					if ((value != null))
					{
						value.TicketAllocations.Add(this);
						this._LastStatusUpdateRoleId = value.RoleId;
					}
					else
					{
						this._LastStatusUpdateRoleId = default(byte);
					}
					this.SendPropertyChanged("TicketStatusUpdaterRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationStatusHistory_TicketAllocations", Storage="_TicketAllocationStatusHistories", ThisKey="Id", OtherKey="TicketAllocationId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15, EmitDefaultValue=false)]
		public EntitySet<TicketAllocationStatusHistory> TicketAllocationStatusHistories
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocationStatusHistories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocationStatusHistories;
			}
			set
			{
				this._TicketAllocationStatusHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocationStatusHistories(TicketAllocationStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocation = this;
		}
		
		private void detach_TicketAllocationStatusHistories(TicketAllocationStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocation = null;
		}
		
		private void Initialize()
		{
			this._UserRelationship = default(EntityRef<UserRelationship>);
			this._TicketAllocations_OwnerPatronRelationship = default(EntityRef<UserRelationship>);
			this._TicketAllocations_OwnerStatusUpdaterRelationship = default(EntityRef<UserRelationship>);
			this._TicketAllocationRole = default(EntityRef<TicketAllocationRole>);
			this._TicketAllocationStatus = default(EntityRef<TicketAllocationStatus>);
			this._TicketAllocatorRole = default(EntityRef<TicketAllocatorRole>);
			this._TicketOwner = default(EntityRef<TicketOwner>);
			this._TicketPatronageRole = default(EntityRef<TicketPatronageRole>);
			this._TicketStatusUpdaterRole = default(EntityRef<TicketStatusUpdaterRole>);
			this._TicketAllocationStatusHistories = new EntitySet<TicketAllocationStatusHistory>(new Action<TicketAllocationStatusHistory>(this.attach_TicketAllocationStatusHistories), new Action<TicketAllocationStatusHistory>(this.detach_TicketAllocationStatusHistories));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketAllocationStatus")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketAllocationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketId;
		
		private int _AllocationStatusId;
		
		private int _EventId;
		
		private byte _EventOwnerRoleId;
		
		private System.Guid _EventOwnerUserId;
		
		private EntitySet<TicketAllocation> _TicketAllocations;
		
		private EntityRef<EventAllocationStatus> _EventAllocationStatus;
		
		private EntityRef<EventTicket> _EventTicket;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnAllocationStatusIdChanging(int value);
    partial void OnAllocationStatusIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventOwnerRoleIdChanging(byte value);
    partial void OnEventOwnerRoleIdChanged();
    partial void OnEventOwnerUserIdChanging(System.Guid value);
    partial void OnEventOwnerUserIdChanged();
    #endregion
		
		public TicketAllocationStatus()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._EventTicket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocationStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int AllocationStatusId
		{
			get
			{
				return this._AllocationStatusId;
			}
			set
			{
				if ((this._AllocationStatusId != value))
				{
					if (this._EventAllocationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllocationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AllocationStatusId = value;
					this.SendPropertyChanged("AllocationStatusId");
					this.OnAllocationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if ((this._EventAllocationStatus.HasLoadedOrAssignedValue || this._EventTicket.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public byte EventOwnerRoleId
		{
			get
			{
				return this._EventOwnerRoleId;
			}
			set
			{
				if ((this._EventOwnerRoleId != value))
				{
					if ((this._EventAllocationStatus.HasLoadedOrAssignedValue || this._EventTicket.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerRoleId = value;
					this.SendPropertyChanged("EventOwnerRoleId");
					this.OnEventOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Guid EventOwnerUserId
		{
			get
			{
				return this._EventOwnerUserId;
			}
			set
			{
				if ((this._EventOwnerUserId != value))
				{
					if ((this._EventAllocationStatus.HasLoadedOrAssignedValue || this._EventTicket.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerUserId = value;
					this.SendPropertyChanged("EventOwnerUserId");
					this.OnEventOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketAllocationStatus", Storage="_TicketAllocations", ThisKey="TicketId,AllocationStatusId,EventId,EventOwnerRoleId,EventOwnerUserId", OtherKey="TicketId,AllocationStatusId,EventId,EventOwnerRoleId,EventOwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations;
			}
			set
			{
				this._TicketAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationStatus_EventAllocationStatus", Storage="_EventAllocationStatus", ThisKey="EventId,AllocationStatusId,EventOwnerRoleId,EventOwnerUserId", OtherKey="EventId,AllocationStatusId,EventOwnerRoleId,EventOwnerUserId", IsForeignKey=true)]
		public EventAllocationStatus EventAllocationStatus
		{
			get
			{
				return this._EventAllocationStatus.Entity;
			}
			set
			{
				EventAllocationStatus previousValue = this._EventAllocationStatus.Entity;
				if (((previousValue != value) 
							|| (this._EventAllocationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventAllocationStatus.Entity = null;
						previousValue.TicketAllocationStatus.Remove(this);
					}
					this._EventAllocationStatus.Entity = value;
					if ((value != null))
					{
						value.TicketAllocationStatus.Add(this);
						this._EventId = value.EventId;
						this._AllocationStatusId = value.AllocationStatusId;
						this._EventOwnerRoleId = value.EventOwnerRoleId;
						this._EventOwnerUserId = value.EventOwnerUserId;
					}
					else
					{
						this._EventId = default(int);
						this._AllocationStatusId = default(int);
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("EventAllocationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationStatus_EventTickets", Storage="_EventTicket", ThisKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", OtherKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", IsForeignKey=true)]
		public EventTicket EventTicket
		{
			get
			{
				return this._EventTicket.Entity;
			}
			set
			{
				EventTicket previousValue = this._EventTicket.Entity;
				if (((previousValue != value) 
							|| (this._EventTicket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventTicket.Entity = null;
						previousValue.TicketAllocationStatus.Remove(this);
					}
					this._EventTicket.Entity = value;
					if ((value != null))
					{
						value.TicketAllocationStatus.Add(this);
						this._EventId = value.EventId;
						this._EventOwnerRoleId = value.EventOwnerRoleId;
						this._EventOwnerUserId = value.EventOwnerUserId;
						this._TicketId = value.TicketId;
					}
					else
					{
						this._EventId = default(int);
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
						this._TicketId = default(int);
					}
					this.SendPropertyChanged("EventTicket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocationStatus = this;
		}
		
		private void detach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocationStatus = null;
		}
		
		private void Initialize()
		{
			this._TicketAllocations = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations), new Action<TicketAllocation>(this.detach_TicketAllocations));
			this._EventAllocationStatus = default(EntityRef<EventAllocationStatus>);
			this._EventTicket = default(EntityRef<EventTicket>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketAllocationStatusHistory")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketAllocationStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TicketAllocationId;
		
		private int _NewAllocationStatusId;
		
		private byte _NewStatusUpdateRoleId;
		
		private System.Guid _NewStatusUpdateUserId;
		
		private System.Nullable<int> _PreviousAllocationStatusId;
		
		private System.Nullable<byte> _PreviousStatusUpdateRoleId;
		
		private System.Nullable<System.Guid> _PreviousStatusUpdateUserId;
		
		private System.DateTime _DateChanged;
		
		private EntityRef<TicketAllocation> _TicketAllocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTicketAllocationIdChanging(int value);
    partial void OnTicketAllocationIdChanged();
    partial void OnNewAllocationStatusIdChanging(int value);
    partial void OnNewAllocationStatusIdChanged();
    partial void OnNewStatusUpdateRoleIdChanging(byte value);
    partial void OnNewStatusUpdateRoleIdChanged();
    partial void OnNewStatusUpdateUserIdChanging(System.Guid value);
    partial void OnNewStatusUpdateUserIdChanged();
    partial void OnPreviousAllocationStatusIdChanging(System.Nullable<int> value);
    partial void OnPreviousAllocationStatusIdChanged();
    partial void OnPreviousStatusUpdateRoleIdChanging(System.Nullable<byte> value);
    partial void OnPreviousStatusUpdateRoleIdChanged();
    partial void OnPreviousStatusUpdateUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnPreviousStatusUpdateUserIdChanged();
    partial void OnDateChangedChanging(System.DateTime value);
    partial void OnDateChangedChanged();
    #endregion
		
		public TicketAllocationStatusHistory()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketAllocationId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int TicketAllocationId
		{
			get
			{
				return this._TicketAllocationId;
			}
			set
			{
				if ((this._TicketAllocationId != value))
				{
					if (this._TicketAllocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketAllocationIdChanging(value);
					this.SendPropertyChanging();
					this._TicketAllocationId = value;
					this.SendPropertyChanged("TicketAllocationId");
					this.OnTicketAllocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewAllocationStatusId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int NewAllocationStatusId
		{
			get
			{
				return this._NewAllocationStatusId;
			}
			set
			{
				if ((this._NewAllocationStatusId != value))
				{
					this.OnNewAllocationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._NewAllocationStatusId = value;
					this.SendPropertyChanged("NewAllocationStatusId");
					this.OnNewAllocationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewStatusUpdateRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public byte NewStatusUpdateRoleId
		{
			get
			{
				return this._NewStatusUpdateRoleId;
			}
			set
			{
				if ((this._NewStatusUpdateRoleId != value))
				{
					this.OnNewStatusUpdateRoleIdChanging(value);
					this.SendPropertyChanging();
					this._NewStatusUpdateRoleId = value;
					this.SendPropertyChanged("NewStatusUpdateRoleId");
					this.OnNewStatusUpdateRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewStatusUpdateUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Guid NewStatusUpdateUserId
		{
			get
			{
				return this._NewStatusUpdateUserId;
			}
			set
			{
				if ((this._NewStatusUpdateUserId != value))
				{
					this.OnNewStatusUpdateUserIdChanging(value);
					this.SendPropertyChanging();
					this._NewStatusUpdateUserId = value;
					this.SendPropertyChanged("NewStatusUpdateUserId");
					this.OnNewStatusUpdateUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousAllocationStatusId", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<int> PreviousAllocationStatusId
		{
			get
			{
				return this._PreviousAllocationStatusId;
			}
			set
			{
				if ((this._PreviousAllocationStatusId != value))
				{
					this.OnPreviousAllocationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._PreviousAllocationStatusId = value;
					this.SendPropertyChanged("PreviousAllocationStatusId");
					this.OnPreviousAllocationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousStatusUpdateRoleId", DbType="TinyInt")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<byte> PreviousStatusUpdateRoleId
		{
			get
			{
				return this._PreviousStatusUpdateRoleId;
			}
			set
			{
				if ((this._PreviousStatusUpdateRoleId != value))
				{
					this.OnPreviousStatusUpdateRoleIdChanging(value);
					this.SendPropertyChanging();
					this._PreviousStatusUpdateRoleId = value;
					this.SendPropertyChanged("PreviousStatusUpdateRoleId");
					this.OnPreviousStatusUpdateRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousStatusUpdateUserId", DbType="UniqueIdentifier")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Nullable<System.Guid> PreviousStatusUpdateUserId
		{
			get
			{
				return this._PreviousStatusUpdateUserId;
			}
			set
			{
				if ((this._PreviousStatusUpdateUserId != value))
				{
					this.OnPreviousStatusUpdateUserIdChanging(value);
					this.SendPropertyChanging();
					this._PreviousStatusUpdateUserId = value;
					this.SendPropertyChanged("PreviousStatusUpdateUserId");
					this.OnPreviousStatusUpdateUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public System.DateTime DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocationStatusHistory_TicketAllocations", Storage="_TicketAllocation", ThisKey="TicketAllocationId", OtherKey="Id", IsForeignKey=true)]
		public TicketAllocation TicketAllocation
		{
			get
			{
				return this._TicketAllocation.Entity;
			}
			set
			{
				TicketAllocation previousValue = this._TicketAllocation.Entity;
				if (((previousValue != value) 
							|| (this._TicketAllocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketAllocation.Entity = null;
						previousValue.TicketAllocationStatusHistories.Remove(this);
					}
					this._TicketAllocation.Entity = value;
					if ((value != null))
					{
						value.TicketAllocationStatusHistories.Add(this);
						this._TicketAllocationId = value.Id;
					}
					else
					{
						this._TicketAllocationId = default(int);
					}
					this.SendPropertyChanged("TicketAllocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._TicketAllocation = default(EntityRef<TicketAllocation>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketAllocatorRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketAllocatorRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntitySet<TicketAllocation> _TicketAllocations;
		
		private EntityRef<Role> _Role;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public TicketAllocatorRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketAllocatorRoles", Storage="_TicketAllocations", ThisKey="RoleId", OtherKey="AllocatorRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations;
			}
			set
			{
				this._TicketAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocatorRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.TicketAllocatorRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.TicketAllocatorRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocatorRole = this;
		}
		
		private void detach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocatorRole = null;
		}
		
		private void Initialize()
		{
			this._TicketAllocations = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations), new Action<TicketAllocation>(this.detach_TicketAllocations));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<TicketOwner> _TicketOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public TicketOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.TicketOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.TicketOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketOwners_TicketOwnerRoles", Storage="_TicketOwners", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<TicketOwner> TicketOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketOwners;
			}
			set
			{
				this._TicketOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketOwners(TicketOwner entity)
		{
			this.SendPropertyChanging();
			entity.TicketOwnerRole = this;
		}
		
		private void detach_TicketOwners(TicketOwner entity)
		{
			this.SendPropertyChanging();
			entity.TicketOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._TicketOwners = new EntitySet<TicketOwner>(new Action<TicketOwner>(this.attach_TicketOwners), new Action<TicketOwner>(this.detach_TicketOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketOwners")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketId;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private EntitySet<EventTicket> _EventTickets;
		
		private EntitySet<TicketAllocation> _TicketAllocations;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntityRef<TicketOwnerRole> _TicketOwnerRole;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public TicketOwner()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._RoleMember.HasLoadedOrAssignedValue || this._TicketOwnerRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventTickets_TicketOwners", Storage="_EventTickets", ThisKey="TicketId,OwnerRoleId,OwnerUserId", OtherKey="TicketId,EventOwnerRoleId,EventOwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<EventTicket> EventTickets
		{
			get
			{
				if ((this.serializing 
							&& (this._EventTickets.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EventTickets;
			}
			set
			{
				this._EventTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketOwners", Storage="_TicketAllocations", ThisKey="TicketId,OwnerRoleId,OwnerUserId", OtherKey="TicketId,PatronRoleId,PatronUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations;
			}
			set
			{
				this._TicketAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketOwners_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.TicketOwners.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.TicketOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketOwners_TicketOwnerRoles", Storage="_TicketOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TicketOwnerRole TicketOwnerRole
		{
			get
			{
				return this._TicketOwnerRole.Entity;
			}
			set
			{
				TicketOwnerRole previousValue = this._TicketOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketOwnerRole.Entity = null;
						previousValue.TicketOwners.Remove(this);
					}
					this._TicketOwnerRole.Entity = value;
					if ((value != null))
					{
						value.TicketOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("TicketOwnerRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventTickets(EventTicket entity)
		{
			this.SendPropertyChanging();
			entity.TicketOwner = this;
		}
		
		private void detach_EventTickets(EventTicket entity)
		{
			this.SendPropertyChanging();
			entity.TicketOwner = null;
		}
		
		private void attach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketOwner = this;
		}
		
		private void detach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketOwner = null;
		}
		
		private void Initialize()
		{
			this._EventTickets = new EntitySet<EventTicket>(new Action<EventTicket>(this.attach_EventTickets), new Action<EventTicket>(this.detach_EventTickets));
			this._TicketAllocations = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations), new Action<TicketAllocation>(this.detach_TicketAllocations));
			this._RoleMember = default(EntityRef<RoleMember>);
			this._TicketOwnerRole = default(EntityRef<TicketOwnerRole>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketPatronageRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketPatronageRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntitySet<TicketAllocation> _TicketAllocations;
		
		private EntityRef<Role> _Role;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public TicketPatronageRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketPatronageRoles", Storage="_TicketAllocations", ThisKey="RoleId", OtherKey="PatronRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations;
			}
			set
			{
				this._TicketAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketPatronageRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.TicketPatronageRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.TicketPatronageRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketPatronageRole = this;
		}
		
		private void detach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketPatronageRole = null;
		}
		
		private void Initialize()
		{
			this._TicketAllocations = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations), new Action<TicketAllocation>(this.detach_TicketAllocations));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketRequestorRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketRequestorRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<TicketRequest> _TicketRequests;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public TicketRequestorRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequestRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.TicketRequestorRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.TicketRequestorRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequests_TicketRequestRoles", Storage="_TicketRequests", ThisKey="RoleId", OtherKey="RequestorRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<TicketRequest> TicketRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketRequests;
			}
			set
			{
				this._TicketRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketRequests(TicketRequest entity)
		{
			this.SendPropertyChanging();
			entity.TicketRequestorRole = this;
		}
		
		private void detach_TicketRequests(TicketRequest entity)
		{
			this.SendPropertyChanging();
			entity.TicketRequestorRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._TicketRequests = new EntitySet<TicketRequest>(new Action<TicketRequest>(this.attach_TicketRequests), new Action<TicketRequest>(this.detach_TicketRequests));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketRequests")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TicketId;
		
		private byte _RequestorRoleId;
		
		private System.Guid _RequestorUserId;
		
		private int _EventId;
		
		private byte _EventOwnerRoleId;
		
		private System.Guid _EventOwnerUserId;
		
		private int _Amount;
		
		private EntityRef<EventTicket> _EventTicket;
		
		private EntityRef<TicketRequestorRole> _TicketRequestorRole;
		
		private EntityRef<UserRelationship> _UserRelationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnRequestorRoleIdChanging(byte value);
    partial void OnRequestorRoleIdChanged();
    partial void OnRequestorUserIdChanging(System.Guid value);
    partial void OnRequestorUserIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventOwnerRoleIdChanging(byte value);
    partial void OnEventOwnerRoleIdChanged();
    partial void OnEventOwnerUserIdChanging(System.Guid value);
    partial void OnEventOwnerUserIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public TicketRequest()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._EventTicket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte RequestorRoleId
		{
			get
			{
				return this._RequestorRoleId;
			}
			set
			{
				if ((this._RequestorRoleId != value))
				{
					if ((this._TicketRequestorRole.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestorRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RequestorRoleId = value;
					this.SendPropertyChanged("RequestorRoleId");
					this.OnRequestorRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid RequestorUserId
		{
			get
			{
				return this._RequestorUserId;
			}
			set
			{
				if ((this._RequestorUserId != value))
				{
					if (this._UserRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestorUserIdChanging(value);
					this.SendPropertyChanging();
					this._RequestorUserId = value;
					this.SendPropertyChanged("RequestorUserId");
					this.OnRequestorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._EventTicket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public byte EventOwnerRoleId
		{
			get
			{
				return this._EventOwnerRoleId;
			}
			set
			{
				if ((this._EventOwnerRoleId != value))
				{
					if ((this._EventTicket.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerRoleId = value;
					this.SendPropertyChanged("EventOwnerRoleId");
					this.OnEventOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Guid EventOwnerUserId
		{
			get
			{
				return this._EventOwnerUserId;
			}
			set
			{
				if ((this._EventOwnerUserId != value))
				{
					if ((this._EventTicket.HasLoadedOrAssignedValue || this._UserRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._EventOwnerUserId = value;
					this.SendPropertyChanged("EventOwnerUserId");
					this.OnEventOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequests_EventTickets", Storage="_EventTicket", ThisKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", OtherKey="EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", IsForeignKey=true)]
		public EventTicket EventTicket
		{
			get
			{
				return this._EventTicket.Entity;
			}
			set
			{
				EventTicket previousValue = this._EventTicket.Entity;
				if (((previousValue != value) 
							|| (this._EventTicket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventTicket.Entity = null;
						previousValue.TicketRequests.Remove(this);
					}
					this._EventTicket.Entity = value;
					if ((value != null))
					{
						value.TicketRequests.Add(this);
						this._EventId = value.EventId;
						this._EventOwnerRoleId = value.EventOwnerRoleId;
						this._EventOwnerUserId = value.EventOwnerUserId;
						this._TicketId = value.TicketId;
					}
					else
					{
						this._EventId = default(int);
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
						this._TicketId = default(int);
					}
					this.SendPropertyChanged("EventTicket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequests_TicketRequestRoles", Storage="_TicketRequestorRole", ThisKey="RequestorRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TicketRequestorRole TicketRequestorRole
		{
			get
			{
				return this._TicketRequestorRole.Entity;
			}
			set
			{
				TicketRequestorRole previousValue = this._TicketRequestorRole.Entity;
				if (((previousValue != value) 
							|| (this._TicketRequestorRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketRequestorRole.Entity = null;
						previousValue.TicketRequests.Remove(this);
					}
					this._TicketRequestorRole.Entity = value;
					if ((value != null))
					{
						value.TicketRequests.Add(this);
						this._RequestorRoleId = value.RoleId;
					}
					else
					{
						this._RequestorRoleId = default(byte);
					}
					this.SendPropertyChanged("TicketRequestorRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequests_UserRelationships", Storage="_UserRelationship", ThisKey="RequestorRoleId,RequestorUserId,EventOwnerRoleId,EventOwnerUserId", OtherKey="RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey=true)]
		public UserRelationship UserRelationship
		{
			get
			{
				return this._UserRelationship.Entity;
			}
			set
			{
				UserRelationship previousValue = this._UserRelationship.Entity;
				if (((previousValue != value) 
							|| (this._UserRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRelationship.Entity = null;
						previousValue.TicketRequests.Remove(this);
					}
					this._UserRelationship.Entity = value;
					if ((value != null))
					{
						value.TicketRequests.Add(this);
						this._RequestorRoleId = value.RoleId;
						this._RequestorUserId = value.UserId;
						this._EventOwnerRoleId = value.PartnerRoleId;
						this._EventOwnerUserId = value.PartnerUserId;
					}
					else
					{
						this._RequestorRoleId = default(byte);
						this._RequestorUserId = default(System.Guid);
						this._EventOwnerRoleId = default(byte);
						this._EventOwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("UserRelationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._EventTicket = default(EntityRef<EventTicket>);
			this._TicketRequestorRole = default(EntityRef<TicketRequestorRole>);
			this._UserRelationship = default(EntityRef<UserRelationship>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Ticket()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketStatusUpdaterRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TicketStatusUpdaterRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntitySet<TicketAllocation> _TicketAllocations;
		
		private EntityRef<Role> _Role;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public TicketStatusUpdaterRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_TicketStatusUpdaterRoles", Storage="_TicketAllocations", ThisKey="RoleId", OtherKey="LastStatusUpdateRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations;
			}
			set
			{
				this._TicketAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketStatusUpdaterRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.TicketStatusUpdaterRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.TicketStatusUpdaterRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketStatusUpdaterRole = this;
		}
		
		private void detach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketStatusUpdaterRole = null;
		}
		
		private void Initialize()
		{
			this._TicketAllocations = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations), new Action<TicketAllocation>(this.detach_TicketAllocations));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tokens")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<AccountToken> _AccountTokens;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(byte value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Token()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTokens_Tokens", Storage="_AccountTokens", ThisKey="Id", OtherKey="TokenId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<AccountToken> AccountTokens
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountTokens.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountTokens;
			}
			set
			{
				this._AccountTokens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountTokens(AccountToken entity)
		{
			this.SendPropertyChanging();
			entity.AccountTokens_Token = this;
		}
		
		private void detach_AccountTokens(AccountToken entity)
		{
			this.SendPropertyChanging();
			entity.AccountTokens_Token = null;
		}
		
		private void Initialize()
		{
			this._AccountTokens = new EntitySet<AccountToken>(new Action<AccountToken>(this.attach_AccountTokens), new Action<AccountToken>(this.detach_AccountTokens));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TwoFactorAccountOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TwoFactorAccountOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<AccountTwoFactorOwner> _AccountTwoFactorOwners;
		
		private EntitySet<TwoFactorAccountOwner> _TwoFactorAccountOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public TwoFactorAccountOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTwoFactorOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.TwoFactorAccountOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.TwoFactorAccountOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AccountTwoFactorOwners_AccountTwoFactorOwnerRoles", Storage="_AccountTwoFactorOwners", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<AccountTwoFactorOwner> AccountTwoFactorOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._AccountTwoFactorOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._AccountTwoFactorOwners;
			}
			set
			{
				this._AccountTwoFactorOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccountOwners_TwoFactorAccountOwnerRoles", Storage="_TwoFactorAccountOwners", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<TwoFactorAccountOwner> TwoFactorAccountOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._TwoFactorAccountOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TwoFactorAccountOwners;
			}
			set
			{
				this._TwoFactorAccountOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountTwoFactorOwners(AccountTwoFactorOwner entity)
		{
			this.SendPropertyChanging();
			entity.TwoFactorAccountOwnerRole = this;
		}
		
		private void detach_AccountTwoFactorOwners(AccountTwoFactorOwner entity)
		{
			this.SendPropertyChanging();
			entity.TwoFactorAccountOwnerRole = null;
		}
		
		private void attach_TwoFactorAccountOwners(TwoFactorAccountOwner entity)
		{
			this.SendPropertyChanging();
			entity.TwoFactorAccountOwnerRole = this;
		}
		
		private void detach_TwoFactorAccountOwners(TwoFactorAccountOwner entity)
		{
			this.SendPropertyChanging();
			entity.TwoFactorAccountOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._AccountTwoFactorOwners = new EntitySet<AccountTwoFactorOwner>(new Action<AccountTwoFactorOwner>(this.attach_AccountTwoFactorOwners), new Action<AccountTwoFactorOwner>(this.detach_AccountTwoFactorOwners));
			this._TwoFactorAccountOwners = new EntitySet<TwoFactorAccountOwner>(new Action<TwoFactorAccountOwner>(this.attach_TwoFactorAccountOwners), new Action<TwoFactorAccountOwner>(this.detach_TwoFactorAccountOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TwoFactorAccountOwners")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TwoFactorAccountOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private byte _TargetRoleId;
		
		private EntityRef<AccountOwnerRole> _AccountOwnerRole;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntityRef<TwoFactorAccountOwnerRole> _TwoFactorAccountOwnerRole;
		
		private EntitySet<TwoFactorAccount> _TwoFactorAccounts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnTargetRoleIdChanging(byte value);
    partial void OnTargetRoleIdChanged();
    #endregion
		
		public TwoFactorAccountOwner()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if (((this._AccountOwnerRole.HasLoadedOrAssignedValue || this._RoleMember.HasLoadedOrAssignedValue) 
								|| this._TwoFactorAccountOwnerRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte TargetRoleId
		{
			get
			{
				return this._TargetRoleId;
			}
			set
			{
				if ((this._TargetRoleId != value))
				{
					this.OnTargetRoleIdChanging(value);
					this.SendPropertyChanging();
					this._TargetRoleId = value;
					this.SendPropertyChanged("TargetRoleId");
					this.OnTargetRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccountOwners_AccountOwnerRoles", Storage="_AccountOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public AccountOwnerRole AccountOwnerRole
		{
			get
			{
				return this._AccountOwnerRole.Entity;
			}
			set
			{
				AccountOwnerRole previousValue = this._AccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._AccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountOwnerRole.Entity = null;
						previousValue.TwoFactorAccountOwners.Remove(this);
					}
					this._AccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.TwoFactorAccountOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("AccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccountOwners_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.TwoFactorAccountOwners.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.TwoFactorAccountOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccountOwners_TwoFactorAccountOwnerRoles", Storage="_TwoFactorAccountOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public TwoFactorAccountOwnerRole TwoFactorAccountOwnerRole
		{
			get
			{
				return this._TwoFactorAccountOwnerRole.Entity;
			}
			set
			{
				TwoFactorAccountOwnerRole previousValue = this._TwoFactorAccountOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._TwoFactorAccountOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TwoFactorAccountOwnerRole.Entity = null;
						previousValue.TwoFactorAccountOwners.Remove(this);
					}
					this._TwoFactorAccountOwnerRole.Entity = value;
					if ((value != null))
					{
						value.TwoFactorAccountOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("TwoFactorAccountOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccounts_TwoFactorAccountOwners", Storage="_TwoFactorAccounts", ThisKey="OwnerRoleId,OwnerUserId,TargetRoleId", OtherKey="TwoFactorOwnerRoleId,TwoFactorOwnerUserId,OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<TwoFactorAccount> TwoFactorAccounts
		{
			get
			{
				if ((this.serializing 
							&& (this._TwoFactorAccounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TwoFactorAccounts;
			}
			set
			{
				this._TwoFactorAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TwoFactorAccounts(TwoFactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.TwoFactorAccountOwner = this;
		}
		
		private void detach_TwoFactorAccounts(TwoFactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.TwoFactorAccountOwner = null;
		}
		
		private void Initialize()
		{
			this._AccountOwnerRole = default(EntityRef<AccountOwnerRole>);
			this._RoleMember = default(EntityRef<RoleMember>);
			this._TwoFactorAccountOwnerRole = default(EntityRef<TwoFactorAccountOwnerRole>);
			this._TwoFactorAccounts = new EntitySet<TwoFactorAccount>(new Action<TwoFactorAccount>(this.attach_TwoFactorAccounts), new Action<TwoFactorAccount>(this.detach_TwoFactorAccounts));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TwoFactorAccounts")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TwoFactorAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private byte _TwoFactorOwnerRoleId;
		
		private System.Guid _TwoFactorOwnerUserId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<TwoFactorAccountOwner> _TwoFactorAccountOwner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnTwoFactorOwnerRoleIdChanging(byte value);
    partial void OnTwoFactorOwnerRoleIdChanged();
    partial void OnTwoFactorOwnerUserIdChanging(System.Guid value);
    partial void OnTwoFactorOwnerUserIdChanged();
    #endregion
		
		public TwoFactorAccount()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._Account.HasLoadedOrAssignedValue || this._TwoFactorAccountOwner.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorOwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte TwoFactorOwnerRoleId
		{
			get
			{
				return this._TwoFactorOwnerRoleId;
			}
			set
			{
				if ((this._TwoFactorOwnerRoleId != value))
				{
					if (this._TwoFactorAccountOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTwoFactorOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorOwnerRoleId = value;
					this.SendPropertyChanged("TwoFactorOwnerRoleId");
					this.OnTwoFactorOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorOwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid TwoFactorOwnerUserId
		{
			get
			{
				return this._TwoFactorOwnerUserId;
			}
			set
			{
				if ((this._TwoFactorOwnerUserId != value))
				{
					if (this._TwoFactorAccountOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTwoFactorOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorOwnerUserId = value;
					this.SendPropertyChanged("TwoFactorOwnerUserId");
					this.OnTwoFactorOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccounts_Accounts", Storage="_Account", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="OwnerRoleId,OwnerUserId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.TwoFactorAccounts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.TwoFactorAccounts.Add(this);
						this._OwnerRoleId = value.OwnerRoleId;
						this._OwnerUserId = value.OwnerUserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TwoFactorAccounts_TwoFactorAccountOwners", Storage="_TwoFactorAccountOwner", ThisKey="TwoFactorOwnerRoleId,TwoFactorOwnerUserId,OwnerRoleId", OtherKey="OwnerRoleId,OwnerUserId,TargetRoleId", IsForeignKey=true)]
		public TwoFactorAccountOwner TwoFactorAccountOwner
		{
			get
			{
				return this._TwoFactorAccountOwner.Entity;
			}
			set
			{
				TwoFactorAccountOwner previousValue = this._TwoFactorAccountOwner.Entity;
				if (((previousValue != value) 
							|| (this._TwoFactorAccountOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TwoFactorAccountOwner.Entity = null;
						previousValue.TwoFactorAccounts.Remove(this);
					}
					this._TwoFactorAccountOwner.Entity = value;
					if ((value != null))
					{
						value.TwoFactorAccounts.Add(this);
						this._TwoFactorOwnerRoleId = value.OwnerRoleId;
						this._TwoFactorOwnerUserId = value.OwnerUserId;
						this._OwnerRoleId = value.TargetRoleId;
					}
					else
					{
						this._TwoFactorOwnerRoleId = default(byte);
						this._TwoFactorOwnerUserId = default(System.Guid);
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("TwoFactorAccountOwner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			this._TwoFactorAccountOwner = default(EntityRef<TwoFactorAccountOwner>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAllocationStatus")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserAllocationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private int _AllocationStatusId;
		
		private EntitySet<EventAllocationStatus> _EventAllocationStatus;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntityRef<UserAllocationStatusOwnerRole> _UserAllocationStatusOwnerRole;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnAllocationStatusIdChanging(int value);
    partial void OnAllocationStatusIdChanged();
    #endregion
		
		public UserAllocationStatus()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._RoleMember.HasLoadedOrAssignedValue || this._UserAllocationStatusOwnerRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllocationStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int AllocationStatusId
		{
			get
			{
				return this._AllocationStatusId;
			}
			set
			{
				if ((this._AllocationStatusId != value))
				{
					this.OnAllocationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AllocationStatusId = value;
					this.SendPropertyChanged("AllocationStatusId");
					this.OnAllocationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventAllocationStatus_UserAllocationStatus", Storage="_EventAllocationStatus", ThisKey="OwnerRoleId,OwnerUserId,AllocationStatusId", OtherKey="EventOwnerRoleId,EventOwnerUserId,AllocationStatusId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<EventAllocationStatus> EventAllocationStatus
		{
			get
			{
				if ((this.serializing 
							&& (this._EventAllocationStatus.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EventAllocationStatus;
			}
			set
			{
				this._EventAllocationStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserAllocationStatus_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.UserAllocationStatus.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.UserAllocationStatus.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserAllocationStatus_UserAllocationStatusOwnerRoles", Storage="_UserAllocationStatusOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public UserAllocationStatusOwnerRole UserAllocationStatusOwnerRole
		{
			get
			{
				return this._UserAllocationStatusOwnerRole.Entity;
			}
			set
			{
				UserAllocationStatusOwnerRole previousValue = this._UserAllocationStatusOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._UserAllocationStatusOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAllocationStatusOwnerRole.Entity = null;
						previousValue.UserAllocationStatus.Remove(this);
					}
					this._UserAllocationStatusOwnerRole.Entity = value;
					if ((value != null))
					{
						value.UserAllocationStatus.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("UserAllocationStatusOwnerRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventAllocationStatus(EventAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.UserAllocationStatus = this;
		}
		
		private void detach_EventAllocationStatus(EventAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.UserAllocationStatus = null;
		}
		
		private void Initialize()
		{
			this._EventAllocationStatus = new EntitySet<EventAllocationStatus>(new Action<EventAllocationStatus>(this.attach_EventAllocationStatus), new Action<EventAllocationStatus>(this.detach_EventAllocationStatus));
			this._RoleMember = default(EntityRef<RoleMember>);
			this._UserAllocationStatusOwnerRole = default(EntityRef<UserAllocationStatusOwnerRole>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAllocationStatusOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserAllocationStatusOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntitySet<UserAllocationStatus> _UserAllocationStatus;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserAllocationStatusOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserAllocationStatus_UserAllocationStatusOwnerRoles", Storage="_UserAllocationStatus", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<UserAllocationStatus> UserAllocationStatus
		{
			get
			{
				if ((this.serializing 
							&& (this._UserAllocationStatus.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserAllocationStatus;
			}
			set
			{
				this._UserAllocationStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAllocationStatus(UserAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.UserAllocationStatusOwnerRole = this;
		}
		
		private void detach_UserAllocationStatus(UserAllocationStatus entity)
		{
			this.SendPropertyChanging();
			entity.UserAllocationStatusOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._UserAllocationStatus = new EntitySet<UserAllocationStatus>(new Action<UserAllocationStatus>(this.attach_UserAllocationStatus), new Action<UserAllocationStatus>(this.detach_UserAllocationStatus));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEmailAddresses")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserEmailAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EmailAddress;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private bool _Confirmed;
		
		private EntityRef<RoleMember> _RoleMember;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnConfirmedChanging(bool value);
    partial void OnConfirmedChanged();
    #endregion
		
		public UserEmailAddress()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="emailAddress", Storage="_EmailAddress", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public bool Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserEmailAddresses_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.UserEmailAddresses.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.UserEmailAddresses.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._RoleMember = default(EntityRef<RoleMember>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRelationships")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class UserRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private System.Guid _UserId;
		
		private byte _PartnerRoleId;
		
		private System.Guid _PartnerUserId;
		
		private bool _Active;
		
		private EntitySet<DivisionMember> _DivisionMembers;
		
		private EntitySet<EventFieldValue> _EventFieldValues;
		
		private EntitySet<ExternalAccount> _ExternalAccounts;
		
		private EntitySet<TicketAllocation> _TicketAllocations;
		
		private EntitySet<TicketAllocation> _TicketAllocations_OwnerPatronRelationships;
		
		private EntitySet<TicketAllocation> _TicketAllocations_OwnerStatusUpdaterRelationships;
		
		private EntitySet<TicketRequest> _TicketRequests;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntityRef<RoleMember> _UserRelationships_RoleMember;
		
		private EntityRef<RoleRelationship> _RoleRelationship;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPartnerRoleIdChanging(byte value);
    partial void OnPartnerRoleIdChanged();
    partial void OnPartnerUserIdChanging(System.Guid value);
    partial void OnPartnerUserIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public UserRelationship()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if ((this._UserRelationships_RoleMember.HasLoadedOrAssignedValue || this._RoleRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserRelationships_RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public byte PartnerRoleId
		{
			get
			{
				return this._PartnerRoleId;
			}
			set
			{
				if ((this._PartnerRoleId != value))
				{
					if ((this._RoleMember.HasLoadedOrAssignedValue || this._RoleRelationship.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._PartnerRoleId = value;
					this.SendPropertyChanged("PartnerRoleId");
					this.OnPartnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Guid PartnerUserId
		{
			get
			{
				return this._PartnerUserId;
			}
			set
			{
				if ((this._PartnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._PartnerUserId = value;
					this.SendPropertyChanged("PartnerUserId");
					this.OnPartnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DivisionMembers_MemberRelationships", Storage="_DivisionMembers", ThisKey="RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey="DivisionOwnerRoleId,DivisionOwnnerUserId,MemberRoleId,MemberUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<DivisionMember> DivisionMembers
		{
			get
			{
				if ((this.serializing 
							&& (this._DivisionMembers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._DivisionMembers;
			}
			set
			{
				this._DivisionMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventFieldValues_UserRelationships", Storage="_EventFieldValues", ThisKey="RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey="EventOwnerRoleId,EventOwnerUserId,SubmittingRoleId,SubmittingUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<EventFieldValue> EventFieldValues
		{
			get
			{
				if ((this.serializing 
							&& (this._EventFieldValues.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EventFieldValues;
			}
			set
			{
				this._EventFieldValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ExternalAccounts_UserRelationships", Storage="_ExternalAccounts", ThisKey="RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey="ProviderOwnerRoleId,ProviderOwnerUserId,OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<ExternalAccount> ExternalAccounts
		{
			get
			{
				if ((this.serializing 
							&& (this._ExternalAccounts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ExternalAccounts;
			}
			set
			{
				this._ExternalAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_OwnerAllocatorRelationships", Storage="_TicketAllocations", ThisKey="RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey="EventOwnerRoleId,EventOwnerUserId,AllocatorRoleId,AllocatorUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations;
			}
			set
			{
				this._TicketAllocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_OwnerPatronRelationships", Storage="_TicketAllocations_OwnerPatronRelationships", ThisKey="RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey="AllocatorRoleId,AllocatorUserId,PatronRoleId,PatronUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations_OwnerPatronRelationships
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations_OwnerPatronRelationships.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations_OwnerPatronRelationships;
			}
			set
			{
				this._TicketAllocations_OwnerPatronRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketAllocations_OwnerStatusUpdaterRelationships", Storage="_TicketAllocations_OwnerStatusUpdaterRelationships", ThisKey="RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey="EventOwnerRoleId,EventOwnerUserId,LastStatusUpdateRoleId,LastStatusUpdateUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<TicketAllocation> TicketAllocations_OwnerStatusUpdaterRelationships
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketAllocations_OwnerStatusUpdaterRelationships.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketAllocations_OwnerStatusUpdaterRelationships;
			}
			set
			{
				this._TicketAllocations_OwnerStatusUpdaterRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TicketRequests_UserRelationships", Storage="_TicketRequests", ThisKey="RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey="RequestorRoleId,RequestorUserId,EventOwnerRoleId,EventOwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<TicketRequest> TicketRequests
		{
			get
			{
				if ((this.serializing 
							&& (this._TicketRequests.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TicketRequests;
			}
			set
			{
				this._TicketRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRelationships_PartnerRoleMembers", Storage="_RoleMember", ThisKey="PartnerRoleId,PartnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.UserRelationships.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.UserRelationships.Add(this);
						this._PartnerRoleId = value.RoleId;
						this._PartnerUserId = value.UserId;
					}
					else
					{
						this._PartnerRoleId = default(byte);
						this._PartnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRelationships_RoleMembers", Storage="_UserRelationships_RoleMember", ThisKey="RoleId,UserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember UserRelationships_RoleMember
		{
			get
			{
				return this._UserRelationships_RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._UserRelationships_RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._UserRelationships_RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRelationships_RoleMember.Entity = null;
						previousValue.UserRelationships_RoleMembers.Remove(this);
					}
					this._UserRelationships_RoleMember.Entity = value;
					if ((value != null))
					{
						value.UserRelationships_RoleMembers.Add(this);
						this._RoleId = value.RoleId;
						this._UserId = value.UserId;
					}
					else
					{
						this._RoleId = default(byte);
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("UserRelationships_RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRelationships_RoleRelationships", Storage="_RoleRelationship", ThisKey="RoleId,PartnerRoleId", OtherKey="RoleId,PartnerRoleId", IsForeignKey=true)]
		public RoleRelationship RoleRelationship
		{
			get
			{
				return this._RoleRelationship.Entity;
			}
			set
			{
				RoleRelationship previousValue = this._RoleRelationship.Entity;
				if (((previousValue != value) 
							|| (this._RoleRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleRelationship.Entity = null;
						previousValue.UserRelationships.Remove(this);
					}
					this._RoleRelationship.Entity = value;
					if ((value != null))
					{
						value.UserRelationships.Add(this);
						this._RoleId = value.RoleId;
						this._PartnerRoleId = value.PartnerRoleId;
					}
					else
					{
						this._RoleId = default(byte);
						this._PartnerRoleId = default(byte);
					}
					this.SendPropertyChanged("RoleRelationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DivisionMembers(DivisionMember entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = this;
		}
		
		private void detach_DivisionMembers(DivisionMember entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = null;
		}
		
		private void attach_EventFieldValues(EventFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = this;
		}
		
		private void detach_EventFieldValues(EventFieldValue entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = null;
		}
		
		private void attach_ExternalAccounts(ExternalAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = this;
		}
		
		private void detach_ExternalAccounts(ExternalAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = null;
		}
		
		private void attach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = this;
		}
		
		private void detach_TicketAllocations(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = null;
		}
		
		private void attach_TicketAllocations_OwnerPatronRelationships(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocations_OwnerPatronRelationship = this;
		}
		
		private void detach_TicketAllocations_OwnerPatronRelationships(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocations_OwnerPatronRelationship = null;
		}
		
		private void attach_TicketAllocations_OwnerStatusUpdaterRelationships(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocations_OwnerStatusUpdaterRelationship = this;
		}
		
		private void detach_TicketAllocations_OwnerStatusUpdaterRelationships(TicketAllocation entity)
		{
			this.SendPropertyChanging();
			entity.TicketAllocations_OwnerStatusUpdaterRelationship = null;
		}
		
		private void attach_TicketRequests(TicketRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = this;
		}
		
		private void detach_TicketRequests(TicketRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserRelationship = null;
		}
		
		private void Initialize()
		{
			this._DivisionMembers = new EntitySet<DivisionMember>(new Action<DivisionMember>(this.attach_DivisionMembers), new Action<DivisionMember>(this.detach_DivisionMembers));
			this._EventFieldValues = new EntitySet<EventFieldValue>(new Action<EventFieldValue>(this.attach_EventFieldValues), new Action<EventFieldValue>(this.detach_EventFieldValues));
			this._ExternalAccounts = new EntitySet<ExternalAccount>(new Action<ExternalAccount>(this.attach_ExternalAccounts), new Action<ExternalAccount>(this.detach_ExternalAccounts));
			this._TicketAllocations = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations), new Action<TicketAllocation>(this.detach_TicketAllocations));
			this._TicketAllocations_OwnerPatronRelationships = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations_OwnerPatronRelationships), new Action<TicketAllocation>(this.detach_TicketAllocations_OwnerPatronRelationships));
			this._TicketAllocations_OwnerStatusUpdaterRelationships = new EntitySet<TicketAllocation>(new Action<TicketAllocation>(this.attach_TicketAllocations_OwnerStatusUpdaterRelationships), new Action<TicketAllocation>(this.detach_TicketAllocations_OwnerStatusUpdaterRelationships));
			this._TicketRequests = new EntitySet<TicketRequest>(new Action<TicketRequest>(this.attach_TicketRequests), new Action<TicketRequest>(this.detach_TicketRequests));
			this._RoleMember = default(EntityRef<RoleMember>);
			this._UserRelationships_RoleMember = default(EntityRef<RoleMember>);
			this._RoleRelationship = default(EntityRef<RoleRelationship>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UserName;
		
		private bool _Active;
		
		private EntitySet<RoleMember> _RoleMembers;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public User()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UserRole_User", Storage="_RoleMembers", ThisKey="Id", OtherKey="UserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<RoleMember> RoleMembers
		{
			get
			{
				if ((this.serializing 
							&& (this._RoleMembers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RoleMembers;
			}
			set
			{
				this._RoleMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleMembers(RoleMember entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RoleMembers(RoleMember entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void Initialize()
		{
			this._RoleMembers = new EntitySet<RoleMember>(new Action<RoleMember>(this.attach_RoleMembers), new Action<RoleMember>(this.detach_RoleMembers));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="id.Users")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Id_User
	{
		
		private System.Guid _Id;
		
		private string _UserName;
		
		private string _EmailAddress;
		
		private byte _RoleId;
		
		private string _RoleName;
		
		private string _PasswordHash;
		
		private bool _EmailVerified;
		
		private string _SecurityStamp;
		
		private bool _TwoFactorEnabled;
		
		private bool _LockoutEnabled;
		
		private byte _FailedAccessCount;
		
		private System.Nullable<System.DateTime> _UnlockDate;
		
		private bool _Active;
		
		public Id_User()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this._EmailAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this._RoleId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this._PasswordHash = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailVerified", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public bool EmailVerified
		{
			get
			{
				return this._EmailVerified;
			}
			set
			{
				if ((this._EmailVerified != value))
				{
					this._EmailVerified = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this._SecurityStamp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this._TwoFactorEnabled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this._LockoutEnabled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedAccessCount", DbType="TinyInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public byte FailedAccessCount
		{
			get
			{
				return this._FailedAccessCount;
			}
			set
			{
				if ((this._FailedAccessCount != value))
				{
					this._FailedAccessCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnlockDate", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public System.Nullable<System.DateTime> UnlockDate
		{
			get
			{
				return this._UnlockDate;
			}
			set
			{
				if ((this._UnlockDate != value))
				{
					this._UnlockDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VenueOwnerRoles")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class VenueOwnerRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<VenueOwner> _VenueOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    #endregion
		
		public VenueOwnerRole()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwnerRoles_Roles", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.VenueOwnerRole = null;
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.VenueOwnerRole = this;
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(byte);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwners_VenueOwnerRoles", Storage="_VenueOwners", ThisKey="RoleId", OtherKey="OwnerRoleId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2, EmitDefaultValue=false)]
		public EntitySet<VenueOwner> VenueOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._VenueOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._VenueOwners;
			}
			set
			{
				this._VenueOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VenueOwners(VenueOwner entity)
		{
			this.SendPropertyChanging();
			entity.VenueOwnerRole = this;
		}
		
		private void detach_VenueOwners(VenueOwner entity)
		{
			this.SendPropertyChanging();
			entity.VenueOwnerRole = null;
		}
		
		private void Initialize()
		{
			this._Role = default(EntityRef<Role>);
			this._VenueOwners = new EntitySet<VenueOwner>(new Action<VenueOwner>(this.attach_VenueOwners), new Action<VenueOwner>(this.detach_VenueOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VenueOwners")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class VenueOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VenueId;
		
		private byte _OwnerRoleId;
		
		private System.Guid _OwnerUserId;
		
		private EntitySet<EventVenue> _EventVenues;
		
		private EntityRef<RoleMember> _RoleMember;
		
		private EntityRef<VenueOwnerRole> _VenueOwnerRole;
		
		private EntityRef<Venue> _Venue;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVenueIdChanging(int value);
    partial void OnVenueIdChanged();
    partial void OnOwnerRoleIdChanging(byte value);
    partial void OnOwnerRoleIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public VenueOwner()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int VenueId
		{
			get
			{
				return this._VenueId;
			}
			set
			{
				if ((this._VenueId != value))
				{
					if (this._Venue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIdChanging(value);
					this.SendPropertyChanging();
					this._VenueId = value;
					this.SendPropertyChanged("VenueId");
					this.OnVenueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerRoleId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public byte OwnerRoleId
		{
			get
			{
				return this._OwnerRoleId;
			}
			set
			{
				if ((this._OwnerRoleId != value))
				{
					if ((this._RoleMember.HasLoadedOrAssignedValue || this._VenueOwnerRole.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerRoleIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerRoleId = value;
					this.SendPropertyChanged("OwnerRoleId");
					this.OnOwnerRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._RoleMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_EventVenues_VenueOwners", Storage="_EventVenues", ThisKey="VenueId,OwnerRoleId,OwnerUserId", OtherKey="VenueId,OwnerRoleId,OwnerUserId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<EventVenue> EventVenues
		{
			get
			{
				if ((this.serializing 
							&& (this._EventVenues.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._EventVenues;
			}
			set
			{
				this._EventVenues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwners_RoleMembers", Storage="_RoleMember", ThisKey="OwnerRoleId,OwnerUserId", OtherKey="RoleId,UserId", IsForeignKey=true)]
		public RoleMember RoleMember
		{
			get
			{
				return this._RoleMember.Entity;
			}
			set
			{
				RoleMember previousValue = this._RoleMember.Entity;
				if (((previousValue != value) 
							|| (this._RoleMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMember.Entity = null;
						previousValue.VenueOwners.Remove(this);
					}
					this._RoleMember.Entity = value;
					if ((value != null))
					{
						value.VenueOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("RoleMember");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwners_VenueOwnerRoles", Storage="_VenueOwnerRole", ThisKey="OwnerRoleId", OtherKey="RoleId", IsForeignKey=true)]
		public VenueOwnerRole VenueOwnerRole
		{
			get
			{
				return this._VenueOwnerRole.Entity;
			}
			set
			{
				VenueOwnerRole previousValue = this._VenueOwnerRole.Entity;
				if (((previousValue != value) 
							|| (this._VenueOwnerRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VenueOwnerRole.Entity = null;
						previousValue.VenueOwners.Remove(this);
					}
					this._VenueOwnerRole.Entity = value;
					if ((value != null))
					{
						value.VenueOwners.Add(this);
						this._OwnerRoleId = value.RoleId;
					}
					else
					{
						this._OwnerRoleId = default(byte);
					}
					this.SendPropertyChanged("VenueOwnerRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwners_Venues", Storage="_Venue", ThisKey="VenueId", OtherKey="Id", IsForeignKey=true)]
		public Venue Venue
		{
			get
			{
				return this._Venue.Entity;
			}
			set
			{
				Venue previousValue = this._Venue.Entity;
				if (((previousValue != value) 
							|| (this._Venue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue.Entity = null;
						previousValue.VenueOwners.Remove(this);
					}
					this._Venue.Entity = value;
					if ((value != null))
					{
						value.VenueOwners.Add(this);
						this._VenueId = value.Id;
					}
					else
					{
						this._VenueId = default(int);
					}
					this.SendPropertyChanged("Venue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventVenues(EventVenue entity)
		{
			this.SendPropertyChanging();
			entity.VenueOwner = this;
		}
		
		private void detach_EventVenues(EventVenue entity)
		{
			this.SendPropertyChanging();
			entity.VenueOwner = null;
		}
		
		private void Initialize()
		{
			this._EventVenues = new EntitySet<EventVenue>(new Action<EventVenue>(this.attach_EventVenues), new Action<EventVenue>(this.detach_EventVenues));
			this._RoleMember = default(EntityRef<RoleMember>);
			this._VenueOwnerRole = default(EntityRef<VenueOwnerRole>);
			this._Venue = default(EntityRef<Venue>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Venues")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Venue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<VenueOwner> _VenueOwners;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Venue()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_VenueOwners_Venues", Storage="_VenueOwners", ThisKey="Id", OtherKey="VenueId", DeleteRule="NO ACTION")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<VenueOwner> VenueOwners
		{
			get
			{
				if ((this.serializing 
							&& (this._VenueOwners.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._VenueOwners;
			}
			set
			{
				this._VenueOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VenueOwners(VenueOwner entity)
		{
			this.SendPropertyChanging();
			entity.Venue = this;
		}
		
		private void detach_VenueOwners(VenueOwner entity)
		{
			this.SendPropertyChanging();
			entity.Venue = null;
		}
		
		private void Initialize()
		{
			this._VenueOwners = new EntitySet<VenueOwner>(new Action<VenueOwner>(this.attach_VenueOwners), new Action<VenueOwner>(this.detach_VenueOwners));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
