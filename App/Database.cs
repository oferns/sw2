
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App
{
    using System;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Runtime.Serialization;

    public partial class SWorks : DataContext
    {
        private static readonly MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions

        partial void OnCreated();

        partial void InsertDivisionOwnerRoles(DivisionOwnerRoles instance);

        partial void UpdateDivisionOwnerRoles(DivisionOwnerRoles instance);

        partial void DeleteDivisionOwnerRoles(DivisionOwnerRoles instance);

        partial void InsertDivisions(Divisions instance);

        partial void UpdateDivisions(Divisions instance);

        partial void DeleteDivisions(Divisions instance);

        partial void InsertDomainOwnerRoles(DomainOwnerRoles instance);

        partial void UpdateDomainOwnerRoles(DomainOwnerRoles instance);

        partial void DeleteDomainOwnerRoles(DomainOwnerRoles instance);

        partial void InsertDomains(Domains instance);

        partial void UpdateDomains(Domains instance);

        partial void DeleteDomains(Domains instance);

        partial void InsertEventFields(EventFields instance);

        partial void UpdateEventFields(EventFields instance);

        partial void DeleteEventFields(EventFields instance);

        partial void InsertEventFieldValues(EventFieldValues instance);

        partial void UpdateEventFieldValues(EventFieldValues instance);

        partial void DeleteEventFieldValues(EventFieldValues instance);

        partial void InsertEventOwnerRoles(EventOwnerRoles instance);

        partial void UpdateEventOwnerRoles(EventOwnerRoles instance);

        partial void DeleteEventOwnerRoles(EventOwnerRoles instance);

        partial void InsertEvents(Events instance);

        partial void UpdateEvents(Events instance);

        partial void DeleteEvents(Events instance);

        partial void InsertEventTickets(EventTickets instance);

        partial void UpdateEventTickets(EventTickets instance);

        partial void DeleteEventTickets(EventTickets instance);

        partial void InsertEventVenues(EventVenues instance);

        partial void UpdateEventVenues(EventVenues instance);

        partial void DeleteEventVenues(EventVenues instance);

        partial void InsertFieldOwnerRoles(FieldOwnerRoles instance);

        partial void UpdateFieldOwnerRoles(FieldOwnerRoles instance);

        partial void DeleteFieldOwnerRoles(FieldOwnerRoles instance);

        partial void InsertFields(Fields instance);

        partial void UpdateFields(Fields instance);

        partial void DeleteFields(Fields instance);

        partial void InsertFieldTypes(FieldTypes instance);

        partial void UpdateFieldTypes(FieldTypes instance);

        partial void DeleteFieldTypes(FieldTypes instance);

        partial void InsertLocalAccountRoles(LocalAccountRoles instance);

        partial void UpdateLocalAccountRoles(LocalAccountRoles instance);

        partial void DeleteLocalAccountRoles(LocalAccountRoles instance);

        partial void InsertLocalAccounts(LocalAccounts instance);

        partial void UpdateLocalAccounts(LocalAccounts instance);

        partial void DeleteLocalAccounts(LocalAccounts instance);

        partial void InsertResourceOverrides(ResourceOverrides instance);

        partial void UpdateResourceOverrides(ResourceOverrides instance);

        partial void DeleteResourceOverrides(ResourceOverrides instance);

        partial void InsertResourceOverridesOwnerRoles(ResourceOverridesOwnerRoles instance);

        partial void UpdateResourceOverridesOwnerRoles(ResourceOverridesOwnerRoles instance);

        partial void DeleteResourceOverridesOwnerRoles(ResourceOverridesOwnerRoles instance);

        partial void InsertResources(Resources instance);

        partial void UpdateResources(Resources instance);

        partial void DeleteResources(Resources instance);

        partial void InsertRoleRelationships(RoleRelationships instance);

        partial void UpdateRoleRelationships(RoleRelationships instance);

        partial void DeleteRoleRelationships(RoleRelationships instance);

        partial void InsertRoles(Roles instance);

        partial void UpdateRoles(Roles instance);

        partial void DeleteRoles(Roles instance);

        partial void InsertTicketAllocationRoles(TicketAllocationRoles instance);

        partial void UpdateTicketAllocationRoles(TicketAllocationRoles instance);

        partial void DeleteTicketAllocationRoles(TicketAllocationRoles instance);

        partial void InsertTicketAllocations(TicketAllocations instance);

        partial void UpdateTicketAllocations(TicketAllocations instance);

        partial void DeleteTicketAllocations(TicketAllocations instance);

        partial void InsertTicketOwnerRoles(TicketOwnerRoles instance);

        partial void UpdateTicketOwnerRoles(TicketOwnerRoles instance);

        partial void DeleteTicketOwnerRoles(TicketOwnerRoles instance);

        partial void InsertTicketOwners(TicketOwners instance);

        partial void UpdateTicketOwners(TicketOwners instance);

        partial void DeleteTicketOwners(TicketOwners instance);

        partial void InsertTicketPatronageRoles(TicketPatronageRoles instance);

        partial void UpdateTicketPatronageRoles(TicketPatronageRoles instance);

        partial void DeleteTicketPatronageRoles(TicketPatronageRoles instance);

        partial void InsertTicketRequestorRoles(TicketRequestorRoles instance);

        partial void UpdateTicketRequestorRoles(TicketRequestorRoles instance);

        partial void DeleteTicketRequestorRoles(TicketRequestorRoles instance);

        partial void InsertTicketRequests(TicketRequests instance);

        partial void UpdateTicketRequests(TicketRequests instance);

        partial void DeleteTicketRequests(TicketRequests instance);

        partial void InsertTickets(Tickets instance);

        partial void UpdateTickets(Tickets instance);

        partial void DeleteTickets(Tickets instance);

        partial void InsertUserRelationships(UserRelationships instance);

        partial void UpdateUserRelationships(UserRelationships instance);

        partial void DeleteUserRelationships(UserRelationships instance);

        partial void InsertUserRoles(UserRoles instance);

        partial void UpdateUserRoles(UserRoles instance);

        partial void DeleteUserRoles(UserRoles instance);

        partial void InsertUsers(Users instance);

        partial void UpdateUsers(Users instance);

        partial void DeleteUsers(Users instance);

        partial void InsertVenueOwnerRoles(VenueOwnerRoles instance);

        partial void UpdateVenueOwnerRoles(VenueOwnerRoles instance);

        partial void DeleteVenueOwnerRoles(VenueOwnerRoles instance);

        partial void InsertVenueOwners(VenueOwners instance);

        partial void UpdateVenueOwners(VenueOwners instance);

        partial void DeleteVenueOwners(VenueOwners instance);

        partial void InsertVenues(Venues instance);

        partial void UpdateVenues(Venues instance);

        partial void DeleteVenues(Venues instance);

        #endregion

        public SWorks(string connection)
            :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public SWorks(IDbConnection connection)
            :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public SWorks(string connection, MappingSource mappingSource)
            :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public SWorks(IDbConnection connection, MappingSource mappingSource)
            :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public Table<DivisionOwnerRoles> DivisionOwnerRoles
        {
            get
            {
                return GetTable<DivisionOwnerRoles>();
            }
        }

        public Table<Divisions> Divisions
        {
            get
            {
                return GetTable<Divisions>();
            }
        }

        public Table<DomainOwnerRoles> DomainOwnerRoles
        {
            get
            {
                return GetTable<DomainOwnerRoles>();
            }
        }

        public Table<Domains> Domains
        {
            get
            {
                return GetTable<Domains>();
            }
        }

        public Table<EventFields> EventFields
        {
            get
            {
                return GetTable<EventFields>();
            }
        }

        public Table<EventFieldValues> EventFieldValues
        {
            get
            {
                return GetTable<EventFieldValues>();
            }
        }

        public Table<EventOwnerRoles> EventOwnerRoles
        {
            get
            {
                return GetTable<EventOwnerRoles>();
            }
        }

        public Table<Events> Events
        {
            get
            {
                return GetTable<Events>();
            }
        }

        public Table<EventTickets> EventTickets
        {
            get
            {
                return GetTable<EventTickets>();
            }
        }

        public Table<EventVenues> EventVenues
        {
            get
            {
                return GetTable<EventVenues>();
            }
        }

        public Table<FieldOwnerRoles> FieldOwnerRoles
        {
            get
            {
                return GetTable<FieldOwnerRoles>();
            }
        }

        public Table<Fields> Fields
        {
            get
            {
                return GetTable<Fields>();
            }
        }

        public Table<FieldTypes> FieldTypes
        {
            get
            {
                return GetTable<FieldTypes>();
            }
        }

        public Table<LocalAccountRoles> LocalAccountRoles
        {
            get
            {
                return GetTable<LocalAccountRoles>();
            }
        }

        public Table<LocalAccounts> LocalAccounts
        {
            get
            {
                return GetTable<LocalAccounts>();
            }
        }

        public Table<ResourceOverrides> ResourceOverrides
        {
            get
            {
                return GetTable<ResourceOverrides>();
            }
        }

        public Table<ResourceOverridesOwnerRoles> ResourceOverridesOwnerRoles
        {
            get
            {
                return GetTable<ResourceOverridesOwnerRoles>();
            }
        }

        public Table<Resources> Resources
        {
            get
            {
                return GetTable<Resources>();
            }
        }

        public Table<RoleRelationships> RoleRelationships
        {
            get
            {
                return GetTable<RoleRelationships>();
            }
        }

        public Table<Roles> Roles
        {
            get
            {
                return GetTable<Roles>();
            }
        }

        public Table<TicketAllocationRoles> TicketAllocationRoles
        {
            get
            {
                return GetTable<TicketAllocationRoles>();
            }
        }

        public Table<TicketAllocations> TicketAllocations
        {
            get
            {
                return GetTable<TicketAllocations>();
            }
        }

        public Table<TicketOwnerRoles> TicketOwnerRoles
        {
            get
            {
                return GetTable<TicketOwnerRoles>();
            }
        }

        public Table<TicketOwners> TicketOwners
        {
            get
            {
                return GetTable<TicketOwners>();
            }
        }

        public Table<TicketPatronageRoles> TicketPatronageRoles
        {
            get
            {
                return GetTable<TicketPatronageRoles>();
            }
        }

        public Table<TicketRequestorRoles> TicketRequestorRoles
        {
            get
            {
                return GetTable<TicketRequestorRoles>();
            }
        }

        public Table<TicketRequests> TicketRequests
        {
            get
            {
                return GetTable<TicketRequests>();
            }
        }

        public Table<Tickets> Tickets
        {
            get
            {
                return GetTable<Tickets>();
            }
        }

        public Table<UserRelationships> UserRelationships
        {
            get
            {
                return GetTable<UserRelationships>();
            }
        }

        public Table<UserRoles> UserRoles
        {
            get
            {
                return GetTable<UserRoles>();
            }
        }

        public Table<Users> Users
        {
            get
            {
                return GetTable<Users>();
            }
        }

        public Table<VenueOwnerRoles> VenueOwnerRoles
        {
            get
            {
                return GetTable<VenueOwnerRoles>();
            }
        }

        public Table<VenueOwners> VenueOwners
        {
            get
            {
                return GetTable<VenueOwners>();
            }
        }

        public Table<Venues> Venues
        {
            get
            {
                return GetTable<Venues>();
            }
        }
    }

    [Table(Name = "dbo.DivisionOwnerRoles")]
    [DataContract()]
    public partial class DivisionOwnerRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;
        private EntitySet<Divisions> _Divisions;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public DivisionOwnerRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_DivisionOwnerRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.DivisionOwnerRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.DivisionOwnerRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_Divisions_DivisionOwnerRoles", Storage = "_Divisions", ThisKey = "RoleId", OtherKey = "OwnerRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<Divisions> Divisions
        {
            get
            {
                if ((serializing
                     && (_Divisions.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _Divisions;
            }
            set
            {
                _Divisions.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Divisions(Divisions entity)
        {
            SendPropertyChanging();
            entity.DivisionOwnerRoles = this;
        }

        private void detach_Divisions(Divisions entity)
        {
            SendPropertyChanging();
            entity.DivisionOwnerRoles = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _Divisions = new EntitySet<Divisions>(new Action<Divisions>(attach_Divisions), new Action<Divisions>(detach_Divisions));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Divisions")]
    [DataContract()]
    public partial class Divisions : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private string _Name;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private EntityRef<DivisionOwnerRoles> _DivisionOwnerRoles;
        private EntityRef<UserRoles> _UserRoles;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnNameChanging(string value);

        partial void OnNameChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        #endregion

        public Divisions()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if ((_Name != value))
                {
                    OnNameChanging(value);
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 3)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    if ((_DivisionOwnerRoles.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 4)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Association(Name = "FK_Divisions_DivisionOwnerRoles", Storage = "_DivisionOwnerRoles", ThisKey = "OwnerRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public DivisionOwnerRoles DivisionOwnerRoles
        {
            get
            {
                return _DivisionOwnerRoles.Entity;
            }
            set
            {
                DivisionOwnerRoles previousValue = _DivisionOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_DivisionOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _DivisionOwnerRoles.Entity = null;
                        previousValue.Divisions.Remove(this);
                    }
                    _DivisionOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Divisions.Add(this);
                        _OwnerRoleId = value.RoleId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                    }
                    SendPropertyChanged("DivisionOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_Divisions_UserRoles", Storage = "_UserRoles", ThisKey = "OwnerRoleId,OwnerUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.Divisions.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Divisions.Add(this);
                        _OwnerRoleId = value.RoleId;
                        _OwnerUserId = value.UserId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                        _OwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _DivisionOwnerRoles = default(EntityRef<DivisionOwnerRoles>);
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.DomainOwnerRoles")]
    [DataContract()]
    public partial class DomainOwnerRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;
        private EntitySet<Domains> _Domains;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public DomainOwnerRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_DomainOwnerRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.DomainOwnerRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.DomainOwnerRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_Domains_DomainOwnerRoles", Storage = "_Domains", ThisKey = "RoleId", OtherKey = "OwnerRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<Domains> Domains
        {
            get
            {
                if ((serializing
                     && (_Domains.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _Domains;
            }
            set
            {
                _Domains.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Domains(Domains entity)
        {
            SendPropertyChanging();
            entity.DomainOwnerRoles = this;
        }

        private void detach_Domains(Domains entity)
        {
            SendPropertyChanging();
            entity.DomainOwnerRoles = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _Domains = new EntitySet<Domains>(new Action<Domains>(attach_Domains), new Action<Domains>(detach_Domains));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Domains")]
    [DataContract()]
    public partial class Domains : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private string _Name;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private EntityRef<DomainOwnerRoles> _DomainOwnerRoles;
        private EntityRef<UserRoles> _UserRoles;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnNameChanging(string value);

        partial void OnNameChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        #endregion

        public Domains()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if ((_Name != value))
                {
                    OnNameChanging(value);
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 3)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    if ((_DomainOwnerRoles.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 4)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Association(Name = "FK_Domains_DomainOwnerRoles", Storage = "_DomainOwnerRoles", ThisKey = "OwnerRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public DomainOwnerRoles DomainOwnerRoles
        {
            get
            {
                return _DomainOwnerRoles.Entity;
            }
            set
            {
                DomainOwnerRoles previousValue = _DomainOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_DomainOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _DomainOwnerRoles.Entity = null;
                        previousValue.Domains.Remove(this);
                    }
                    _DomainOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Domains.Add(this);
                        _OwnerRoleId = value.RoleId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                    }
                    SendPropertyChanged("DomainOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_Domains_UserRoles", Storage = "_UserRoles", ThisKey = "OwnerRoleId,OwnerUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.Domains.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Domains.Add(this);
                        _OwnerRoleId = value.RoleId;
                        _OwnerUserId = value.UserId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                        _OwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _DomainOwnerRoles = default(EntityRef<DomainOwnerRoles>);
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.EventFields")]
    [DataContract()]
    public partial class EventFields : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _EventId;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private string _FieldType;
        private EntityRef<Fields> _Fields;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnEventIdChanging(int value);

        partial void OnEventIdChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        partial void OnFieldTypeChanging(string value);

        partial void OnFieldTypeChanged();

        #endregion

        public EventFields()
        {
            Initialize();
        }

        [Column(Storage = "_EventId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if ((_EventId != value))
                {
                    OnEventIdChanging(value);
                    SendPropertyChanging();
                    _EventId = value;
                    SendPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    if (_Fields.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 3)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    if (_Fields.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_FieldType", DbType = "NVarChar(256) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        [DataMember(Order = 4)]
        public string FieldType
        {
            get
            {
                return _FieldType;
            }
            set
            {
                if ((_FieldType != value))
                {
                    if (_Fields.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnFieldTypeChanging(value);
                    SendPropertyChanging();
                    _FieldType = value;
                    SendPropertyChanged("FieldType");
                    OnFieldTypeChanged();
                }
            }
        }

        [Association(Name = "FK_EventFields_Fields", Storage = "_Fields", ThisKey = "FieldType,OwnerRoleId,OwnerUserId", OtherKey = "FieldType,OwnerRoleId,OwnerUserId", IsForeignKey = true)]
        public Fields Fields
        {
            get
            {
                return _Fields.Entity;
            }
            set
            {
                Fields previousValue = _Fields.Entity;
                if (((previousValue != value)
                     || (_Fields.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Fields.Entity = null;
                        previousValue.EventFields.Remove(this);
                    }
                    _Fields.Entity = value;
                    if ((value != null))
                    {
                        value.EventFields.Add(this);
                        _FieldType = value.FieldType;
                        _OwnerRoleId = value.OwnerRoleId;
                        _OwnerUserId = value.OwnerUserId;
                    }
                    else
                    {
                        _FieldType = default(string);
                        _OwnerRoleId = default(byte);
                        _OwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("Fields");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _Fields = default(EntityRef<Fields>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.EventFieldValues")]
    [DataContract()]
    public partial class EventFieldValues : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _EventId;
        private byte _EventOwnerRoleId;
        private Guid _EventOwnerUserId;
        private string _FieldType;
        private byte _SubmittingRoleId;
        private Guid _SubmittingUserId;
        private Binary _Value;
        private EntityRef<Fields> _Fields;
        private EntityRef<UserRelationships> _UserRelationships;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnEventIdChanging(int value);

        partial void OnEventIdChanged();

        partial void OnEventOwnerRoleIdChanging(byte value);

        partial void OnEventOwnerRoleIdChanged();

        partial void OnEventOwnerUserIdChanging(Guid value);

        partial void OnEventOwnerUserIdChanged();

        partial void OnFieldTypeChanging(string value);

        partial void OnFieldTypeChanged();

        partial void OnSubmittingRoleIdChanging(byte value);

        partial void OnSubmittingRoleIdChanged();

        partial void OnSubmittingUserIdChanging(Guid value);

        partial void OnSubmittingUserIdChanged();

        partial void OnValueChanging(Binary value);

        partial void OnValueChanged();

        #endregion

        public EventFieldValues()
        {
            Initialize();
        }

        [Column(Storage = "_EventId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if ((_EventId != value))
                {
                    OnEventIdChanging(value);
                    SendPropertyChanging();
                    _EventId = value;
                    SendPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 2)]
        public byte EventOwnerRoleId
        {
            get
            {
                return _EventOwnerRoleId;
            }
            set
            {
                if ((_EventOwnerRoleId != value))
                {
                    if ((_Fields.HasLoadedOrAssignedValue || _UserRelationships.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerRoleId = value;
                    SendPropertyChanged("EventOwnerRoleId");
                    OnEventOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 3)]
        public Guid EventOwnerUserId
        {
            get
            {
                return _EventOwnerUserId;
            }
            set
            {
                if ((_EventOwnerUserId != value))
                {
                    if ((_Fields.HasLoadedOrAssignedValue || _UserRelationships.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerUserId = value;
                    SendPropertyChanged("EventOwnerUserId");
                    OnEventOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_FieldType", DbType = "NVarChar(256) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        [DataMember(Order = 4)]
        public string FieldType
        {
            get
            {
                return _FieldType;
            }
            set
            {
                if ((_FieldType != value))
                {
                    if (_Fields.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnFieldTypeChanging(value);
                    SendPropertyChanging();
                    _FieldType = value;
                    SendPropertyChanged("FieldType");
                    OnFieldTypeChanged();
                }
            }
        }

        [Column(Storage = "_SubmittingRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 5)]
        public byte SubmittingRoleId
        {
            get
            {
                return _SubmittingRoleId;
            }
            set
            {
                if ((_SubmittingRoleId != value))
                {
                    if (_UserRelationships.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnSubmittingRoleIdChanging(value);
                    SendPropertyChanging();
                    _SubmittingRoleId = value;
                    SendPropertyChanged("SubmittingRoleId");
                    OnSubmittingRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_SubmittingUserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 6)]
        public Guid SubmittingUserId
        {
            get
            {
                return _SubmittingUserId;
            }
            set
            {
                if ((_SubmittingUserId != value))
                {
                    if (_UserRelationships.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnSubmittingUserIdChanging(value);
                    SendPropertyChanging();
                    _SubmittingUserId = value;
                    SendPropertyChanged("SubmittingUserId");
                    OnSubmittingUserIdChanged();
                }
            }
        }

        [Column(Storage = "_Value", DbType = "VarBinary(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order = 7)]
        public Binary Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if ((_Value != value))
                {
                    OnValueChanging(value);
                    SendPropertyChanging();
                    _Value = value;
                    SendPropertyChanged("Value");
                    OnValueChanged();
                }
            }
        }

        [Association(Name = "FK_EventFieldValues_Fields", Storage = "_Fields", ThisKey = "FieldType,EventOwnerRoleId,EventOwnerUserId", OtherKey = "FieldType,OwnerRoleId,OwnerUserId", IsForeignKey = true)]
        public Fields Fields
        {
            get
            {
                return _Fields.Entity;
            }
            set
            {
                Fields previousValue = _Fields.Entity;
                if (((previousValue != value)
                     || (_Fields.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Fields.Entity = null;
                        previousValue.EventFieldValues.Remove(this);
                    }
                    _Fields.Entity = value;
                    if ((value != null))
                    {
                        value.EventFieldValues.Add(this);
                        _FieldType = value.FieldType;
                        _EventOwnerRoleId = value.OwnerRoleId;
                        _EventOwnerUserId = value.OwnerUserId;
                    }
                    else
                    {
                        _FieldType = default(string);
                        _EventOwnerRoleId = default(byte);
                        _EventOwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("Fields");
                }
            }
        }

        [Association(Name = "FK_EventFieldValues_UserRelationships", Storage = "_UserRelationships", ThisKey = "EventOwnerRoleId,EventOwnerUserId,SubmittingRoleId,SubmittingUserId", OtherKey = "RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey = true)]
        public UserRelationships UserRelationships
        {
            get
            {
                return _UserRelationships.Entity;
            }
            set
            {
                UserRelationships previousValue = _UserRelationships.Entity;
                if (((previousValue != value)
                     || (_UserRelationships.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRelationships.Entity = null;
                        previousValue.EventFieldValues.Remove(this);
                    }
                    _UserRelationships.Entity = value;
                    if ((value != null))
                    {
                        value.EventFieldValues.Add(this);
                        _EventOwnerRoleId = value.RoleId;
                        _EventOwnerUserId = value.UserId;
                        _SubmittingRoleId = value.PartnerRoleId;
                        _SubmittingUserId = value.PartnerUserId;
                    }
                    else
                    {
                        _EventOwnerRoleId = default(byte);
                        _EventOwnerUserId = default(Guid);
                        _SubmittingRoleId = default(byte);
                        _SubmittingUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRelationships");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _Fields = default(EntityRef<Fields>);
            _UserRelationships = default(EntityRef<UserRelationships>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.EventOwnerRoles")]
    [DataContract()]
    public partial class EventOwnerRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;
        private EntitySet<Events> _Events;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public EventOwnerRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_EventOwnerRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.EventOwnerRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.EventOwnerRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_Events_EventOwnerRoles", Storage = "_Events", ThisKey = "RoleId", OtherKey = "OwnerRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<Events> Events
        {
            get
            {
                if ((serializing
                     && (_Events.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _Events;
            }
            set
            {
                _Events.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Events(Events entity)
        {
            SendPropertyChanging();
            entity.EventOwnerRoles = this;
        }

        private void detach_Events(Events entity)
        {
            SendPropertyChanging();
            entity.EventOwnerRoles = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _Events = new EntitySet<Events>(new Action<Events>(attach_Events), new Action<Events>(detach_Events));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Events")]
    [DataContract()]
    public partial class Events : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private string _Name;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private Nullable<int> _ParentId;
        private Nullable<DateTime> _StartDate;
        private Nullable<DateTime> _EndDate;
        private EntityRef<EventOwnerRoles> _EventOwnerRoles;
        private EntityRef<Events> _Parent;
        private EntitySet<Events> _Events_Events;
        private EntityRef<UserRoles> _UserRoles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnNameChanging(string value);

        partial void OnNameChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        partial void OnParentIdChanging(Nullable<int> value);

        partial void OnParentIdChanged();

        partial void OnStartDateChanging(Nullable<DateTime> value);

        partial void OnStartDateChanged();

        partial void OnEndDateChanging(Nullable<DateTime> value);

        partial void OnEndDateChanged();

        #endregion

        public Events()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if ((_Name != value))
                {
                    OnNameChanging(value);
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 3)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    if ((_EventOwnerRoles.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 4)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_ParentId", DbType = "Int")]
        [DataMember(Order = 5)]
        public Nullable<int> ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
                if ((_ParentId != value))
                {
                    if (_Parent.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnParentIdChanging(value);
                    SendPropertyChanging();
                    _ParentId = value;
                    SendPropertyChanged("ParentId");
                    OnParentIdChanged();
                }
            }
        }

        [Column(Storage = "_StartDate", DbType = "DateTime")]
        [DataMember(Order = 6)]
        public Nullable<DateTime> StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                if ((_StartDate != value))
                {
                    OnStartDateChanging(value);
                    SendPropertyChanging();
                    _StartDate = value;
                    SendPropertyChanged("StartDate");
                    OnStartDateChanged();
                }
            }
        }

        [Column(Storage = "_EndDate", DbType = "DateTime")]
        [DataMember(Order = 7)]
        public Nullable<DateTime> EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                if ((_EndDate != value))
                {
                    OnEndDateChanging(value);
                    SendPropertyChanging();
                    _EndDate = value;
                    SendPropertyChanged("EndDate");
                    OnEndDateChanged();
                }
            }
        }

        [Association(Name = "FK_Events_EventOwnerRoles", Storage = "_EventOwnerRoles", ThisKey = "OwnerRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public EventOwnerRoles EventOwnerRoles
        {
            get
            {
                return _EventOwnerRoles.Entity;
            }
            set
            {
                EventOwnerRoles previousValue = _EventOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_EventOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _EventOwnerRoles.Entity = null;
                        previousValue.Events.Remove(this);
                    }
                    _EventOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Events.Add(this);
                        _OwnerRoleId = value.RoleId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                    }
                    SendPropertyChanged("EventOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_Events_Events", Storage = "_Parent", ThisKey = "ParentId", OtherKey = "Id", IsForeignKey = true)]
        public Events Parent
        {
            get
            {
                return _Parent.Entity;
            }
            set
            {
                Events previousValue = _Parent.Entity;
                if (((previousValue != value)
                     || (_Parent.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Parent.Entity = null;
                        previousValue.Events_Events.Remove(this);
                    }
                    _Parent.Entity = value;
                    if ((value != null))
                    {
                        value.Events_Events.Add(this);
                        _ParentId = value.Id;
                    }
                    else
                    {
                        _ParentId = default(Nullable<int>);
                    }
                    SendPropertyChanged("Parent");
                }
            }
        }

        [Association(Name = "FK_Events_Events", Storage = "_Events_Events", ThisKey = "Id", OtherKey = "ParentId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 8, EmitDefaultValue = false)]
        public EntitySet<Events> Events_Events
        {
            get
            {
                if ((serializing
                     && (_Events_Events.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _Events_Events;
            }
            set
            {
                _Events_Events.Assign(value);
            }
        }

        [Association(Name = "FK_Events_UserRoles", Storage = "_UserRoles", ThisKey = "OwnerRoleId,OwnerUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.Events.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Events.Add(this);
                        _OwnerRoleId = value.RoleId;
                        _OwnerUserId = value.UserId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                        _OwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Events_Events(Events entity)
        {
            SendPropertyChanging();
            entity.Parent = this;
        }

        private void detach_Events_Events(Events entity)
        {
            SendPropertyChanging();
            entity.Parent = null;
        }

        private void Initialize()
        {
            _EventOwnerRoles = default(EntityRef<EventOwnerRoles>);
            _Parent = default(EntityRef<Events>);
            _Events_Events = new EntitySet<Events>(new Action<Events>(attach_Events_Events), new Action<Events>(detach_Events_Events));
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.EventTickets")]
    [DataContract()]
    public partial class EventTickets : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _EventId;
        private byte _EventOwnerRoleId;
        private Guid _EventOwnerUserId;
        private int _TicketId;
        private int _Allocation;
        private EntityRef<TicketOwners> _TicketOwners;
        private EntitySet<TicketRequests> _TicketRequests;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnEventIdChanging(int value);

        partial void OnEventIdChanged();

        partial void OnEventOwnerRoleIdChanging(byte value);

        partial void OnEventOwnerRoleIdChanged();

        partial void OnEventOwnerUserIdChanging(Guid value);

        partial void OnEventOwnerUserIdChanged();

        partial void OnTicketIdChanging(int value);

        partial void OnTicketIdChanged();

        partial void OnAllocationChanging(int value);

        partial void OnAllocationChanged();

        #endregion

        public EventTickets()
        {
            Initialize();
        }

        [Column(Storage = "_EventId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if ((_EventId != value))
                {
                    OnEventIdChanging(value);
                    SendPropertyChanging();
                    _EventId = value;
                    SendPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public byte EventOwnerRoleId
        {
            get
            {
                return _EventOwnerRoleId;
            }
            set
            {
                if ((_EventOwnerRoleId != value))
                {
                    if (_TicketOwners.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerRoleId = value;
                    SendPropertyChanged("EventOwnerRoleId");
                    OnEventOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerUserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 3)]
        public Guid EventOwnerUserId
        {
            get
            {
                return _EventOwnerUserId;
            }
            set
            {
                if ((_EventOwnerUserId != value))
                {
                    if (_TicketOwners.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerUserId = value;
                    SendPropertyChanged("EventOwnerUserId");
                    OnEventOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_TicketId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 4)]
        public int TicketId
        {
            get
            {
                return _TicketId;
            }
            set
            {
                if ((_TicketId != value))
                {
                    if (_TicketOwners.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnTicketIdChanging(value);
                    SendPropertyChanging();
                    _TicketId = value;
                    SendPropertyChanged("TicketId");
                    OnTicketIdChanged();
                }
            }
        }

        [Column(Storage = "_Allocation", DbType = "Int NOT NULL")]
        [DataMember(Order = 5)]
        public int Allocation
        {
            get
            {
                return _Allocation;
            }
            set
            {
                if ((_Allocation != value))
                {
                    OnAllocationChanging(value);
                    SendPropertyChanging();
                    _Allocation = value;
                    SendPropertyChanged("Allocation");
                    OnAllocationChanged();
                }
            }
        }

        [Association(Name = "FK_EventTickets_TicketOwners", Storage = "_TicketOwners", ThisKey = "TicketId,EventOwnerRoleId,EventOwnerUserId", OtherKey = "TicketId,OwnerRoleId,OwnerUserId", IsForeignKey = true)]
        public TicketOwners TicketOwners
        {
            get
            {
                return _TicketOwners.Entity;
            }
            set
            {
                TicketOwners previousValue = _TicketOwners.Entity;
                if (((previousValue != value)
                     || (_TicketOwners.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketOwners.Entity = null;
                        previousValue.EventTickets.Remove(this);
                    }
                    _TicketOwners.Entity = value;
                    if ((value != null))
                    {
                        value.EventTickets.Add(this);
                        _TicketId = value.TicketId;
                        _EventOwnerRoleId = value.OwnerRoleId;
                        _EventOwnerUserId = value.OwnerUserId;
                    }
                    else
                    {
                        _TicketId = default(int);
                        _EventOwnerRoleId = default(byte);
                        _EventOwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("TicketOwners");
                }
            }
        }

        [Association(Name = "FK_TicketRequests_EventTickets", Storage = "_TicketRequests", ThisKey = "EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", OtherKey = "EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 6, EmitDefaultValue = false)]
        public EntitySet<TicketRequests> TicketRequests
        {
            get
            {
                if ((serializing
                     && (_TicketRequests.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketRequests;
            }
            set
            {
                _TicketRequests.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.EventTickets = this;
        }

        private void detach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.EventTickets = null;
        }

        private void Initialize()
        {
            _TicketOwners = default(EntityRef<TicketOwners>);
            _TicketRequests = new EntitySet<TicketRequests>(new Action<TicketRequests>(attach_TicketRequests), new Action<TicketRequests>(detach_TicketRequests));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.EventVenues")]
    [DataContract()]
    public partial class EventVenues : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _EventId;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private int _VenueId;
        private EntityRef<VenueOwners> _VenueOwners;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnEventIdChanging(int value);

        partial void OnEventIdChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        partial void OnVenueIdChanging(int value);

        partial void OnVenueIdChanged();

        #endregion

        public EventVenues()
        {
            Initialize();
        }

        [Column(Storage = "_EventId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if ((_EventId != value))
                {
                    if (_VenueOwners.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventIdChanging(value);
                    SendPropertyChanging();
                    _EventId = value;
                    SendPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 2)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    if (_VenueOwners.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 3)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    if (_VenueOwners.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_VenueId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 4)]
        public int VenueId
        {
            get
            {
                return _VenueId;
            }
            set
            {
                if ((_VenueId != value))
                {
                    OnVenueIdChanging(value);
                    SendPropertyChanging();
                    _VenueId = value;
                    SendPropertyChanged("VenueId");
                    OnVenueIdChanged();
                }
            }
        }

        [Association(Name = "FK_EventVenues_VenueOwners", Storage = "_VenueOwners", ThisKey = "EventId,OwnerRoleId,OwnerUserId", OtherKey = "VenueId,RoleId,UserId", IsForeignKey = true)]
        public VenueOwners VenueOwners
        {
            get
            {
                return _VenueOwners.Entity;
            }
            set
            {
                VenueOwners previousValue = _VenueOwners.Entity;
                if (((previousValue != value)
                     || (_VenueOwners.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _VenueOwners.Entity = null;
                        previousValue.EventVenues.Remove(this);
                    }
                    _VenueOwners.Entity = value;
                    if ((value != null))
                    {
                        value.EventVenues.Add(this);
                        _EventId = value.VenueId;
                        _OwnerRoleId = value.RoleId;
                        _OwnerUserId = value.UserId;
                    }
                    else
                    {
                        _EventId = default(int);
                        _OwnerRoleId = default(byte);
                        _OwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("VenueOwners");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _VenueOwners = default(EntityRef<VenueOwners>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.FieldOwnerRoles")]
    [DataContract()]
    public partial class FieldOwnerRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public FieldOwnerRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_FieldOwnerRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.FieldOwnerRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.FieldOwnerRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Fields")]
    [DataContract()]
    public partial class Fields : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private string _FieldType;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private EntitySet<EventFields> _EventFields;
        private EntitySet<EventFieldValues> _EventFieldValues;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnFieldTypeChanging(string value);

        partial void OnFieldTypeChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        #endregion

        public Fields()
        {
            Initialize();
        }

        [Column(Storage = "_FieldType", DbType = "NVarChar(256) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public string FieldType
        {
            get
            {
                return _FieldType;
            }
            set
            {
                if ((_FieldType != value))
                {
                    OnFieldTypeChanging(value);
                    SendPropertyChanging();
                    _FieldType = value;
                    SendPropertyChanged("FieldType");
                    OnFieldTypeChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 3)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Association(Name = "FK_EventFields_Fields", Storage = "_EventFields", ThisKey = "FieldType,OwnerRoleId,OwnerUserId", OtherKey = "FieldType,OwnerRoleId,OwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 4, EmitDefaultValue = false)]
        public EntitySet<EventFields> EventFields
        {
            get
            {
                if ((serializing
                     && (_EventFields.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _EventFields;
            }
            set
            {
                _EventFields.Assign(value);
            }
        }

        [Association(Name = "FK_EventFieldValues_Fields", Storage = "_EventFieldValues", ThisKey = "FieldType,OwnerRoleId,OwnerUserId", OtherKey = "FieldType,EventOwnerRoleId,EventOwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 5, EmitDefaultValue = false)]
        public EntitySet<EventFieldValues> EventFieldValues
        {
            get
            {
                if ((serializing
                     && (_EventFieldValues.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _EventFieldValues;
            }
            set
            {
                _EventFieldValues.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_EventFields(EventFields entity)
        {
            SendPropertyChanging();
            entity.Fields = this;
        }

        private void detach_EventFields(EventFields entity)
        {
            SendPropertyChanging();
            entity.Fields = null;
        }

        private void attach_EventFieldValues(EventFieldValues entity)
        {
            SendPropertyChanging();
            entity.Fields = this;
        }

        private void detach_EventFieldValues(EventFieldValues entity)
        {
            SendPropertyChanging();
            entity.Fields = null;
        }

        private void Initialize()
        {
            _EventFields = new EntitySet<EventFields>(new Action<EventFields>(attach_EventFields), new Action<EventFields>(detach_EventFields));
            _EventFieldValues = new EntitySet<EventFieldValues>(new Action<EventFieldValues>(attach_EventFieldValues), new Action<EventFieldValues>(detach_EventFieldValues));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.FieldTypes")]
    [DataContract()]
    public partial class FieldTypes : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private string _Type;
        private string _DisplayName;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnTypeChanging(string value);

        partial void OnTypeChanged();

        partial void OnDisplayNameChanging(string value);

        partial void OnDisplayNameChanged();

        #endregion

        public FieldTypes()
        {
            Initialize();
        }

        [Column(Storage = "_Type", DbType = "NVarChar(256) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public string Type
        {
            get
            {
                return _Type;
            }
            set
            {
                if ((_Type != value))
                {
                    OnTypeChanging(value);
                    SendPropertyChanging();
                    _Type = value;
                    SendPropertyChanged("Type");
                    OnTypeChanged();
                }
            }
        }

        [Column(Storage = "_DisplayName", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string DisplayName
        {
            get
            {
                return _DisplayName;
            }
            set
            {
                if ((_DisplayName != value))
                {
                    OnDisplayNameChanging(value);
                    SendPropertyChanging();
                    _DisplayName = value;
                    SendPropertyChanged("DisplayName");
                    OnDisplayNameChanged();
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.LocalAccountRoles")]
    [DataContract()]
    public partial class LocalAccountRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntitySet<LocalAccounts> _LocalAccounts;
        private EntityRef<Roles> _Roles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public LocalAccountRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_LocalAccount_LocalAccountRoles", Storage = "_LocalAccounts", ThisKey = "RoleId", OtherKey = "RoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<LocalAccounts> LocalAccounts
        {
            get
            {
                if ((serializing
                     && (_LocalAccounts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _LocalAccounts;
            }
            set
            {
                _LocalAccounts.Assign(value);
            }
        }

        [Association(Name = "FK_LocalAccountRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.LocalAccountRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.LocalAccountRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_LocalAccounts(LocalAccounts entity)
        {
            SendPropertyChanging();
            entity.LocalAccountRoles = this;
        }

        private void detach_LocalAccounts(LocalAccounts entity)
        {
            SendPropertyChanging();
            entity.LocalAccountRoles = null;
        }

        private void Initialize()
        {
            _LocalAccounts = new EntitySet<LocalAccounts>(new Action<LocalAccounts>(attach_LocalAccounts), new Action<LocalAccounts>(detach_LocalAccounts));
            _Roles = default(EntityRef<Roles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.LocalAccounts")]
    [DataContract()]
    public partial class LocalAccounts : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private Guid _UserId;
        private byte _RoleId;
        private string _Password;
        private bool _Active;
        private EntityRef<LocalAccountRoles> _LocalAccountRoles;
        private EntityRef<UserRoles> _UserRoles;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnUserIdChanging(Guid value);

        partial void OnUserIdChanged();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        partial void OnPasswordChanging(string value);

        partial void OnPasswordChanged();

        partial void OnActiveChanging(bool value);

        partial void OnActiveChanged();

        #endregion

        public LocalAccounts()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_UserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 2)]
        public Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if ((_UserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIdChanging(value);
                    SendPropertyChanging();
                    _UserId = value;
                    SendPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 3)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if ((_LocalAccountRoles.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_Password", DbType = "NVarChar(200) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 4)]
        public string Password
        {
            get
            {
                return _Password;
            }
            set
            {
                if ((_Password != value))
                {
                    OnPasswordChanging(value);
                    SendPropertyChanging();
                    _Password = value;
                    SendPropertyChanged("Password");
                    OnPasswordChanged();
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit NOT NULL")]
        [DataMember(Order = 5)]
        public bool Active
        {
            get
            {
                return _Active;
            }
            set
            {
                if ((_Active != value))
                {
                    OnActiveChanging(value);
                    SendPropertyChanging();
                    _Active = value;
                    SendPropertyChanged("Active");
                    OnActiveChanged();
                }
            }
        }

        [Association(Name = "FK_LocalAccount_LocalAccountRoles", Storage = "_LocalAccountRoles", ThisKey = "RoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public LocalAccountRoles LocalAccountRoles
        {
            get
            {
                return _LocalAccountRoles.Entity;
            }
            set
            {
                LocalAccountRoles previousValue = _LocalAccountRoles.Entity;
                if (((previousValue != value)
                     || (_LocalAccountRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _LocalAccountRoles.Entity = null;
                        previousValue.LocalAccounts.Remove(this);
                    }
                    _LocalAccountRoles.Entity = value;
                    if ((value != null))
                    {
                        value.LocalAccounts.Add(this);
                        _RoleId = value.RoleId;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("LocalAccountRoles");
                }
            }
        }

        [Association(Name = "FK_LocalAccount_UserRoles", Storage = "_UserRoles", ThisKey = "RoleId,UserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.LocalAccounts.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.LocalAccounts.Add(this);
                        _RoleId = value.RoleId;
                        _UserId = value.UserId;
                    }
                    else
                    {
                        _RoleId = default(byte);
                        _UserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _LocalAccountRoles = default(EntityRef<LocalAccountRoles>);
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.ResourceOverrides")]
    [DataContract()]
    public partial class ResourceOverrides : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _ResourceId;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private string _Value;
        private EntityRef<ResourceOverridesOwnerRoles> _ResourceOverridesOwnerRoles;
        private EntityRef<UserRoles> _UserRoles;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnResourceIdChanging(int value);

        partial void OnResourceIdChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        partial void OnValueChanging(string value);

        partial void OnValueChanged();

        #endregion

        public ResourceOverrides()
        {
            Initialize();
        }

        [Column(Storage = "_ResourceId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int ResourceId
        {
            get
            {
                return _ResourceId;
            }
            set
            {
                if ((_ResourceId != value))
                {
                    OnResourceIdChanging(value);
                    SendPropertyChanging();
                    _ResourceId = value;
                    SendPropertyChanged("ResourceId");
                    OnResourceIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    if ((_ResourceOverridesOwnerRoles.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 3)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_Value", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
        [DataMember(Order = 4)]
        public string Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if ((_Value != value))
                {
                    OnValueChanging(value);
                    SendPropertyChanging();
                    _Value = value;
                    SendPropertyChanged("Value");
                    OnValueChanged();
                }
            }
        }

        [Association(Name = "FK_ResourceOverrides_ResourceOverridesOwnerRoles", Storage = "_ResourceOverridesOwnerRoles", ThisKey = "OwnerRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public ResourceOverridesOwnerRoles ResourceOverridesOwnerRoles
        {
            get
            {
                return _ResourceOverridesOwnerRoles.Entity;
            }
            set
            {
                ResourceOverridesOwnerRoles previousValue = _ResourceOverridesOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_ResourceOverridesOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _ResourceOverridesOwnerRoles.Entity = null;
                        previousValue.ResourceOverrides.Remove(this);
                    }
                    _ResourceOverridesOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceOverrides.Add(this);
                        _OwnerRoleId = value.RoleId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                    }
                    SendPropertyChanged("ResourceOverridesOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_ResourceOverrides_UserRoles", Storage = "_UserRoles", ThisKey = "OwnerRoleId,OwnerUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.ResourceOverrides.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceOverrides.Add(this);
                        _OwnerRoleId = value.RoleId;
                        _OwnerUserId = value.UserId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                        _OwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _ResourceOverridesOwnerRoles = default(EntityRef<ResourceOverridesOwnerRoles>);
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.ResourceOverridesOwnerRoles")]
    [DataContract()]
    public partial class ResourceOverridesOwnerRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntitySet<ResourceOverrides> _ResourceOverrides;
        private EntityRef<Roles> _Roles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public ResourceOverridesOwnerRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_ResourceOverrides_ResourceOverridesOwnerRoles", Storage = "_ResourceOverrides", ThisKey = "RoleId", OtherKey = "OwnerRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<ResourceOverrides> ResourceOverrides
        {
            get
            {
                if ((serializing
                     && (_ResourceOverrides.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _ResourceOverrides;
            }
            set
            {
                _ResourceOverrides.Assign(value);
            }
        }

        [Association(Name = "FK_ResourceOwnerRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.ResourceOverridesOwnerRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceOverridesOwnerRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ResourceOverrides(ResourceOverrides entity)
        {
            SendPropertyChanging();
            entity.ResourceOverridesOwnerRoles = this;
        }

        private void detach_ResourceOverrides(ResourceOverrides entity)
        {
            SendPropertyChanging();
            entity.ResourceOverridesOwnerRoles = null;
        }

        private void Initialize()
        {
            _ResourceOverrides = new EntitySet<ResourceOverrides>(new Action<ResourceOverrides>(attach_ResourceOverrides), new Action<ResourceOverrides>(detach_ResourceOverrides));
            _Roles = default(EntityRef<Roles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Resources")]
    [DataContract()]
    public partial class Resources : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private string _Name;
        private string _DisplayName;
        private string _DefaultValue;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnNameChanging(string value);

        partial void OnNameChanged();

        partial void OnDisplayNameChanging(string value);

        partial void OnDisplayNameChanged();

        partial void OnDefaultValueChanging(string value);

        partial void OnDefaultValueChanged();

        #endregion

        public Resources()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if ((_Name != value))
                {
                    OnNameChanging(value);
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        [Column(Storage = "_DisplayName", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 3)]
        public string DisplayName
        {
            get
            {
                return _DisplayName;
            }
            set
            {
                if ((_DisplayName != value))
                {
                    OnDisplayNameChanging(value);
                    SendPropertyChanging();
                    _DisplayName = value;
                    SendPropertyChanged("DisplayName");
                    OnDisplayNameChanged();
                }
            }
        }

        [Column(Storage = "_DefaultValue", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 4)]
        public string DefaultValue
        {
            get
            {
                return _DefaultValue;
            }
            set
            {
                if ((_DefaultValue != value))
                {
                    OnDefaultValueChanging(value);
                    SendPropertyChanging();
                    _DefaultValue = value;
                    SendPropertyChanged("DefaultValue");
                    OnDefaultValueChanged();
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.RoleRelationships")]
    [DataContract()]
    public partial class RoleRelationships : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private byte _PartnerRoleId;
        private EntityRef<Roles> _Roles;
        private EntityRef<Roles> _Role;
        private EntitySet<UserRelationships> _UserRelationships;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        partial void OnPartnerRoleIdChanging(byte value);

        partial void OnPartnerRoleIdChanged();

        #endregion

        public RoleRelationships()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_PartnerRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public byte PartnerRoleId
        {
            get
            {
                return _PartnerRoleId;
            }
            set
            {
                if ((_PartnerRoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnPartnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _PartnerRoleId = value;
                    SendPropertyChanged("PartnerRoleId");
                    OnPartnerRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_RoleRelationships_PartnerRoles", Storage = "_Roles", ThisKey = "PartnerRoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.RoleRelationships.Remove(this);
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.RoleRelationships.Add(this);
                        _PartnerRoleId = value.Id;
                    }
                    else
                    {
                        _PartnerRoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_RoleRelationships_Roles", Storage = "_Role", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Role
        {
            get
            {
                return _Role.Entity;
            }
            set
            {
                Roles previousValue = _Role.Entity;
                if (((previousValue != value)
                     || (_Role.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Role.Entity = null;
                        previousValue.RoleRelationships_Roles.Remove(this);
                    }
                    _Role.Entity = value;
                    if ((value != null))
                    {
                        value.RoleRelationships_Roles.Add(this);
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Role");
                }
            }
        }

        [Association(Name = "FK_UserRelationships_RoleRelationships", Storage = "_UserRelationships", ThisKey = "RoleId,PartnerRoleId", OtherKey = "RoleId,PartnerRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 3, EmitDefaultValue = false)]
        public EntitySet<UserRelationships> UserRelationships
        {
            get
            {
                if ((serializing
                     && (_UserRelationships.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _UserRelationships;
            }
            set
            {
                _UserRelationships.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_UserRelationships(UserRelationships entity)
        {
            SendPropertyChanging();
            entity.RoleRelationships = this;
        }

        private void detach_UserRelationships(UserRelationships entity)
        {
            SendPropertyChanging();
            entity.RoleRelationships = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _Role = default(EntityRef<Roles>);
            _UserRelationships = new EntitySet<UserRelationships>(new Action<UserRelationships>(attach_UserRelationships), new Action<UserRelationships>(detach_UserRelationships));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Roles")]
    [DataContract()]
    public partial class Roles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _Id;
        private string _Name;
        private string _Description;
        private bool _Active;
        private EntityRef<DivisionOwnerRoles> _DivisionOwnerRoles;
        private EntityRef<DomainOwnerRoles> _DomainOwnerRoles;
        private EntityRef<EventOwnerRoles> _EventOwnerRoles;
        private EntityRef<FieldOwnerRoles> _FieldOwnerRoles;
        private EntityRef<LocalAccountRoles> _LocalAccountRoles;
        private EntityRef<ResourceOverridesOwnerRoles> _ResourceOverridesOwnerRoles;
        private EntitySet<RoleRelationships> _RoleRelationships;
        private EntitySet<RoleRelationships> _RoleRelationships_Roles;
        private EntityRef<TicketAllocationRoles> _TicketAllocationRoles;
        private EntityRef<TicketOwnerRoles> _TicketOwnerRoles;
        private EntityRef<TicketPatronageRoles> _TicketPatronageRoles;
        private EntityRef<TicketRequestorRoles> _TicketRequestorRoles;
        private EntitySet<UserRoles> _UserRoles;
        private EntityRef<VenueOwnerRoles> _VenueOwnerRoles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(byte value);

        partial void OnIdChanged();

        partial void OnNameChanging(string value);

        partial void OnNameChanged();

        partial void OnDescriptionChanging(string value);

        partial void OnDescriptionChanged();

        partial void OnActiveChanging(bool value);

        partial void OnActiveChanged();

        #endregion

        public Roles()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if ((_Name != value))
                {
                    OnNameChanging(value);
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        [Column(Storage = "_Description", DbType = "NVarChar(4000) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 3)]
        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
                if ((_Description != value))
                {
                    OnDescriptionChanging(value);
                    SendPropertyChanging();
                    _Description = value;
                    SendPropertyChanged("Description");
                    OnDescriptionChanged();
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit NOT NULL")]
        [DataMember(Order = 4)]
        public bool Active
        {
            get
            {
                return _Active;
            }
            set
            {
                if ((_Active != value))
                {
                    OnActiveChanging(value);
                    SendPropertyChanging();
                    _Active = value;
                    SendPropertyChanged("Active");
                    OnActiveChanged();
                }
            }
        }

        [Association(Name = "FK_DivisionOwnerRoles_Roles", Storage = "_DivisionOwnerRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 5, EmitDefaultValue = false)]
        public DivisionOwnerRoles DivisionOwnerRoles
        {
            get
            {
                if ((serializing
                     && (_DivisionOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _DivisionOwnerRoles.Entity;
            }
            set
            {
                DivisionOwnerRoles previousValue = _DivisionOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_DivisionOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _DivisionOwnerRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _DivisionOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("DivisionOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_DomainOwnerRoles_Roles", Storage = "_DomainOwnerRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 6, EmitDefaultValue = false)]
        public DomainOwnerRoles DomainOwnerRoles
        {
            get
            {
                if ((serializing
                     && (_DomainOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _DomainOwnerRoles.Entity;
            }
            set
            {
                DomainOwnerRoles previousValue = _DomainOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_DomainOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _DomainOwnerRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _DomainOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("DomainOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_EventOwnerRoles_Roles", Storage = "_EventOwnerRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 7, EmitDefaultValue = false)]
        public EventOwnerRoles EventOwnerRoles
        {
            get
            {
                if ((serializing
                     && (_EventOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _EventOwnerRoles.Entity;
            }
            set
            {
                EventOwnerRoles previousValue = _EventOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_EventOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _EventOwnerRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _EventOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("EventOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_FieldOwnerRoles_Roles", Storage = "_FieldOwnerRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 8, EmitDefaultValue = false)]
        public FieldOwnerRoles FieldOwnerRoles
        {
            get
            {
                if ((serializing
                     && (_FieldOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _FieldOwnerRoles.Entity;
            }
            set
            {
                FieldOwnerRoles previousValue = _FieldOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_FieldOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _FieldOwnerRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _FieldOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("FieldOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_LocalAccountRoles_Roles", Storage = "_LocalAccountRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 9, EmitDefaultValue = false)]
        public LocalAccountRoles LocalAccountRoles
        {
            get
            {
                if ((serializing
                     && (_LocalAccountRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _LocalAccountRoles.Entity;
            }
            set
            {
                LocalAccountRoles previousValue = _LocalAccountRoles.Entity;
                if (((previousValue != value)
                     || (_LocalAccountRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _LocalAccountRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _LocalAccountRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("LocalAccountRoles");
                }
            }
        }

        [Association(Name = "FK_ResourceOwnerRoles_Roles", Storage = "_ResourceOverridesOwnerRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 10, EmitDefaultValue = false)]
        public ResourceOverridesOwnerRoles ResourceOverridesOwnerRoles
        {
            get
            {
                if ((serializing
                     && (_ResourceOverridesOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _ResourceOverridesOwnerRoles.Entity;
            }
            set
            {
                ResourceOverridesOwnerRoles previousValue = _ResourceOverridesOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_ResourceOverridesOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _ResourceOverridesOwnerRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _ResourceOverridesOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("ResourceOverridesOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_RoleRelationships_PartnerRoles", Storage = "_RoleRelationships", ThisKey = "Id", OtherKey = "PartnerRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 11, EmitDefaultValue = false)]
        public EntitySet<RoleRelationships> RoleRelationships
        {
            get
            {
                if ((serializing
                     && (_RoleRelationships.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _RoleRelationships;
            }
            set
            {
                _RoleRelationships.Assign(value);
            }
        }

        [Association(Name = "FK_RoleRelationships_Roles", Storage = "_RoleRelationships_Roles", ThisKey = "Id", OtherKey = "RoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 12, EmitDefaultValue = false)]
        public EntitySet<RoleRelationships> RoleRelationships_Roles
        {
            get
            {
                if ((serializing
                     && (_RoleRelationships_Roles.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _RoleRelationships_Roles;
            }
            set
            {
                _RoleRelationships_Roles.Assign(value);
            }
        }

        [Association(Name = "FK_TicketAllocationRoles_Roles", Storage = "_TicketAllocationRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 13, EmitDefaultValue = false)]
        public TicketAllocationRoles TicketAllocationRoles
        {
            get
            {
                if ((serializing
                     && (_TicketAllocationRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _TicketAllocationRoles.Entity;
            }
            set
            {
                TicketAllocationRoles previousValue = _TicketAllocationRoles.Entity;
                if (((previousValue != value)
                     || (_TicketAllocationRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketAllocationRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _TicketAllocationRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("TicketAllocationRoles");
                }
            }
        }

        [Association(Name = "FK_TicketOwnerRoles_Roles", Storage = "_TicketOwnerRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 14, EmitDefaultValue = false)]
        public TicketOwnerRoles TicketOwnerRoles
        {
            get
            {
                if ((serializing
                     && (_TicketOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _TicketOwnerRoles.Entity;
            }
            set
            {
                TicketOwnerRoles previousValue = _TicketOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_TicketOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketOwnerRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _TicketOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("TicketOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_TicketPatronageRoles_Roles", Storage = "_TicketPatronageRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 15, EmitDefaultValue = false)]
        public TicketPatronageRoles TicketPatronageRoles
        {
            get
            {
                if ((serializing
                     && (_TicketPatronageRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _TicketPatronageRoles.Entity;
            }
            set
            {
                TicketPatronageRoles previousValue = _TicketPatronageRoles.Entity;
                if (((previousValue != value)
                     || (_TicketPatronageRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketPatronageRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _TicketPatronageRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("TicketPatronageRoles");
                }
            }
        }

        [Association(Name = "FK_TicketRequestRoles_Roles", Storage = "_TicketRequestorRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 16, EmitDefaultValue = false)]
        public TicketRequestorRoles TicketRequestorRoles
        {
            get
            {
                if ((serializing
                     && (_TicketRequestorRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _TicketRequestorRoles.Entity;
            }
            set
            {
                TicketRequestorRoles previousValue = _TicketRequestorRoles.Entity;
                if (((previousValue != value)
                     || (_TicketRequestorRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketRequestorRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _TicketRequestorRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("TicketRequestorRoles");
                }
            }
        }

        [Association(Name = "FK_UserRole_Role", Storage = "_UserRoles", ThisKey = "Id", OtherKey = "RoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 17, EmitDefaultValue = false)]
        public EntitySet<UserRoles> UserRoles
        {
            get
            {
                if ((serializing
                     && (_UserRoles.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _UserRoles;
            }
            set
            {
                _UserRoles.Assign(value);
            }
        }

        [Association(Name = "FK_VenueOwnerRoles_Roles", Storage = "_VenueOwnerRoles", ThisKey = "Id", OtherKey = "RoleId", IsUnique = true, IsForeignKey = false, DeleteRule = "NO ACTION")]
        [DataMember(Order = 18, EmitDefaultValue = false)]
        public VenueOwnerRoles VenueOwnerRoles
        {
            get
            {
                if ((serializing
                     && (_VenueOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    return null;
                }
                return _VenueOwnerRoles.Entity;
            }
            set
            {
                VenueOwnerRoles previousValue = _VenueOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_VenueOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _VenueOwnerRoles.Entity = null;
                        previousValue.Roles = null;
                    }
                    _VenueOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.Roles = this;
                    }
                    SendPropertyChanged("VenueOwnerRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_RoleRelationships(RoleRelationships entity)
        {
            SendPropertyChanging();
            entity.Roles = this;
        }

        private void detach_RoleRelationships(RoleRelationships entity)
        {
            SendPropertyChanging();
            entity.Roles = null;
        }

        private void attach_RoleRelationships_Roles(RoleRelationships entity)
        {
            SendPropertyChanging();
            entity.Role = this;
        }

        private void detach_RoleRelationships_Roles(RoleRelationships entity)
        {
            SendPropertyChanging();
            entity.Role = null;
        }

        private void attach_UserRoles(UserRoles entity)
        {
            SendPropertyChanging();
            entity.Roles = this;
        }

        private void detach_UserRoles(UserRoles entity)
        {
            SendPropertyChanging();
            entity.Roles = null;
        }

        private void Initialize()
        {
            _DivisionOwnerRoles = default(EntityRef<DivisionOwnerRoles>);
            _DomainOwnerRoles = default(EntityRef<DomainOwnerRoles>);
            _EventOwnerRoles = default(EntityRef<EventOwnerRoles>);
            _FieldOwnerRoles = default(EntityRef<FieldOwnerRoles>);
            _LocalAccountRoles = default(EntityRef<LocalAccountRoles>);
            _ResourceOverridesOwnerRoles = default(EntityRef<ResourceOverridesOwnerRoles>);
            _RoleRelationships = new EntitySet<RoleRelationships>(new Action<RoleRelationships>(attach_RoleRelationships), new Action<RoleRelationships>(detach_RoleRelationships));
            _RoleRelationships_Roles = new EntitySet<RoleRelationships>(new Action<RoleRelationships>(attach_RoleRelationships_Roles), new Action<RoleRelationships>(detach_RoleRelationships_Roles));
            _TicketAllocationRoles = default(EntityRef<TicketAllocationRoles>);
            _TicketOwnerRoles = default(EntityRef<TicketOwnerRoles>);
            _TicketPatronageRoles = default(EntityRef<TicketPatronageRoles>);
            _TicketRequestorRoles = default(EntityRef<TicketRequestorRoles>);
            _UserRoles = new EntitySet<UserRoles>(new Action<UserRoles>(attach_UserRoles), new Action<UserRoles>(detach_UserRoles));
            _VenueOwnerRoles = default(EntityRef<VenueOwnerRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.TicketAllocationRoles")]
    [DataContract()]
    public partial class TicketAllocationRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;
        private EntitySet<TicketAllocations> _TicketAllocations;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public TicketAllocationRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_TicketAllocationRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.TicketAllocationRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketAllocationRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_TicketAllocations_TicketAllocationRoles", Storage = "_TicketAllocations", ThisKey = "RoleId", OtherKey = "PatronRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<TicketAllocations> TicketAllocations
        {
            get
            {
                if ((serializing
                     && (_TicketAllocations.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketAllocations;
            }
            set
            {
                _TicketAllocations.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.TicketAllocationRoles = this;
        }

        private void detach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.TicketAllocationRoles = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _TicketAllocations = new EntitySet<TicketAllocations>(new Action<TicketAllocations>(attach_TicketAllocations), new Action<TicketAllocations>(detach_TicketAllocations));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.TicketAllocations")]
    [DataContract()]
    public partial class TicketAllocations : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private int _EventId;
        private int _TicketId;
        private int _TicketRequestId;
        private byte _EventOwnerRoleId;
        private Guid _EventOwnerUserId;
        private byte _PatronRoleId;
        private Guid _PatronUserId;
        private EntityRef<TicketAllocationRoles> _TicketAllocationRoles;
        private EntityRef<TicketOwners> _TicketOwners;
        private EntityRef<TicketPatronageRoles> _TicketPatronageRoles;
        private EntityRef<UserRoles> _UserRoles;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnEventIdChanging(int value);

        partial void OnEventIdChanged();

        partial void OnTicketIdChanging(int value);

        partial void OnTicketIdChanged();

        partial void OnTicketRequestIdChanging(int value);

        partial void OnTicketRequestIdChanged();

        partial void OnEventOwnerRoleIdChanging(byte value);

        partial void OnEventOwnerRoleIdChanged();

        partial void OnEventOwnerUserIdChanging(Guid value);

        partial void OnEventOwnerUserIdChanged();

        partial void OnPatronRoleIdChanging(byte value);

        partial void OnPatronRoleIdChanged();

        partial void OnPatronUserIdChanging(Guid value);

        partial void OnPatronUserIdChanged();

        #endregion

        public TicketAllocations()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_EventId", DbType = "Int NOT NULL")]
        [DataMember(Order = 2)]
        public int EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if ((_EventId != value))
                {
                    OnEventIdChanging(value);
                    SendPropertyChanging();
                    _EventId = value;
                    SendPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }

        [Column(Storage = "_TicketId", DbType = "Int NOT NULL")]
        [DataMember(Order = 3)]
        public int TicketId
        {
            get
            {
                return _TicketId;
            }
            set
            {
                if ((_TicketId != value))
                {
                    if (_TicketOwners.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnTicketIdChanging(value);
                    SendPropertyChanging();
                    _TicketId = value;
                    SendPropertyChanged("TicketId");
                    OnTicketIdChanged();
                }
            }
        }

        [Column(Storage = "_TicketRequestId", DbType = "Int NOT NULL")]
        [DataMember(Order = 4)]
        public int TicketRequestId
        {
            get
            {
                return _TicketRequestId;
            }
            set
            {
                if ((_TicketRequestId != value))
                {
                    OnTicketRequestIdChanging(value);
                    SendPropertyChanging();
                    _TicketRequestId = value;
                    SendPropertyChanged("TicketRequestId");
                    OnTicketRequestIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 5)]
        public byte EventOwnerRoleId
        {
            get
            {
                return _EventOwnerRoleId;
            }
            set
            {
                if ((_EventOwnerRoleId != value))
                {
                    OnEventOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerRoleId = value;
                    SendPropertyChanged("EventOwnerRoleId");
                    OnEventOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 6)]
        public Guid EventOwnerUserId
        {
            get
            {
                return _EventOwnerUserId;
            }
            set
            {
                if ((_EventOwnerUserId != value))
                {
                    OnEventOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerUserId = value;
                    SendPropertyChanged("EventOwnerUserId");
                    OnEventOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_PatronRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 7)]
        public byte PatronRoleId
        {
            get
            {
                return _PatronRoleId;
            }
            set
            {
                if ((_PatronRoleId != value))
                {
                    if ((((_TicketAllocationRoles.HasLoadedOrAssignedValue || _TicketOwners.HasLoadedOrAssignedValue)
                          || _TicketPatronageRoles.HasLoadedOrAssignedValue)
                         || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnPatronRoleIdChanging(value);
                    SendPropertyChanging();
                    _PatronRoleId = value;
                    SendPropertyChanged("PatronRoleId");
                    OnPatronRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_PatronUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 8)]
        public Guid PatronUserId
        {
            get
            {
                return _PatronUserId;
            }
            set
            {
                if ((_PatronUserId != value))
                {
                    if ((_TicketOwners.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnPatronUserIdChanging(value);
                    SendPropertyChanging();
                    _PatronUserId = value;
                    SendPropertyChanged("PatronUserId");
                    OnPatronUserIdChanged();
                }
            }
        }

        [Association(Name = "FK_TicketAllocations_TicketAllocationRoles", Storage = "_TicketAllocationRoles", ThisKey = "PatronRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public TicketAllocationRoles TicketAllocationRoles
        {
            get
            {
                return _TicketAllocationRoles.Entity;
            }
            set
            {
                TicketAllocationRoles previousValue = _TicketAllocationRoles.Entity;
                if (((previousValue != value)
                     || (_TicketAllocationRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketAllocationRoles.Entity = null;
                        previousValue.TicketAllocations.Remove(this);
                    }
                    _TicketAllocationRoles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketAllocations.Add(this);
                        _PatronRoleId = value.RoleId;
                    }
                    else
                    {
                        _PatronRoleId = default(byte);
                    }
                    SendPropertyChanged("TicketAllocationRoles");
                }
            }
        }

        [Association(Name = "FK_TicketAllocations_TicketOwners", Storage = "_TicketOwners", ThisKey = "TicketId,PatronRoleId,PatronUserId", OtherKey = "TicketId,OwnerRoleId,OwnerUserId", IsForeignKey = true)]
        public TicketOwners TicketOwners
        {
            get
            {
                return _TicketOwners.Entity;
            }
            set
            {
                TicketOwners previousValue = _TicketOwners.Entity;
                if (((previousValue != value)
                     || (_TicketOwners.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketOwners.Entity = null;
                        previousValue.TicketAllocations.Remove(this);
                    }
                    _TicketOwners.Entity = value;
                    if ((value != null))
                    {
                        value.TicketAllocations.Add(this);
                        _TicketId = value.TicketId;
                        _PatronRoleId = value.OwnerRoleId;
                        _PatronUserId = value.OwnerUserId;
                    }
                    else
                    {
                        _TicketId = default(int);
                        _PatronRoleId = default(byte);
                        _PatronUserId = default(Guid);
                    }
                    SendPropertyChanged("TicketOwners");
                }
            }
        }

        [Association(Name = "FK_TicketAllocations_TicketPatronageRoles", Storage = "_TicketPatronageRoles", ThisKey = "PatronRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public TicketPatronageRoles TicketPatronageRoles
        {
            get
            {
                return _TicketPatronageRoles.Entity;
            }
            set
            {
                TicketPatronageRoles previousValue = _TicketPatronageRoles.Entity;
                if (((previousValue != value)
                     || (_TicketPatronageRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketPatronageRoles.Entity = null;
                        previousValue.TicketAllocations.Remove(this);
                    }
                    _TicketPatronageRoles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketAllocations.Add(this);
                        _PatronRoleId = value.RoleId;
                    }
                    else
                    {
                        _PatronRoleId = default(byte);
                    }
                    SendPropertyChanged("TicketPatronageRoles");
                }
            }
        }

        [Association(Name = "FK_TicketAllocations_UserRoles", Storage = "_UserRoles", ThisKey = "PatronRoleId,PatronUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.TicketAllocations.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketAllocations.Add(this);
                        _PatronRoleId = value.RoleId;
                        _PatronUserId = value.UserId;
                    }
                    else
                    {
                        _PatronRoleId = default(byte);
                        _PatronUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _TicketAllocationRoles = default(EntityRef<TicketAllocationRoles>);
            _TicketOwners = default(EntityRef<TicketOwners>);
            _TicketPatronageRoles = default(EntityRef<TicketPatronageRoles>);
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.TicketOwnerRoles")]
    [DataContract()]
    public partial class TicketOwnerRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;
        private EntitySet<TicketOwners> _TicketOwners;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public TicketOwnerRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_TicketOwnerRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.TicketOwnerRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketOwnerRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_TicketOwners_TicketOwnerRoles", Storage = "_TicketOwners", ThisKey = "RoleId", OtherKey = "OwnerRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<TicketOwners> TicketOwners
        {
            get
            {
                if ((serializing
                     && (_TicketOwners.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketOwners;
            }
            set
            {
                _TicketOwners.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_TicketOwners(TicketOwners entity)
        {
            SendPropertyChanging();
            entity.TicketOwnerRoles = this;
        }

        private void detach_TicketOwners(TicketOwners entity)
        {
            SendPropertyChanging();
            entity.TicketOwnerRoles = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _TicketOwners = new EntitySet<TicketOwners>(new Action<TicketOwners>(attach_TicketOwners), new Action<TicketOwners>(detach_TicketOwners));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.TicketOwners")]
    [DataContract()]
    public partial class TicketOwners : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _TicketId;
        private byte _OwnerRoleId;
        private Guid _OwnerUserId;
        private EntitySet<EventTickets> _EventTickets;
        private EntitySet<TicketAllocations> _TicketAllocations;
        private EntityRef<TicketOwnerRoles> _TicketOwnerRoles;
        private EntityRef<UserRoles> _UserRoles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnTicketIdChanging(int value);

        partial void OnTicketIdChanged();

        partial void OnOwnerRoleIdChanging(byte value);

        partial void OnOwnerRoleIdChanged();

        partial void OnOwnerUserIdChanging(Guid value);

        partial void OnOwnerUserIdChanged();

        #endregion

        public TicketOwners()
        {
            Initialize();
        }

        [Column(Storage = "_TicketId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int TicketId
        {
            get
            {
                return _TicketId;
            }
            set
            {
                if ((_TicketId != value))
                {
                    OnTicketIdChanging(value);
                    SendPropertyChanging();
                    _TicketId = value;
                    SendPropertyChanged("TicketId");
                    OnTicketIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public byte OwnerRoleId
        {
            get
            {
                return _OwnerRoleId;
            }
            set
            {
                if ((_OwnerRoleId != value))
                {
                    if ((_TicketOwnerRoles.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _OwnerRoleId = value;
                    SendPropertyChanged("OwnerRoleId");
                    OnOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_OwnerUserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 3)]
        public Guid OwnerUserId
        {
            get
            {
                return _OwnerUserId;
            }
            set
            {
                if ((_OwnerUserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _OwnerUserId = value;
                    SendPropertyChanged("OwnerUserId");
                    OnOwnerUserIdChanged();
                }
            }
        }

        [Association(Name = "FK_EventTickets_TicketOwners", Storage = "_EventTickets", ThisKey = "TicketId,OwnerRoleId,OwnerUserId", OtherKey = "TicketId,EventOwnerRoleId,EventOwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 4, EmitDefaultValue = false)]
        public EntitySet<EventTickets> EventTickets
        {
            get
            {
                if ((serializing
                     && (_EventTickets.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _EventTickets;
            }
            set
            {
                _EventTickets.Assign(value);
            }
        }

        [Association(Name = "FK_TicketAllocations_TicketOwners", Storage = "_TicketAllocations", ThisKey = "TicketId,OwnerRoleId,OwnerUserId", OtherKey = "TicketId,PatronRoleId,PatronUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 5, EmitDefaultValue = false)]
        public EntitySet<TicketAllocations> TicketAllocations
        {
            get
            {
                if ((serializing
                     && (_TicketAllocations.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketAllocations;
            }
            set
            {
                _TicketAllocations.Assign(value);
            }
        }

        [Association(Name = "FK_TicketOwners_TicketOwnerRoles", Storage = "_TicketOwnerRoles", ThisKey = "OwnerRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public TicketOwnerRoles TicketOwnerRoles
        {
            get
            {
                return _TicketOwnerRoles.Entity;
            }
            set
            {
                TicketOwnerRoles previousValue = _TicketOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_TicketOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketOwnerRoles.Entity = null;
                        previousValue.TicketOwners.Remove(this);
                    }
                    _TicketOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketOwners.Add(this);
                        _OwnerRoleId = value.RoleId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                    }
                    SendPropertyChanged("TicketOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_TicketOwners_UserRoles", Storage = "_UserRoles", ThisKey = "OwnerRoleId,OwnerUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.TicketOwners.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketOwners.Add(this);
                        _OwnerRoleId = value.RoleId;
                        _OwnerUserId = value.UserId;
                    }
                    else
                    {
                        _OwnerRoleId = default(byte);
                        _OwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_EventTickets(EventTickets entity)
        {
            SendPropertyChanging();
            entity.TicketOwners = this;
        }

        private void detach_EventTickets(EventTickets entity)
        {
            SendPropertyChanging();
            entity.TicketOwners = null;
        }

        private void attach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.TicketOwners = this;
        }

        private void detach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.TicketOwners = null;
        }

        private void Initialize()
        {
            _EventTickets = new EntitySet<EventTickets>(new Action<EventTickets>(attach_EventTickets), new Action<EventTickets>(detach_EventTickets));
            _TicketAllocations = new EntitySet<TicketAllocations>(new Action<TicketAllocations>(attach_TicketAllocations), new Action<TicketAllocations>(detach_TicketAllocations));
            _TicketOwnerRoles = default(EntityRef<TicketOwnerRoles>);
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.TicketPatronageRoles")]
    [DataContract()]
    public partial class TicketPatronageRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntitySet<TicketAllocations> _TicketAllocations;
        private EntityRef<Roles> _Roles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public TicketPatronageRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_TicketAllocations_TicketPatronageRoles", Storage = "_TicketAllocations", ThisKey = "RoleId", OtherKey = "PatronRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<TicketAllocations> TicketAllocations
        {
            get
            {
                if ((serializing
                     && (_TicketAllocations.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketAllocations;
            }
            set
            {
                _TicketAllocations.Assign(value);
            }
        }

        [Association(Name = "FK_TicketPatronageRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.TicketPatronageRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketPatronageRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.TicketPatronageRoles = this;
        }

        private void detach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.TicketPatronageRoles = null;
        }

        private void Initialize()
        {
            _TicketAllocations = new EntitySet<TicketAllocations>(new Action<TicketAllocations>(attach_TicketAllocations), new Action<TicketAllocations>(detach_TicketAllocations));
            _Roles = default(EntityRef<Roles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.TicketRequestorRoles")]
    [DataContract()]
    public partial class TicketRequestorRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;
        private EntitySet<TicketRequests> _TicketRequests;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public TicketRequestorRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_TicketRequestRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.TicketRequestorRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketRequestorRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_TicketRequests_TicketRequestRoles", Storage = "_TicketRequests", ThisKey = "RoleId", OtherKey = "RequestorRoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<TicketRequests> TicketRequests
        {
            get
            {
                if ((serializing
                     && (_TicketRequests.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketRequests;
            }
            set
            {
                _TicketRequests.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.TicketRequestorRoles = this;
        }

        private void detach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.TicketRequestorRoles = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _TicketRequests = new EntitySet<TicketRequests>(new Action<TicketRequests>(attach_TicketRequests), new Action<TicketRequests>(detach_TicketRequests));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.TicketRequests")]
    [DataContract()]
    public partial class TicketRequests : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private int _TicketId;
        private byte _RequestorRoleId;
        private Guid _RequestorUserId;
        private int _EventId;
        private byte _EventOwnerRoleId;
        private Guid _EventOwnerUserId;
        private int _Amount;
        private EntityRef<EventTickets> _EventTickets;
        private EntityRef<TicketRequestorRoles> _TicketRequestorRoles;
        private EntityRef<UserRelationships> _UserRelationships;
        private EntityRef<UserRoles> _UserRoles;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnTicketIdChanging(int value);

        partial void OnTicketIdChanged();

        partial void OnRequestorRoleIdChanging(byte value);

        partial void OnRequestorRoleIdChanged();

        partial void OnRequestorUserIdChanging(Guid value);

        partial void OnRequestorUserIdChanged();

        partial void OnEventIdChanging(int value);

        partial void OnEventIdChanged();

        partial void OnEventOwnerRoleIdChanging(byte value);

        partial void OnEventOwnerRoleIdChanged();

        partial void OnEventOwnerUserIdChanging(Guid value);

        partial void OnEventOwnerUserIdChanged();

        partial void OnAmountChanging(int value);

        partial void OnAmountChanged();

        #endregion

        public TicketRequests()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_TicketId", DbType = "Int NOT NULL")]
        [DataMember(Order = 2)]
        public int TicketId
        {
            get
            {
                return _TicketId;
            }
            set
            {
                if ((_TicketId != value))
                {
                    if (_EventTickets.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnTicketIdChanging(value);
                    SendPropertyChanging();
                    _TicketId = value;
                    SendPropertyChanged("TicketId");
                    OnTicketIdChanged();
                }
            }
        }

        [Column(Storage = "_RequestorRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 3)]
        public byte RequestorRoleId
        {
            get
            {
                return _RequestorRoleId;
            }
            set
            {
                if ((_RequestorRoleId != value))
                {
                    if (((_TicketRequestorRoles.HasLoadedOrAssignedValue || _UserRelationships.HasLoadedOrAssignedValue)
                         || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRequestorRoleIdChanging(value);
                    SendPropertyChanging();
                    _RequestorRoleId = value;
                    SendPropertyChanged("RequestorRoleId");
                    OnRequestorRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_RequestorUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 4)]
        public Guid RequestorUserId
        {
            get
            {
                return _RequestorUserId;
            }
            set
            {
                if ((_RequestorUserId != value))
                {
                    if ((_UserRelationships.HasLoadedOrAssignedValue || _UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRequestorUserIdChanging(value);
                    SendPropertyChanging();
                    _RequestorUserId = value;
                    SendPropertyChanged("RequestorUserId");
                    OnRequestorUserIdChanged();
                }
            }
        }

        [Column(Storage = "_EventId", DbType = "Int NOT NULL")]
        [DataMember(Order = 5)]
        public int EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if ((_EventId != value))
                {
                    if (_EventTickets.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventIdChanging(value);
                    SendPropertyChanging();
                    _EventId = value;
                    SendPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerRoleId", DbType = "TinyInt NOT NULL")]
        [DataMember(Order = 6)]
        public byte EventOwnerRoleId
        {
            get
            {
                return _EventOwnerRoleId;
            }
            set
            {
                if ((_EventOwnerRoleId != value))
                {
                    if ((_EventTickets.HasLoadedOrAssignedValue || _UserRelationships.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventOwnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerRoleId = value;
                    SendPropertyChanged("EventOwnerRoleId");
                    OnEventOwnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_EventOwnerUserId", DbType = "UniqueIdentifier NOT NULL")]
        [DataMember(Order = 7)]
        public Guid EventOwnerUserId
        {
            get
            {
                return _EventOwnerUserId;
            }
            set
            {
                if ((_EventOwnerUserId != value))
                {
                    if ((_EventTickets.HasLoadedOrAssignedValue || _UserRelationships.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnEventOwnerUserIdChanging(value);
                    SendPropertyChanging();
                    _EventOwnerUserId = value;
                    SendPropertyChanged("EventOwnerUserId");
                    OnEventOwnerUserIdChanged();
                }
            }
        }

        [Column(Storage = "_Amount", DbType = "Int NOT NULL")]
        [DataMember(Order = 8)]
        public int Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                if ((_Amount != value))
                {
                    OnAmountChanging(value);
                    SendPropertyChanging();
                    _Amount = value;
                    SendPropertyChanged("Amount");
                    OnAmountChanged();
                }
            }
        }

        [Association(Name = "FK_TicketRequests_EventTickets", Storage = "_EventTickets", ThisKey = "EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", OtherKey = "EventId,EventOwnerRoleId,EventOwnerUserId,TicketId", IsForeignKey = true)]
        public EventTickets EventTickets
        {
            get
            {
                return _EventTickets.Entity;
            }
            set
            {
                EventTickets previousValue = _EventTickets.Entity;
                if (((previousValue != value)
                     || (_EventTickets.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _EventTickets.Entity = null;
                        previousValue.TicketRequests.Remove(this);
                    }
                    _EventTickets.Entity = value;
                    if ((value != null))
                    {
                        value.TicketRequests.Add(this);
                        _EventId = value.EventId;
                        _EventOwnerRoleId = value.EventOwnerRoleId;
                        _EventOwnerUserId = value.EventOwnerUserId;
                        _TicketId = value.TicketId;
                    }
                    else
                    {
                        _EventId = default(int);
                        _EventOwnerRoleId = default(byte);
                        _EventOwnerUserId = default(Guid);
                        _TicketId = default(int);
                    }
                    SendPropertyChanged("EventTickets");
                }
            }
        }

        [Association(Name = "FK_TicketRequests_TicketRequestRoles", Storage = "_TicketRequestorRoles", ThisKey = "RequestorRoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public TicketRequestorRoles TicketRequestorRoles
        {
            get
            {
                return _TicketRequestorRoles.Entity;
            }
            set
            {
                TicketRequestorRoles previousValue = _TicketRequestorRoles.Entity;
                if (((previousValue != value)
                     || (_TicketRequestorRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _TicketRequestorRoles.Entity = null;
                        previousValue.TicketRequests.Remove(this);
                    }
                    _TicketRequestorRoles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketRequests.Add(this);
                        _RequestorRoleId = value.RoleId;
                    }
                    else
                    {
                        _RequestorRoleId = default(byte);
                    }
                    SendPropertyChanged("TicketRequestorRoles");
                }
            }
        }

        [Association(Name = "FK_TicketRequests_UserRelationships", Storage = "_UserRelationships", ThisKey = "RequestorRoleId,RequestorUserId,EventOwnerRoleId,EventOwnerUserId", OtherKey = "RoleId,UserId,PartnerRoleId,PartnerUserId", IsForeignKey = true)]
        public UserRelationships UserRelationships
        {
            get
            {
                return _UserRelationships.Entity;
            }
            set
            {
                UserRelationships previousValue = _UserRelationships.Entity;
                if (((previousValue != value)
                     || (_UserRelationships.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRelationships.Entity = null;
                        previousValue.TicketRequests.Remove(this);
                    }
                    _UserRelationships.Entity = value;
                    if ((value != null))
                    {
                        value.TicketRequests.Add(this);
                        _RequestorRoleId = value.RoleId;
                        _RequestorUserId = value.UserId;
                        _EventOwnerRoleId = value.PartnerRoleId;
                        _EventOwnerUserId = value.PartnerUserId;
                    }
                    else
                    {
                        _RequestorRoleId = default(byte);
                        _RequestorUserId = default(Guid);
                        _EventOwnerRoleId = default(byte);
                        _EventOwnerUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRelationships");
                }
            }
        }

        [Association(Name = "FK_TicketRequests_UserRoles", Storage = "_UserRoles", ThisKey = "RequestorRoleId,RequestorUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.TicketRequests.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.TicketRequests.Add(this);
                        _RequestorRoleId = value.RoleId;
                        _RequestorUserId = value.UserId;
                    }
                    else
                    {
                        _RequestorRoleId = default(byte);
                        _RequestorUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            _EventTickets = default(EntityRef<EventTickets>);
            _TicketRequestorRoles = default(EntityRef<TicketRequestorRoles>);
            _UserRelationships = default(EntityRef<UserRelationships>);
            _UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Tickets")]
    [DataContract()]
    public partial class Tickets : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private string _Name;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnNameChanging(string value);

        partial void OnNameChanged();

        #endregion

        public Tickets()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if ((_Name != value))
                {
                    OnNameChanging(value);
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void Initialize()
        {
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.UserRelationships")]
    [DataContract()]
    public partial class UserRelationships : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private Guid _UserId;
        private byte _PartnerRoleId;
        private Guid _PartnerUserId;
        private EntitySet<EventFieldValues> _EventFieldValues;
        private EntitySet<TicketRequests> _TicketRequests;
        private EntityRef<UserRoles> _UserRoles;
        private EntityRef<RoleRelationships> _RoleRelationships;
        private EntityRef<UserRoles> _UserRelationships_UserRoles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        partial void OnUserIdChanging(Guid value);

        partial void OnUserIdChanged();

        partial void OnPartnerRoleIdChanging(byte value);

        partial void OnPartnerRoleIdChanged();

        partial void OnPartnerUserIdChanging(Guid value);

        partial void OnPartnerUserIdChanged();

        #endregion

        public UserRelationships()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if ((_RoleRelationships.HasLoadedOrAssignedValue || _UserRelationships_UserRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_UserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if ((_UserId != value))
                {
                    if (_UserRelationships_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIdChanging(value);
                    SendPropertyChanging();
                    _UserId = value;
                    SendPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }

        [Column(Storage = "_PartnerRoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 3)]
        public byte PartnerRoleId
        {
            get
            {
                return _PartnerRoleId;
            }
            set
            {
                if ((_PartnerRoleId != value))
                {
                    if ((_UserRoles.HasLoadedOrAssignedValue || _RoleRelationships.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnPartnerRoleIdChanging(value);
                    SendPropertyChanging();
                    _PartnerRoleId = value;
                    SendPropertyChanged("PartnerRoleId");
                    OnPartnerRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_PartnerUserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 4)]
        public Guid PartnerUserId
        {
            get
            {
                return _PartnerUserId;
            }
            set
            {
                if ((_PartnerUserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnPartnerUserIdChanging(value);
                    SendPropertyChanging();
                    _PartnerUserId = value;
                    SendPropertyChanged("PartnerUserId");
                    OnPartnerUserIdChanged();
                }
            }
        }

        [Association(Name = "FK_EventFieldValues_UserRelationships", Storage = "_EventFieldValues", ThisKey = "RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey = "EventOwnerRoleId,EventOwnerUserId,SubmittingRoleId,SubmittingUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 5, EmitDefaultValue = false)]
        public EntitySet<EventFieldValues> EventFieldValues
        {
            get
            {
                if ((serializing
                     && (_EventFieldValues.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _EventFieldValues;
            }
            set
            {
                _EventFieldValues.Assign(value);
            }
        }

        [Association(Name = "FK_TicketRequests_UserRelationships", Storage = "_TicketRequests", ThisKey = "RoleId,UserId,PartnerRoleId,PartnerUserId", OtherKey = "RequestorRoleId,RequestorUserId,EventOwnerRoleId,EventOwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 6, EmitDefaultValue = false)]
        public EntitySet<TicketRequests> TicketRequests
        {
            get
            {
                if ((serializing
                     && (_TicketRequests.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketRequests;
            }
            set
            {
                _TicketRequests.Assign(value);
            }
        }

        [Association(Name = "FK_UserRelationships_PartnerUserRoles", Storage = "_UserRoles", ThisKey = "PartnerRoleId,PartnerUserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.UserRelationships.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.UserRelationships.Add(this);
                        _PartnerRoleId = value.RoleId;
                        _PartnerUserId = value.UserId;
                    }
                    else
                    {
                        _PartnerRoleId = default(byte);
                        _PartnerUserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [Association(Name = "FK_UserRelationships_RoleRelationships", Storage = "_RoleRelationships", ThisKey = "RoleId,PartnerRoleId", OtherKey = "RoleId,PartnerRoleId", IsForeignKey = true)]
        public RoleRelationships RoleRelationships
        {
            get
            {
                return _RoleRelationships.Entity;
            }
            set
            {
                RoleRelationships previousValue = _RoleRelationships.Entity;
                if (((previousValue != value)
                     || (_RoleRelationships.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _RoleRelationships.Entity = null;
                        previousValue.UserRelationships.Remove(this);
                    }
                    _RoleRelationships.Entity = value;
                    if ((value != null))
                    {
                        value.UserRelationships.Add(this);
                        _RoleId = value.RoleId;
                        _PartnerRoleId = value.PartnerRoleId;
                    }
                    else
                    {
                        _RoleId = default(byte);
                        _PartnerRoleId = default(byte);
                    }
                    SendPropertyChanged("RoleRelationships");
                }
            }
        }

        [Association(Name = "FK_UserRelationships_UserRoles", Storage = "_UserRelationships_UserRoles", ThisKey = "RoleId,UserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRelationships_UserRoles
        {
            get
            {
                return _UserRelationships_UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRelationships_UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRelationships_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRelationships_UserRoles.Entity = null;
                        previousValue.UserRelationships_UserRoles.Remove(this);
                    }
                    _UserRelationships_UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.UserRelationships_UserRoles.Add(this);
                        _RoleId = value.RoleId;
                        _UserId = value.UserId;
                    }
                    else
                    {
                        _RoleId = default(byte);
                        _UserId = default(Guid);
                    }
                    SendPropertyChanged("UserRelationships_UserRoles");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_EventFieldValues(EventFieldValues entity)
        {
            SendPropertyChanging();
            entity.UserRelationships = this;
        }

        private void detach_EventFieldValues(EventFieldValues entity)
        {
            SendPropertyChanging();
            entity.UserRelationships = null;
        }

        private void attach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.UserRelationships = this;
        }

        private void detach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.UserRelationships = null;
        }

        private void Initialize()
        {
            _EventFieldValues = new EntitySet<EventFieldValues>(new Action<EventFieldValues>(attach_EventFieldValues), new Action<EventFieldValues>(detach_EventFieldValues));
            _TicketRequests = new EntitySet<TicketRequests>(new Action<TicketRequests>(attach_TicketRequests), new Action<TicketRequests>(detach_TicketRequests));
            _UserRoles = default(EntityRef<UserRoles>);
            _RoleRelationships = default(EntityRef<RoleRelationships>);
            _UserRelationships_UserRoles = default(EntityRef<UserRoles>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.UserRoles")]
    [DataContract()]
    public partial class UserRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private Guid _UserId;
        private bool _Active;
        private EntitySet<Divisions> _Divisions;
        private EntitySet<Domains> _Domains;
        private EntitySet<Events> _Events;
        private EntitySet<LocalAccounts> _LocalAccounts;
        private EntitySet<ResourceOverrides> _ResourceOverrides;
        private EntitySet<TicketAllocations> _TicketAllocations;
        private EntitySet<TicketOwners> _TicketOwners;
        private EntitySet<TicketRequests> _TicketRequests;
        private EntitySet<UserRelationships> _UserRelationships;
        private EntitySet<UserRelationships> _UserRelationships_UserRoles;
        private EntityRef<Roles> _Roles;
        private EntityRef<Users> _Users;
        private EntitySet<VenueOwners> _VenueOwners;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        partial void OnUserIdChanging(Guid value);

        partial void OnUserIdChanged();

        partial void OnActiveChanging(bool value);

        partial void OnActiveChanged();

        #endregion

        public UserRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_UserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if ((_UserId != value))
                {
                    if (_Users.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIdChanging(value);
                    SendPropertyChanging();
                    _UserId = value;
                    SendPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit NOT NULL")]
        [DataMember(Order = 3)]
        public bool Active
        {
            get
            {
                return _Active;
            }
            set
            {
                if ((_Active != value))
                {
                    OnActiveChanging(value);
                    SendPropertyChanging();
                    _Active = value;
                    SendPropertyChanged("Active");
                    OnActiveChanged();
                }
            }
        }

        [Association(Name = "FK_Divisions_UserRoles", Storage = "_Divisions", ThisKey = "RoleId,UserId", OtherKey = "OwnerRoleId,OwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 4, EmitDefaultValue = false)]
        public EntitySet<Divisions> Divisions
        {
            get
            {
                if ((serializing
                     && (_Divisions.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _Divisions;
            }
            set
            {
                _Divisions.Assign(value);
            }
        }

        [Association(Name = "FK_Domains_UserRoles", Storage = "_Domains", ThisKey = "RoleId,UserId", OtherKey = "OwnerRoleId,OwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 5, EmitDefaultValue = false)]
        public EntitySet<Domains> Domains
        {
            get
            {
                if ((serializing
                     && (_Domains.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _Domains;
            }
            set
            {
                _Domains.Assign(value);
            }
        }

        [Association(Name = "FK_Events_UserRoles", Storage = "_Events", ThisKey = "RoleId,UserId", OtherKey = "OwnerRoleId,OwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 6, EmitDefaultValue = false)]
        public EntitySet<Events> Events
        {
            get
            {
                if ((serializing
                     && (_Events.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _Events;
            }
            set
            {
                _Events.Assign(value);
            }
        }

        [Association(Name = "FK_LocalAccount_UserRoles", Storage = "_LocalAccounts", ThisKey = "RoleId,UserId", OtherKey = "RoleId,UserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 7, EmitDefaultValue = false)]
        public EntitySet<LocalAccounts> LocalAccounts
        {
            get
            {
                if ((serializing
                     && (_LocalAccounts.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _LocalAccounts;
            }
            set
            {
                _LocalAccounts.Assign(value);
            }
        }

        [Association(Name = "FK_ResourceOverrides_UserRoles", Storage = "_ResourceOverrides", ThisKey = "RoleId,UserId", OtherKey = "OwnerRoleId,OwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 8, EmitDefaultValue = false)]
        public EntitySet<ResourceOverrides> ResourceOverrides
        {
            get
            {
                if ((serializing
                     && (_ResourceOverrides.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _ResourceOverrides;
            }
            set
            {
                _ResourceOverrides.Assign(value);
            }
        }

        [Association(Name = "FK_TicketAllocations_UserRoles", Storage = "_TicketAllocations", ThisKey = "RoleId,UserId", OtherKey = "PatronRoleId,PatronUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 9, EmitDefaultValue = false)]
        public EntitySet<TicketAllocations> TicketAllocations
        {
            get
            {
                if ((serializing
                     && (_TicketAllocations.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketAllocations;
            }
            set
            {
                _TicketAllocations.Assign(value);
            }
        }

        [Association(Name = "FK_TicketOwners_UserRoles", Storage = "_TicketOwners", ThisKey = "RoleId,UserId", OtherKey = "OwnerRoleId,OwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 10, EmitDefaultValue = false)]
        public EntitySet<TicketOwners> TicketOwners
        {
            get
            {
                if ((serializing
                     && (_TicketOwners.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketOwners;
            }
            set
            {
                _TicketOwners.Assign(value);
            }
        }

        [Association(Name = "FK_TicketRequests_UserRoles", Storage = "_TicketRequests", ThisKey = "RoleId,UserId", OtherKey = "RequestorRoleId,RequestorUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 11, EmitDefaultValue = false)]
        public EntitySet<TicketRequests> TicketRequests
        {
            get
            {
                if ((serializing
                     && (_TicketRequests.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _TicketRequests;
            }
            set
            {
                _TicketRequests.Assign(value);
            }
        }

        [Association(Name = "FK_UserRelationships_PartnerUserRoles", Storage = "_UserRelationships", ThisKey = "RoleId,UserId", OtherKey = "PartnerRoleId,PartnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 12, EmitDefaultValue = false)]
        public EntitySet<UserRelationships> UserRelationships
        {
            get
            {
                if ((serializing
                     && (_UserRelationships.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _UserRelationships;
            }
            set
            {
                _UserRelationships.Assign(value);
            }
        }

        [Association(Name = "FK_UserRelationships_UserRoles", Storage = "_UserRelationships_UserRoles", ThisKey = "RoleId,UserId", OtherKey = "RoleId,UserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 13, EmitDefaultValue = false)]
        public EntitySet<UserRelationships> UserRelationships_UserRoles
        {
            get
            {
                if ((serializing
                     && (_UserRelationships_UserRoles.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _UserRelationships_UserRoles;
            }
            set
            {
                _UserRelationships_UserRoles.Assign(value);
            }
        }

        [Association(Name = "FK_UserRole_Role", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.UserRoles.Remove(this);
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.UserRoles.Add(this);
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_UserRole_User", Storage = "_Users", ThisKey = "UserId", OtherKey = "Id", IsForeignKey = true)]
        public Users Users
        {
            get
            {
                return _Users.Entity;
            }
            set
            {
                Users previousValue = _Users.Entity;
                if (((previousValue != value)
                     || (_Users.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Users.Entity = null;
                        previousValue.UserRoles.Remove(this);
                    }
                    _Users.Entity = value;
                    if ((value != null))
                    {
                        value.UserRoles.Add(this);
                        _UserId = value.Id;
                    }
                    else
                    {
                        _UserId = default(Guid);
                    }
                    SendPropertyChanged("Users");
                }
            }
        }

        [Association(Name = "FK_VenueOwners_UserRoles", Storage = "_VenueOwners", ThisKey = "RoleId,UserId", OtherKey = "RoleId,UserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 14, EmitDefaultValue = false)]
        public EntitySet<VenueOwners> VenueOwners
        {
            get
            {
                if ((serializing
                     && (_VenueOwners.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _VenueOwners;
            }
            set
            {
                _VenueOwners.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Divisions(Divisions entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_Divisions(Divisions entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_Domains(Domains entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_Domains(Domains entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_Events(Events entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_Events(Events entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_LocalAccounts(LocalAccounts entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_LocalAccounts(LocalAccounts entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_ResourceOverrides(ResourceOverrides entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_ResourceOverrides(ResourceOverrides entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_TicketAllocations(TicketAllocations entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_TicketOwners(TicketOwners entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_TicketOwners(TicketOwners entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_TicketRequests(TicketRequests entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_UserRelationships(UserRelationships entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_UserRelationships(UserRelationships entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void attach_UserRelationships_UserRoles(UserRelationships entity)
        {
            SendPropertyChanging();
            entity.UserRelationships_UserRoles = this;
        }

        private void detach_UserRelationships_UserRoles(UserRelationships entity)
        {
            SendPropertyChanging();
            entity.UserRelationships_UserRoles = null;
        }

        private void attach_VenueOwners(VenueOwners entity)
        {
            SendPropertyChanging();
            entity.UserRoles = this;
        }

        private void detach_VenueOwners(VenueOwners entity)
        {
            SendPropertyChanging();
            entity.UserRoles = null;
        }

        private void Initialize()
        {
            _Divisions = new EntitySet<Divisions>(new Action<Divisions>(attach_Divisions), new Action<Divisions>(detach_Divisions));
            _Domains = new EntitySet<Domains>(new Action<Domains>(attach_Domains), new Action<Domains>(detach_Domains));
            _Events = new EntitySet<Events>(new Action<Events>(attach_Events), new Action<Events>(detach_Events));
            _LocalAccounts = new EntitySet<LocalAccounts>(new Action<LocalAccounts>(attach_LocalAccounts), new Action<LocalAccounts>(detach_LocalAccounts));
            _ResourceOverrides = new EntitySet<ResourceOverrides>(new Action<ResourceOverrides>(attach_ResourceOverrides), new Action<ResourceOverrides>(detach_ResourceOverrides));
            _TicketAllocations = new EntitySet<TicketAllocations>(new Action<TicketAllocations>(attach_TicketAllocations), new Action<TicketAllocations>(detach_TicketAllocations));
            _TicketOwners = new EntitySet<TicketOwners>(new Action<TicketOwners>(attach_TicketOwners), new Action<TicketOwners>(detach_TicketOwners));
            _TicketRequests = new EntitySet<TicketRequests>(new Action<TicketRequests>(attach_TicketRequests), new Action<TicketRequests>(detach_TicketRequests));
            _UserRelationships = new EntitySet<UserRelationships>(new Action<UserRelationships>(attach_UserRelationships), new Action<UserRelationships>(detach_UserRelationships));
            _UserRelationships_UserRoles = new EntitySet<UserRelationships>(new Action<UserRelationships>(attach_UserRelationships_UserRoles), new Action<UserRelationships>(detach_UserRelationships_UserRoles));
            _Roles = default(EntityRef<Roles>);
            _Users = default(EntityRef<Users>);
            _VenueOwners = new EntitySet<VenueOwners>(new Action<VenueOwners>(attach_VenueOwners), new Action<VenueOwners>(detach_VenueOwners));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Users")]
    [DataContract()]
    public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private Guid _Id;
        private string _UserName;
        private bool _Active;
        private EntitySet<UserRoles> _UserRoles;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(Guid value);

        partial void OnIdChanged();

        partial void OnUserNameChanging(string value);

        partial void OnUserNameChanged();

        partial void OnActiveChanging(bool value);

        partial void OnActiveChanged();

        #endregion

        public Users()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_UserName", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                if ((_UserName != value))
                {
                    OnUserNameChanging(value);
                    SendPropertyChanging();
                    _UserName = value;
                    SendPropertyChanged("UserName");
                    OnUserNameChanged();
                }
            }
        }

        [Column(Storage = "_Active", DbType = "Bit NOT NULL")]
        [DataMember(Order = 3)]
        public bool Active
        {
            get
            {
                return _Active;
            }
            set
            {
                if ((_Active != value))
                {
                    OnActiveChanging(value);
                    SendPropertyChanging();
                    _Active = value;
                    SendPropertyChanged("Active");
                    OnActiveChanged();
                }
            }
        }

        [Association(Name = "FK_UserRole_User", Storage = "_UserRoles", ThisKey = "Id", OtherKey = "UserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 4, EmitDefaultValue = false)]
        public EntitySet<UserRoles> UserRoles
        {
            get
            {
                if ((serializing
                     && (_UserRoles.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _UserRoles;
            }
            set
            {
                _UserRoles.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_UserRoles(UserRoles entity)
        {
            SendPropertyChanging();
            entity.Users = this;
        }

        private void detach_UserRoles(UserRoles entity)
        {
            SendPropertyChanging();
            entity.Users = null;
        }

        private void Initialize()
        {
            _UserRoles = new EntitySet<UserRoles>(new Action<UserRoles>(attach_UserRoles), new Action<UserRoles>(detach_UserRoles));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.VenueOwnerRoles")]
    [DataContract()]
    public partial class VenueOwnerRoles : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private byte _RoleId;
        private EntityRef<Roles> _Roles;
        private EntitySet<VenueOwners> _VenueOwners;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        #endregion

        public VenueOwnerRoles()
        {
            Initialize();
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if (_Roles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Association(Name = "FK_VenueOwnerRoles_Roles", Storage = "_Roles", ThisKey = "RoleId", OtherKey = "Id", IsForeignKey = true)]
        public Roles Roles
        {
            get
            {
                return _Roles.Entity;
            }
            set
            {
                Roles previousValue = _Roles.Entity;
                if (((previousValue != value)
                     || (_Roles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Roles.Entity = null;
                        previousValue.VenueOwnerRoles = null;
                    }
                    _Roles.Entity = value;
                    if ((value != null))
                    {
                        value.VenueOwnerRoles = this;
                        _RoleId = value.Id;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("Roles");
                }
            }
        }

        [Association(Name = "FK_VenueOwners_VenueOwnerRoles", Storage = "_VenueOwners", ThisKey = "RoleId", OtherKey = "RoleId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 2, EmitDefaultValue = false)]
        public EntitySet<VenueOwners> VenueOwners
        {
            get
            {
                if ((serializing
                     && (_VenueOwners.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _VenueOwners;
            }
            set
            {
                _VenueOwners.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_VenueOwners(VenueOwners entity)
        {
            SendPropertyChanging();
            entity.VenueOwnerRoles = this;
        }

        private void detach_VenueOwners(VenueOwners entity)
        {
            SendPropertyChanging();
            entity.VenueOwnerRoles = null;
        }

        private void Initialize()
        {
            _Roles = default(EntityRef<Roles>);
            _VenueOwners = new EntitySet<VenueOwners>(new Action<VenueOwners>(attach_VenueOwners), new Action<VenueOwners>(detach_VenueOwners));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.VenueOwners")]
    [DataContract()]
    public partial class VenueOwners : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _VenueId;
        private byte _RoleId;
        private Guid _UserId;
        private EntitySet<EventVenues> _EventVenues;
        private EntityRef<UserRoles> _UserRoles;
        private EntityRef<VenueOwnerRoles> _VenueOwnerRoles;
        private EntityRef<Venues> _Venues;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnVenueIdChanging(int value);

        partial void OnVenueIdChanged();

        partial void OnRoleIdChanging(byte value);

        partial void OnRoleIdChanged();

        partial void OnUserIdChanging(Guid value);

        partial void OnUserIdChanged();

        #endregion

        public VenueOwners()
        {
            Initialize();
        }

        [Column(Storage = "_VenueId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int VenueId
        {
            get
            {
                return _VenueId;
            }
            set
            {
                if ((_VenueId != value))
                {
                    if (_Venues.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnVenueIdChanging(value);
                    SendPropertyChanging();
                    _VenueId = value;
                    SendPropertyChanged("VenueId");
                    OnVenueIdChanged();
                }
            }
        }

        [Column(Storage = "_RoleId", DbType = "TinyInt NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 2)]
        public byte RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if ((_RoleId != value))
                {
                    if ((_UserRoles.HasLoadedOrAssignedValue || _VenueOwnerRoles.HasLoadedOrAssignedValue))
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnRoleIdChanging(value);
                    SendPropertyChanging();
                    _RoleId = value;
                    SendPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }

        [Column(Storage = "_UserId", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 3)]
        public Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if ((_UserId != value))
                {
                    if (_UserRoles.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIdChanging(value);
                    SendPropertyChanging();
                    _UserId = value;
                    SendPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }

        [Association(Name = "FK_EventVenues_VenueOwners", Storage = "_EventVenues", ThisKey = "VenueId,RoleId,UserId", OtherKey = "EventId,OwnerRoleId,OwnerUserId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 4, EmitDefaultValue = false)]
        public EntitySet<EventVenues> EventVenues
        {
            get
            {
                if ((serializing
                     && (_EventVenues.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _EventVenues;
            }
            set
            {
                _EventVenues.Assign(value);
            }
        }

        [Association(Name = "FK_VenueOwners_UserRoles", Storage = "_UserRoles", ThisKey = "RoleId,UserId", OtherKey = "RoleId,UserId", IsForeignKey = true)]
        public UserRoles UserRoles
        {
            get
            {
                return _UserRoles.Entity;
            }
            set
            {
                UserRoles previousValue = _UserRoles.Entity;
                if (((previousValue != value)
                     || (_UserRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _UserRoles.Entity = null;
                        previousValue.VenueOwners.Remove(this);
                    }
                    _UserRoles.Entity = value;
                    if ((value != null))
                    {
                        value.VenueOwners.Add(this);
                        _RoleId = value.RoleId;
                        _UserId = value.UserId;
                    }
                    else
                    {
                        _RoleId = default(byte);
                        _UserId = default(Guid);
                    }
                    SendPropertyChanged("UserRoles");
                }
            }
        }

        [Association(Name = "FK_VenueOwners_VenueOwnerRoles", Storage = "_VenueOwnerRoles", ThisKey = "RoleId", OtherKey = "RoleId", IsForeignKey = true)]
        public VenueOwnerRoles VenueOwnerRoles
        {
            get
            {
                return _VenueOwnerRoles.Entity;
            }
            set
            {
                VenueOwnerRoles previousValue = _VenueOwnerRoles.Entity;
                if (((previousValue != value)
                     || (_VenueOwnerRoles.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _VenueOwnerRoles.Entity = null;
                        previousValue.VenueOwners.Remove(this);
                    }
                    _VenueOwnerRoles.Entity = value;
                    if ((value != null))
                    {
                        value.VenueOwners.Add(this);
                        _RoleId = value.RoleId;
                    }
                    else
                    {
                        _RoleId = default(byte);
                    }
                    SendPropertyChanged("VenueOwnerRoles");
                }
            }
        }

        [Association(Name = "FK_VenueOwners_Venues", Storage = "_Venues", ThisKey = "VenueId", OtherKey = "Id", IsForeignKey = true)]
        public Venues Venues
        {
            get
            {
                return _Venues.Entity;
            }
            set
            {
                Venues previousValue = _Venues.Entity;
                if (((previousValue != value)
                     || (_Venues.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _Venues.Entity = null;
                        previousValue.VenueOwners.Remove(this);
                    }
                    _Venues.Entity = value;
                    if ((value != null))
                    {
                        value.VenueOwners.Add(this);
                        _VenueId = value.Id;
                    }
                    else
                    {
                        _VenueId = default(int);
                    }
                    SendPropertyChanged("Venues");
                }
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_EventVenues(EventVenues entity)
        {
            SendPropertyChanging();
            entity.VenueOwners = this;
        }

        private void detach_EventVenues(EventVenues entity)
        {
            SendPropertyChanging();
            entity.VenueOwners = null;
        }

        private void Initialize()
        {
            _EventVenues = new EntitySet<EventVenues>(new Action<EventVenues>(attach_EventVenues), new Action<EventVenues>(detach_EventVenues));
            _UserRoles = default(EntityRef<UserRoles>);
            _VenueOwnerRoles = default(EntityRef<VenueOwnerRoles>);
            _Venues = default(EntityRef<Venues>);
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }

    [Table(Name = "dbo.Venues")]
    [DataContract()]
    public partial class Venues : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        private int _Id;
        private string _Name;
        private EntitySet<VenueOwners> _VenueOwners;
        private bool serializing;

        #region Extensibility Method Definitions

        partial void OnLoaded();

        partial void OnValidate(ChangeAction action);

        partial void OnCreated();

        partial void OnIdChanging(int value);

        partial void OnIdChanged();

        partial void OnNameChanging(string value);

        partial void OnNameChanged();

        #endregion

        public Venues()
        {
            Initialize();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        [DataMember(Order = 1)]
        public int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(4000) NOT NULL", CanBeNull = false)]
        [DataMember(Order = 2)]
        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if ((_Name != value))
                {
                    OnNameChanging(value);
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }

        [Association(Name = "FK_VenueOwners_Venues", Storage = "_VenueOwners", ThisKey = "Id", OtherKey = "VenueId", DeleteRule = "NO ACTION")]
        [DataMember(Order = 3, EmitDefaultValue = false)]
        public EntitySet<VenueOwners> VenueOwners
        {
            get
            {
                if ((serializing
                     && (_VenueOwners.HasLoadedOrAssignedValues == false)))
                {
                    return null;
                }
                return _VenueOwners;
            }
            set
            {
                _VenueOwners.Assign(value);
            }
        }

        [OnDeserializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnDeserializing(StreamingContext context)
        {
            Initialize();
        }

        [OnSerializing()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_VenueOwners(VenueOwners entity)
        {
            SendPropertyChanging();
            entity.Venues = this;
        }

        private void detach_VenueOwners(VenueOwners entity)
        {
            SendPropertyChanging();
            entity.Venues = null;
        }

        private void Initialize()
        {
            _VenueOwners = new EntitySet<VenueOwners>(new Action<VenueOwners>(attach_VenueOwners), new Action<VenueOwners>(detach_VenueOwners));
            OnCreated();
        }

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
    }
}

#pragma warning restore 1591